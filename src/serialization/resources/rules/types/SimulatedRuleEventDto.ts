/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import { Squidex } from "@fern-api/squidex";
import * as core from "../../../../core";

export const SimulatedRuleEventDto: core.serialization.ObjectSchema<
    serializers.SimulatedRuleEventDto.Raw,
    Squidex.SimulatedRuleEventDto
> = core.serialization.object({
    eventId: core.serialization.string(),
    eventName: core.serialization.string(),
    event: core.serialization.unknown(),
    enrichedEvent: core.serialization.unknown().optional(),
    actionName: core.serialization.string().optional(),
    actionData: core.serialization.string().optional(),
    error: core.serialization.string().optional(),
    skipReasons: core.serialization.list(core.serialization.lazy(async () => (await import("../../..")).SkipReason)),
});

export declare namespace SimulatedRuleEventDto {
    interface Raw {
        eventId: string;
        eventName: string;
        event?: unknown;
        enrichedEvent?: unknown | null;
        actionName?: string | null;
        actionData?: string | null;
        error?: string | null;
        skipReasons: serializers.SkipReason.Raw[];
    }
}
