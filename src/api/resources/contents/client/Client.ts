/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Squidex from "../../..";
import { default as URLSearchParams } from "@ungap/url-search-params";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization";
import * as errors from "../../../../errors";
import * as stream from "stream";

export declare namespace Contents {
    interface Options {
        environment?: core.Supplier<environments.SquidexEnvironment | string>;
        appName: string;
        token: core.Supplier<core.BearerToken>;
        fetcher?: core.FetchFunction;
        streamingFetcher?: core.StreamingFetchFunction;
    }

    interface RequestOptions {
        timeoutInSeconds?: number;
    }
}

export class Contents {
    constructor(protected readonly _options: Contents.Options) {}

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @throws {@link Squidex.NotFoundError}
     * @throws {@link Squidex.InternalServerError}
     */
    public async getContents(
        schema: string,
        request: Squidex.ContentsGetContentsRequest = {},
        requestOptions?: Contents.RequestOptions
    ): Promise<Squidex.ContentsDto> {
        const {
            ids,
            q,
            search,
            top,
            skip,
            orderby,
            filter,
            fields,
            flatten,
            languages,
            noSlowTotal,
            noTotal,
            unpublished,
        } = request;
        const _queryParams = new URLSearchParams();
        if (ids != null) {
            _queryParams.append("ids", ids);
        }

        if (q != null) {
            _queryParams.append("q", q);
        }

        if (search != null) {
            _queryParams.append("$search", search);
        }

        if (top != null) {
            _queryParams.append("$top", top.toString());
        }

        if (skip != null) {
            _queryParams.append("$skip", skip.toString());
        }

        if (orderby != null) {
            _queryParams.append("$orderby", orderby);
        }

        if (filter != null) {
            _queryParams.append("$filter", filter);
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.SquidexEnvironment.Default,
                `api/content/${this._options.appName}/${schema}`
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@squidex/squidex",
                "X-Fern-SDK-Version": "1.2.1",
                "X-Fields": fields != null ? fields : undefined,
                "X-Flatten": flatten != null ? flatten.toString() : undefined,
                "X-Languages": languages != null ? languages : undefined,
                "X-NoSlowTotal": noSlowTotal != null ? noSlowTotal.toString() : undefined,
                "X-NoTotal": noTotal != null ? noTotal.toString() : undefined,
                "X-Unpublished": unpublished != null ? unpublished.toString() : undefined,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
        });
        if (_response.ok) {
            return await serializers.ContentsDto.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 404:
                    throw new Squidex.NotFoundError(_response.error.body);
                case 500:
                    throw new Squidex.InternalServerError(
                        await serializers.ErrorDto.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.SquidexError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquidexError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SquidexTimeoutError();
            case "unknown":
                throw new errors.SquidexError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @throws {@link Squidex.BadRequestError}
     * @throws {@link Squidex.NotFoundError}
     * @throws {@link Squidex.InternalServerError}
     */
    public async postContent(
        schema: string,
        request: Squidex.ContentsPostContentRequest,
        requestOptions?: Contents.RequestOptions
    ): Promise<Squidex.ContentDto> {
        const { status, id, publish, unpublished, languages, body: _body } = request;
        const _queryParams = new URLSearchParams();
        if (status != null) {
            _queryParams.append("status", status);
        }

        if (id != null) {
            _queryParams.append("id", id);
        }

        if (publish != null) {
            _queryParams.append("publish", publish.toString());
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.SquidexEnvironment.Default,
                `api/content/${this._options.appName}/${schema}`
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@squidex/squidex",
                "X-Fern-SDK-Version": "1.2.1",
                "X-Unpublished": unpublished != null ? unpublished.toString() : undefined,
                "X-Languages": languages != null ? languages : undefined,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            body: await serializers.contents.postContent.Request.jsonOrThrow(_body, {
                unrecognizedObjectKeys: "strip",
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
        });
        if (_response.ok) {
            return await serializers.ContentDto.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Squidex.BadRequestError(
                        await serializers.ErrorDto.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 404:
                    throw new Squidex.NotFoundError(_response.error.body);
                case 500:
                    throw new Squidex.InternalServerError(
                        await serializers.ErrorDto.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.SquidexError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquidexError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SquidexTimeoutError();
            case "unknown":
                throw new errors.SquidexError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @throws {@link Squidex.BadRequestError}
     * @throws {@link Squidex.NotFoundError}
     * @throws {@link Squidex.InternalServerError}
     */
    public async getContentsPost(
        schema: string,
        request: Squidex.ContentsGetContentsPostRequest,
        requestOptions?: Contents.RequestOptions
    ): Promise<Squidex.ContentsDto> {
        const { fields, flatten, languages, noSlowTotal, noTotal, unpublished, body: _body } = request;
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.SquidexEnvironment.Default,
                `api/content/${this._options.appName}/${schema}/query`
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@squidex/squidex",
                "X-Fern-SDK-Version": "1.2.1",
                "X-Fields": fields != null ? fields : undefined,
                "X-Flatten": flatten != null ? flatten.toString() : undefined,
                "X-Languages": languages != null ? languages : undefined,
                "X-NoSlowTotal": noSlowTotal != null ? noSlowTotal.toString() : undefined,
                "X-NoTotal": noTotal != null ? noTotal.toString() : undefined,
                "X-Unpublished": unpublished != null ? unpublished.toString() : undefined,
            },
            contentType: "application/json",
            body: await serializers.QueryDto.jsonOrThrow(_body, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
        });
        if (_response.ok) {
            return await serializers.ContentsDto.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Squidex.BadRequestError(
                        await serializers.ErrorDto.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 404:
                    throw new Squidex.NotFoundError(_response.error.body);
                case 500:
                    throw new Squidex.InternalServerError(
                        await serializers.ErrorDto.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.SquidexError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquidexError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SquidexTimeoutError();
            case "unknown":
                throw new errors.SquidexError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @throws {@link Squidex.NotFoundError}
     * @throws {@link Squidex.InternalServerError}
     */
    public async getContent(
        schema: string,
        id: string,
        request: Squidex.ContentsGetContentRequest = {},
        requestOptions?: Contents.RequestOptions
    ): Promise<Squidex.ContentDto> {
        const { version, fields, flatten, languages, unpublished } = request;
        const _queryParams = new URLSearchParams();
        if (version != null) {
            _queryParams.append("version", version.toString());
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.SquidexEnvironment.Default,
                `api/content/${this._options.appName}/${schema}/${id}`
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@squidex/squidex",
                "X-Fern-SDK-Version": "1.2.1",
                "X-Fields": fields != null ? fields : undefined,
                "X-Flatten": flatten != null ? flatten.toString() : undefined,
                "X-Languages": languages != null ? languages : undefined,
                "X-Unpublished": unpublished != null ? unpublished.toString() : undefined,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
        });
        if (_response.ok) {
            return await serializers.ContentDto.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 404:
                    throw new Squidex.NotFoundError(_response.error.body);
                case 500:
                    throw new Squidex.InternalServerError(
                        await serializers.ErrorDto.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.SquidexError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquidexError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SquidexTimeoutError();
            case "unknown":
                throw new errors.SquidexError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @throws {@link Squidex.BadRequestError}
     * @throws {@link Squidex.NotFoundError}
     * @throws {@link Squidex.InternalServerError}
     */
    public async postUpsertContent(
        schema: string,
        id: string,
        request: Squidex.ContentsPostUpsertContentRequest,
        requestOptions?: Contents.RequestOptions
    ): Promise<Squidex.ContentDto> {
        const { status, patch, publish, unpublished, languages, body: _body } = request;
        const _queryParams = new URLSearchParams();
        if (status != null) {
            _queryParams.append("status", status);
        }

        if (patch != null) {
            _queryParams.append("patch", patch.toString());
        }

        if (publish != null) {
            _queryParams.append("publish", publish.toString());
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.SquidexEnvironment.Default,
                `api/content/${this._options.appName}/${schema}/${id}`
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@squidex/squidex",
                "X-Fern-SDK-Version": "1.2.1",
                "X-Unpublished": unpublished != null ? unpublished.toString() : undefined,
                "X-Languages": languages != null ? languages : undefined,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            body: await serializers.contents.postUpsertContent.Request.jsonOrThrow(_body, {
                unrecognizedObjectKeys: "strip",
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
        });
        if (_response.ok) {
            return await serializers.ContentDto.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Squidex.BadRequestError(
                        await serializers.ErrorDto.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 404:
                    throw new Squidex.NotFoundError(_response.error.body);
                case 500:
                    throw new Squidex.InternalServerError(
                        await serializers.ErrorDto.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.SquidexError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquidexError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SquidexTimeoutError();
            case "unknown":
                throw new errors.SquidexError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @throws {@link Squidex.BadRequestError}
     * @throws {@link Squidex.NotFoundError}
     * @throws {@link Squidex.InternalServerError}
     */
    public async putContent(
        schema: string,
        id: string,
        request: Squidex.ContentsPutContentRequest,
        requestOptions?: Contents.RequestOptions
    ): Promise<Squidex.ContentDto> {
        const { unpublished, languages, body: _body } = request;
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.SquidexEnvironment.Default,
                `api/content/${this._options.appName}/${schema}/${id}`
            ),
            method: "PUT",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@squidex/squidex",
                "X-Fern-SDK-Version": "1.2.1",
                "X-Unpublished": unpublished != null ? unpublished.toString() : undefined,
                "X-Languages": languages != null ? languages : undefined,
            },
            contentType: "application/json",
            body: await serializers.contents.putContent.Request.jsonOrThrow(_body, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
        });
        if (_response.ok) {
            return await serializers.ContentDto.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Squidex.BadRequestError(
                        await serializers.ErrorDto.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 404:
                    throw new Squidex.NotFoundError(_response.error.body);
                case 500:
                    throw new Squidex.InternalServerError(
                        await serializers.ErrorDto.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.SquidexError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquidexError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SquidexTimeoutError();
            case "unknown":
                throw new errors.SquidexError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @throws {@link Squidex.BadRequestError}
     * @throws {@link Squidex.NotFoundError}
     * @throws {@link Squidex.InternalServerError}
     */
    public async patchContent(
        schema: string,
        id: string,
        request: Squidex.ContentsPatchContentRequest,
        requestOptions?: Contents.RequestOptions
    ): Promise<Squidex.ContentDto> {
        const { unpublished, languages, body: _body } = request;
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.SquidexEnvironment.Default,
                `api/content/${this._options.appName}/${schema}/${id}`
            ),
            method: "PATCH",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@squidex/squidex",
                "X-Fern-SDK-Version": "1.2.1",
                "X-Unpublished": unpublished != null ? unpublished.toString() : undefined,
                "X-Languages": languages != null ? languages : undefined,
            },
            contentType: "application/json",
            body: await serializers.contents.patchContent.Request.jsonOrThrow(_body, {
                unrecognizedObjectKeys: "strip",
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
        });
        if (_response.ok) {
            return await serializers.ContentDto.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Squidex.BadRequestError(
                        await serializers.ErrorDto.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 404:
                    throw new Squidex.NotFoundError(_response.error.body);
                case 500:
                    throw new Squidex.InternalServerError(
                        await serializers.ErrorDto.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.SquidexError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquidexError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SquidexTimeoutError();
            case "unknown":
                throw new errors.SquidexError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * You can create an generated documentation for your app at /api/content/{appName}/docs.
     * @throws {@link Squidex.BadRequestError}
     * @throws {@link Squidex.NotFoundError}
     * @throws {@link Squidex.InternalServerError}
     */
    public async deleteContent(
        schema: string,
        id: string,
        request: Squidex.ContentsDeleteContentRequest = {},
        requestOptions?: Contents.RequestOptions
    ): Promise<void> {
        const { checkReferrers, permanent } = request;
        const _queryParams = new URLSearchParams();
        if (checkReferrers != null) {
            _queryParams.append("checkReferrers", checkReferrers.toString());
        }

        if (permanent != null) {
            _queryParams.append("permanent", permanent.toString());
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.SquidexEnvironment.Default,
                `api/content/${this._options.appName}/${schema}/${id}`
            ),
            method: "DELETE",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@squidex/squidex",
                "X-Fern-SDK-Version": "1.2.1",
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Squidex.BadRequestError(
                        await serializers.ErrorDto.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 404:
                    throw new Squidex.NotFoundError(_response.error.body);
                case 500:
                    throw new Squidex.InternalServerError(
                        await serializers.ErrorDto.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.SquidexError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquidexError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SquidexTimeoutError();
            case "unknown":
                throw new errors.SquidexError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @throws {@link Squidex.BadRequestError}
     * @throws {@link Squidex.NotFoundError}
     * @throws {@link Squidex.InternalServerError}
     */
    public async getContentValidity(
        schema: string,
        id: string,
        requestOptions?: Contents.RequestOptions
    ): Promise<void> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.SquidexEnvironment.Default,
                `api/content/${this._options.appName}/${schema}/${id}/validity`
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@squidex/squidex",
                "X-Fern-SDK-Version": "1.2.1",
            },
            contentType: "application/json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Squidex.BadRequestError(
                        await serializers.ErrorDto.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 404:
                    throw new Squidex.NotFoundError(_response.error.body);
                case 500:
                    throw new Squidex.InternalServerError(
                        await serializers.ErrorDto.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.SquidexError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquidexError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SquidexTimeoutError();
            case "unknown":
                throw new errors.SquidexError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @throws {@link Squidex.NotFoundError}
     * @throws {@link Squidex.InternalServerError}
     */
    public async getReferences(
        schema: string,
        id: string,
        request: Squidex.ContentsGetReferencesRequest = {},
        requestOptions?: Contents.RequestOptions
    ): Promise<Squidex.ContentsDto> {
        const { q, fields, flatten, languages, unpublished, noSlowTotal, noTotal } = request;
        const _queryParams = new URLSearchParams();
        if (q != null) {
            _queryParams.append("q", q);
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.SquidexEnvironment.Default,
                `api/content/${this._options.appName}/${schema}/${id}/references`
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@squidex/squidex",
                "X-Fern-SDK-Version": "1.2.1",
                "X-Fields": fields != null ? fields : undefined,
                "X-Flatten": flatten != null ? flatten.toString() : undefined,
                "X-Languages": languages != null ? languages : undefined,
                "X-Unpublished": unpublished != null ? unpublished.toString() : undefined,
                "X-NoSlowTotal": noSlowTotal != null ? noSlowTotal.toString() : undefined,
                "X-NoTotal": noTotal != null ? noTotal.toString() : undefined,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
        });
        if (_response.ok) {
            return await serializers.ContentsDto.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 404:
                    throw new Squidex.NotFoundError(_response.error.body);
                case 500:
                    throw new Squidex.InternalServerError(
                        await serializers.ErrorDto.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.SquidexError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquidexError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SquidexTimeoutError();
            case "unknown":
                throw new errors.SquidexError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @throws {@link Squidex.NotFoundError}
     * @throws {@link Squidex.InternalServerError}
     */
    public async getReferencing(
        schema: string,
        id: string,
        request: Squidex.ContentsGetReferencingRequest = {},
        requestOptions?: Contents.RequestOptions
    ): Promise<Squidex.ContentsDto> {
        const { q, fields, flatten, languages, unpublished, noSlowTotal, noTotal } = request;
        const _queryParams = new URLSearchParams();
        if (q != null) {
            _queryParams.append("q", q);
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.SquidexEnvironment.Default,
                `api/content/${this._options.appName}/${schema}/${id}/referencing`
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@squidex/squidex",
                "X-Fern-SDK-Version": "1.2.1",
                "X-Fields": fields != null ? fields : undefined,
                "X-Flatten": flatten != null ? flatten.toString() : undefined,
                "X-Languages": languages != null ? languages : undefined,
                "X-Unpublished": unpublished != null ? unpublished.toString() : undefined,
                "X-NoSlowTotal": noSlowTotal != null ? noSlowTotal.toString() : undefined,
                "X-NoTotal": noTotal != null ? noTotal.toString() : undefined,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
        });
        if (_response.ok) {
            return await serializers.ContentsDto.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 404:
                    throw new Squidex.NotFoundError(_response.error.body);
                case 500:
                    throw new Squidex.InternalServerError(
                        await serializers.ErrorDto.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.SquidexError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquidexError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SquidexTimeoutError();
            case "unknown":
                throw new errors.SquidexError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     */
    public async getContentVersion(
        schema: string,
        id: string,
        version: number,
        request: Squidex.ContentsGetContentVersionRequest = {},
        requestOptions?: Contents.RequestOptions
    ): Promise<{
        data: stream.Readable;
        contentLengthInBytes?: number;
        contentType?: string;
    }> {
        const { unpublished, languages } = request;
        const _response = await (this._options.streamingFetcher ?? core.streamingFetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.SquidexEnvironment.Default,
                `api/content/${this._options.appName}/${schema}/${id}/${version}`
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@squidex/squidex",
                "X-Fern-SDK-Version": "1.2.1",
                "X-Unpublished": unpublished != null ? unpublished.toString() : undefined,
                "X-Languages": languages != null ? languages : undefined,
            },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            onError: (error) => {
                throw new errors.SquidexError({
                    message: (error as any)?.message,
                });
            },
        });
        const _contentLength = core.getHeader(_response, "Content-Length");
        return {
            data: _response.data,
            contentLengthInBytes: _contentLength != null ? Number(_contentLength) : undefined,
            contentType: core.getHeader(_response, "Content-Type"),
        };
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @throws {@link Squidex.BadRequestError}
     * @throws {@link Squidex.NotFoundError}
     * @throws {@link Squidex.InternalServerError}
     */
    public async postContents(
        schema: string,
        request: Squidex.ImportContentsDto,
        requestOptions?: Contents.RequestOptions
    ): Promise<Squidex.BulkResultDto[]> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.SquidexEnvironment.Default,
                `api/content/${this._options.appName}/${schema}/import`
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@squidex/squidex",
                "X-Fern-SDK-Version": "1.2.1",
            },
            contentType: "application/json",
            body: await serializers.ImportContentsDto.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
        });
        if (_response.ok) {
            return await serializers.contents.postContents.Response.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Squidex.BadRequestError(
                        await serializers.ErrorDto.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 404:
                    throw new Squidex.NotFoundError(_response.error.body);
                case 500:
                    throw new Squidex.InternalServerError(
                        await serializers.ErrorDto.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.SquidexError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquidexError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SquidexTimeoutError();
            case "unknown":
                throw new errors.SquidexError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @throws {@link Squidex.BadRequestError}
     * @throws {@link Squidex.NotFoundError}
     * @throws {@link Squidex.InternalServerError}
     */
    public async bulkUpdateContents(
        schema: string,
        request: Squidex.BulkUpdateContentsDto,
        requestOptions?: Contents.RequestOptions
    ): Promise<Squidex.BulkResultDto[]> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.SquidexEnvironment.Default,
                `api/content/${this._options.appName}/${schema}/bulk`
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@squidex/squidex",
                "X-Fern-SDK-Version": "1.2.1",
            },
            contentType: "application/json",
            body: await serializers.BulkUpdateContentsDto.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
        });
        if (_response.ok) {
            return await serializers.contents.bulkUpdateContents.Response.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Squidex.BadRequestError(
                        await serializers.ErrorDto.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 404:
                    throw new Squidex.NotFoundError(_response.error.body);
                case 500:
                    throw new Squidex.InternalServerError(
                        await serializers.ErrorDto.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.SquidexError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquidexError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SquidexTimeoutError();
            case "unknown":
                throw new errors.SquidexError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @throws {@link Squidex.BadRequestError}
     * @throws {@link Squidex.NotFoundError}
     * @throws {@link Squidex.InternalServerError}
     */
    public async putContentStatus(
        schema: string,
        id: string,
        request: Squidex.ChangeStatusDto,
        requestOptions?: Contents.RequestOptions
    ): Promise<Squidex.ContentDto> {
        const { unpublished, languages, ..._body } = request;
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.SquidexEnvironment.Default,
                `api/content/${this._options.appName}/${schema}/${id}/status`
            ),
            method: "PUT",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@squidex/squidex",
                "X-Fern-SDK-Version": "1.2.1",
                "X-Unpublished": unpublished != null ? unpublished.toString() : undefined,
                "X-Languages": languages != null ? languages : undefined,
            },
            contentType: "application/json",
            body: await serializers.ChangeStatusDto.jsonOrThrow(_body, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
        });
        if (_response.ok) {
            return await serializers.ContentDto.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Squidex.BadRequestError(
                        await serializers.ErrorDto.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 404:
                    throw new Squidex.NotFoundError(_response.error.body);
                case 500:
                    throw new Squidex.InternalServerError(
                        await serializers.ErrorDto.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.SquidexError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquidexError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SquidexTimeoutError();
            case "unknown":
                throw new errors.SquidexError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @throws {@link Squidex.BadRequestError}
     * @throws {@link Squidex.NotFoundError}
     * @throws {@link Squidex.InternalServerError}
     */
    public async deleteContentStatus(
        schema: string,
        id: string,
        request: Squidex.ContentsDeleteContentStatusRequest = {},
        requestOptions?: Contents.RequestOptions
    ): Promise<Squidex.ContentDto> {
        const { unpublished, languages } = request;
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.SquidexEnvironment.Default,
                `api/content/${this._options.appName}/${schema}/${id}/status`
            ),
            method: "DELETE",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@squidex/squidex",
                "X-Fern-SDK-Version": "1.2.1",
                "X-Unpublished": unpublished != null ? unpublished.toString() : undefined,
                "X-Languages": languages != null ? languages : undefined,
            },
            contentType: "application/json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
        });
        if (_response.ok) {
            return await serializers.ContentDto.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Squidex.BadRequestError(
                        await serializers.ErrorDto.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 404:
                    throw new Squidex.NotFoundError(_response.error.body);
                case 500:
                    throw new Squidex.InternalServerError(
                        await serializers.ErrorDto.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.SquidexError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquidexError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SquidexTimeoutError();
            case "unknown":
                throw new errors.SquidexError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @throws {@link Squidex.BadRequestError}
     * @throws {@link Squidex.NotFoundError}
     * @throws {@link Squidex.InternalServerError}
     */
    public async createDraft(
        schema: string,
        id: string,
        request: Squidex.ContentsCreateDraftRequest = {},
        requestOptions?: Contents.RequestOptions
    ): Promise<Squidex.ContentDto> {
        const { unpublished, languages } = request;
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.SquidexEnvironment.Default,
                `api/content/${this._options.appName}/${schema}/${id}/draft`
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@squidex/squidex",
                "X-Fern-SDK-Version": "1.2.1",
                "X-Unpublished": unpublished != null ? unpublished.toString() : undefined,
                "X-Languages": languages != null ? languages : undefined,
            },
            contentType: "application/json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
        });
        if (_response.ok) {
            return await serializers.ContentDto.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Squidex.BadRequestError(
                        await serializers.ErrorDto.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 404:
                    throw new Squidex.NotFoundError(_response.error.body);
                case 500:
                    throw new Squidex.InternalServerError(
                        await serializers.ErrorDto.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.SquidexError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquidexError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SquidexTimeoutError();
            case "unknown":
                throw new errors.SquidexError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @throws {@link Squidex.BadRequestError}
     * @throws {@link Squidex.NotFoundError}
     * @throws {@link Squidex.InternalServerError}
     */
    public async deleteVersion(
        schema: string,
        id: string,
        request: Squidex.ContentsDeleteVersionRequest = {},
        requestOptions?: Contents.RequestOptions
    ): Promise<Squidex.ContentDto> {
        const { unpublished, languages } = request;
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.SquidexEnvironment.Default,
                `api/content/${this._options.appName}/${schema}/${id}/draft`
            ),
            method: "DELETE",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@squidex/squidex",
                "X-Fern-SDK-Version": "1.2.1",
                "X-Unpublished": unpublished != null ? unpublished.toString() : undefined,
                "X-Languages": languages != null ? languages : undefined,
            },
            contentType: "application/json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
        });
        if (_response.ok) {
            return await serializers.ContentDto.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Squidex.BadRequestError(
                        await serializers.ErrorDto.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 404:
                    throw new Squidex.NotFoundError(_response.error.body);
                case 500:
                    throw new Squidex.InternalServerError(
                        await serializers.ErrorDto.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.SquidexError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquidexError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SquidexTimeoutError();
            case "unknown":
                throw new errors.SquidexError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @throws {@link Squidex.NotFoundError}
     * @throws {@link Squidex.InternalServerError}
     */
    public async getGraphQl(
        request: Squidex.ContentsGetGraphQlRequest = {},
        requestOptions?: Contents.RequestOptions
    ): Promise<unknown> {
        const { query, operationName, variables, unpublished } = request;
        const _queryParams = new URLSearchParams();
        if (query != null) {
            _queryParams.append("query", query);
        }

        if (operationName != null) {
            _queryParams.append("operationName", operationName);
        }

        if (variables != null) {
            _queryParams.append("variables", variables);
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.SquidexEnvironment.Default,
                `api/content/${this._options.appName}/graphql`
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@squidex/squidex",
                "X-Fern-SDK-Version": "1.2.1",
                "X-Unpublished": unpublished != null ? unpublished.toString() : undefined,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
        });
        if (_response.ok) {
            return _response.body;
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 404:
                    throw new Squidex.NotFoundError(_response.error.body);
                case 500:
                    throw new Squidex.InternalServerError(
                        await serializers.ErrorDto.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.SquidexError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquidexError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SquidexTimeoutError();
            case "unknown":
                throw new errors.SquidexError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @throws {@link Squidex.BadRequestError}
     * @throws {@link Squidex.NotFoundError}
     * @throws {@link Squidex.InternalServerError}
     */
    public async postGraphQl(
        request: Squidex.ContentsPostGraphQlRequest,
        requestOptions?: Contents.RequestOptions
    ): Promise<unknown> {
        const { unpublished, body: _body } = request;
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.SquidexEnvironment.Default,
                `api/content/${this._options.appName}/graphql`
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@squidex/squidex",
                "X-Fern-SDK-Version": "1.2.1",
                "X-Unpublished": unpublished != null ? unpublished.toString() : undefined,
            },
            contentType: "application/json",
            body: _body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
        });
        if (_response.ok) {
            return _response.body;
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Squidex.BadRequestError(
                        await serializers.ErrorDto.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 404:
                    throw new Squidex.NotFoundError(_response.error.body);
                case 500:
                    throw new Squidex.InternalServerError(
                        await serializers.ErrorDto.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.SquidexError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquidexError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SquidexTimeoutError();
            case "unknown":
                throw new errors.SquidexError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @throws {@link Squidex.NotFoundError}
     * @throws {@link Squidex.InternalServerError}
     */
    public async getGraphQlBatch(
        request: Squidex.ContentsGetGraphQlBatchRequest = {},
        requestOptions?: Contents.RequestOptions
    ): Promise<unknown> {
        const { query, operationName, variables, unpublished } = request;
        const _queryParams = new URLSearchParams();
        if (query != null) {
            _queryParams.append("query", query);
        }

        if (operationName != null) {
            _queryParams.append("operationName", operationName);
        }

        if (variables != null) {
            _queryParams.append("variables", variables);
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.SquidexEnvironment.Default,
                `api/content/${this._options.appName}/graphql/batch`
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@squidex/squidex",
                "X-Fern-SDK-Version": "1.2.1",
                "X-Unpublished": unpublished != null ? unpublished.toString() : undefined,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
        });
        if (_response.ok) {
            return _response.body;
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 404:
                    throw new Squidex.NotFoundError(_response.error.body);
                case 500:
                    throw new Squidex.InternalServerError(
                        await serializers.ErrorDto.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.SquidexError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquidexError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SquidexTimeoutError();
            case "unknown":
                throw new errors.SquidexError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @throws {@link Squidex.BadRequestError}
     * @throws {@link Squidex.NotFoundError}
     * @throws {@link Squidex.InternalServerError}
     */
    public async postGraphQlBatch(
        request: Squidex.ContentsPostGraphQlBatchRequest,
        requestOptions?: Contents.RequestOptions
    ): Promise<unknown> {
        const { unpublished, body: _body } = request;
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.SquidexEnvironment.Default,
                `api/content/${this._options.appName}/graphql/batch`
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@squidex/squidex",
                "X-Fern-SDK-Version": "1.2.1",
                "X-Unpublished": unpublished != null ? unpublished.toString() : undefined,
            },
            contentType: "application/json",
            body: _body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
        });
        if (_response.ok) {
            return _response.body;
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Squidex.BadRequestError(
                        await serializers.ErrorDto.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 404:
                    throw new Squidex.NotFoundError(_response.error.body);
                case 500:
                    throw new Squidex.InternalServerError(
                        await serializers.ErrorDto.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.SquidexError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquidexError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SquidexTimeoutError();
            case "unknown":
                throw new errors.SquidexError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @throws {@link Squidex.NotFoundError}
     * @throws {@link Squidex.InternalServerError}
     */
    public async getAllContents(
        request: Squidex.ContentsGetAllContentsRequest = {},
        requestOptions?: Contents.RequestOptions
    ): Promise<Squidex.ContentsDto> {
        const {
            ids,
            scheduleFrom,
            scheduleTo,
            referencing,
            references,
            q,
            fields,
            flatten,
            languages,
            noSlowTotal,
            noTotal,
            unpublished,
        } = request;
        const _queryParams = new URLSearchParams();
        if (ids != null) {
            _queryParams.append("ids", ids);
        }

        if (scheduleFrom != null) {
            _queryParams.append("scheduleFrom", scheduleFrom.toISOString());
        }

        if (scheduleTo != null) {
            _queryParams.append("scheduleTo", scheduleTo.toISOString());
        }

        if (referencing != null) {
            _queryParams.append("referencing", referencing);
        }

        if (references != null) {
            _queryParams.append("references", references);
        }

        if (q != null) {
            _queryParams.append("q", q);
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.SquidexEnvironment.Default,
                `api/content/${this._options.appName}`
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@squidex/squidex",
                "X-Fern-SDK-Version": "1.2.1",
                "X-Fields": fields != null ? fields : undefined,
                "X-Flatten": flatten != null ? flatten.toString() : undefined,
                "X-Languages": languages != null ? languages : undefined,
                "X-NoSlowTotal": noSlowTotal != null ? noSlowTotal.toString() : undefined,
                "X-NoTotal": noTotal != null ? noTotal.toString() : undefined,
                "X-Unpublished": unpublished != null ? unpublished.toString() : undefined,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
        });
        if (_response.ok) {
            return await serializers.ContentsDto.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 404:
                    throw new Squidex.NotFoundError(_response.error.body);
                case 500:
                    throw new Squidex.InternalServerError(
                        await serializers.ErrorDto.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.SquidexError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquidexError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SquidexTimeoutError();
            case "unknown":
                throw new errors.SquidexError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @throws {@link Squidex.BadRequestError}
     * @throws {@link Squidex.NotFoundError}
     * @throws {@link Squidex.InternalServerError}
     */
    public async getAllContentsPost(
        request: Squidex.AllContentsByPostDto = {},
        requestOptions?: Contents.RequestOptions
    ): Promise<Squidex.ContentsDto> {
        const { fields, flatten, languages, noSlowTotal, noTotal, unpublished, ..._body } = request;
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.SquidexEnvironment.Default,
                `api/content/${this._options.appName}`
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@squidex/squidex",
                "X-Fern-SDK-Version": "1.2.1",
                "X-Fields": fields != null ? fields : undefined,
                "X-Flatten": flatten != null ? flatten.toString() : undefined,
                "X-Languages": languages != null ? languages : undefined,
                "X-NoSlowTotal": noSlowTotal != null ? noSlowTotal.toString() : undefined,
                "X-NoTotal": noTotal != null ? noTotal.toString() : undefined,
                "X-Unpublished": unpublished != null ? unpublished.toString() : undefined,
            },
            contentType: "application/json",
            body: await serializers.AllContentsByPostDto.jsonOrThrow(_body, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
        });
        if (_response.ok) {
            return await serializers.ContentsDto.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Squidex.BadRequestError(
                        await serializers.ErrorDto.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 404:
                    throw new Squidex.NotFoundError(_response.error.body);
                case 500:
                    throw new Squidex.InternalServerError(
                        await serializers.ErrorDto.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.SquidexError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquidexError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SquidexTimeoutError();
            case "unknown":
                throw new errors.SquidexError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @throws {@link Squidex.BadRequestError}
     * @throws {@link Squidex.NotFoundError}
     * @throws {@link Squidex.InternalServerError}
     */
    public async bulkUpdateAllContents(
        request: Squidex.ContentsBulkUpdateAllContentsRequest,
        requestOptions?: Contents.RequestOptions
    ): Promise<Squidex.BulkResultDto[]> {
        const { schema, body: _body } = request;
        const _queryParams = new URLSearchParams();
        if (schema != null) {
            _queryParams.append("schema", schema);
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.SquidexEnvironment.Default,
                `api/content/${this._options.appName}/bulk`
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@squidex/squidex",
                "X-Fern-SDK-Version": "1.2.1",
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            body: await serializers.BulkUpdateContentsDto.jsonOrThrow(_body, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
        });
        if (_response.ok) {
            return await serializers.contents.bulkUpdateAllContents.Response.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Squidex.BadRequestError(
                        await serializers.ErrorDto.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 404:
                    throw new Squidex.NotFoundError(_response.error.body);
                case 500:
                    throw new Squidex.InternalServerError(
                        await serializers.ErrorDto.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.SquidexError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquidexError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SquidexTimeoutError();
            case "unknown":
                throw new errors.SquidexError({
                    message: _response.error.errorMessage,
                });
        }
    }

    protected async _getAuthorizationHeader() {
        return `Bearer ${await core.Supplier.get(this._options.token)}`;
    }
}
