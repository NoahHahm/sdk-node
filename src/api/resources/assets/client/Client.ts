/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import { SquidexApi } from "@fern-api/squidex";
import urlJoin from "url-join";
import * as errors from "../../../../errors";
import * as serializers from "../../../../serialization";

export declare namespace Assets {
    interface Options {
        environment?: environments.SquidexApiEnvironment | string;
        token?: core.Supplier<core.BearerToken | undefined>;
    }
}

export class Assets {
    constructor(private readonly options: Assets.Options) {}

    public async getAssetBySlug(
        app: string,
        idOrSlug: string,
        more: string,
        request: SquidexApi.GetAssetContentBySlugRequest = {}
    ): Promise<void> {
        const {
            version,
            cache,
            download,
            width,
            height,
            quality,
            mode,
            bg,
            focusX,
            focusY,
            nofocus,
            auto,
            force,
            format,
        } = request;
        const _queryParams = new URLSearchParams();
        if (version != null) {
            _queryParams.append("version", version.toString());
        }

        if (cache != null) {
            _queryParams.append("cache", cache.toString());
        }

        if (download != null) {
            _queryParams.append("download", download.toString());
        }

        if (width != null) {
            _queryParams.append("width", width.toString());
        }

        if (height != null) {
            _queryParams.append("height", height.toString());
        }

        if (quality != null) {
            _queryParams.append("quality", quality.toString());
        }

        if (mode != null) {
            _queryParams.append("mode", mode);
        }

        if (bg != null) {
            _queryParams.append("bg", bg);
        }

        if (focusX != null) {
            _queryParams.append("focusX", focusX.toString());
        }

        if (focusY != null) {
            _queryParams.append("focusY", focusY.toString());
        }

        if (nofocus != null) {
            _queryParams.append("nofocus", nofocus.toString());
        }

        if (auto != null) {
            _queryParams.append("auto", auto.toString());
        }

        if (force != null) {
            _queryParams.append("force", force.toString());
        }

        if (format != null) {
            _queryParams.append("format", format);
        }

        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.SquidexApiEnvironment.Production,
                `/api/assets/${app}/${idOrSlug}/${more}`
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
            },
            contentType: "application/json",
            queryParameters: _queryParams,
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquidexApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquidexApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SquidexApiTimeoutError();
            case "unknown":
                throw new errors.SquidexApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    public async get(id: string, request: SquidexApi.GetAssetContentRequest = {}): Promise<void> {
        const {
            version,
            cache,
            download,
            width,
            height,
            quality,
            mode,
            bg,
            focusX,
            focusY,
            nofocus,
            auto,
            force,
            format,
        } = request;
        const _queryParams = new URLSearchParams();
        if (version != null) {
            _queryParams.append("version", version.toString());
        }

        if (cache != null) {
            _queryParams.append("cache", cache.toString());
        }

        if (download != null) {
            _queryParams.append("download", download.toString());
        }

        if (width != null) {
            _queryParams.append("width", width.toString());
        }

        if (height != null) {
            _queryParams.append("height", height.toString());
        }

        if (quality != null) {
            _queryParams.append("quality", quality.toString());
        }

        if (mode != null) {
            _queryParams.append("mode", mode);
        }

        if (bg != null) {
            _queryParams.append("bg", bg);
        }

        if (focusX != null) {
            _queryParams.append("focusX", focusX.toString());
        }

        if (focusY != null) {
            _queryParams.append("focusY", focusY.toString());
        }

        if (nofocus != null) {
            _queryParams.append("nofocus", nofocus.toString());
        }

        if (auto != null) {
            _queryParams.append("auto", auto.toString());
        }

        if (force != null) {
            _queryParams.append("force", force.toString());
        }

        if (format != null) {
            _queryParams.append("format", format);
        }

        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.SquidexApiEnvironment.Production,
                `/api/assets/${id}`
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
            },
            contentType: "application/json",
            queryParameters: _queryParams,
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquidexApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquidexApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SquidexApiTimeoutError();
            case "unknown":
                throw new errors.SquidexApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Get all asset folders for the app.
     */
    public async getAssetFolders(
        app: string,
        request: SquidexApi.GetAssetFoldersRequest = {}
    ): Promise<SquidexApi.AssetFoldersDto> {
        const { parentId, scope } = request;
        const _queryParams = new URLSearchParams();
        if (parentId != null) {
            _queryParams.append("parentId", parentId);
        }

        if (scope != null) {
            _queryParams.append("scope", scope);
        }

        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.SquidexApiEnvironment.Production,
                `/api/apps/${app}/assets/folders`
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
            },
            contentType: "application/json",
            queryParameters: _queryParams,
        });
        if (_response.ok) {
            return await serializers.AssetFoldersDto.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquidexApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquidexApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SquidexApiTimeoutError();
            case "unknown":
                throw new errors.SquidexApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    public async createAssetFolder(app: string, request: SquidexApi.CreateAssetFolderDto): Promise<void> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.SquidexApiEnvironment.Production,
                `/api/apps/${app}/assets/folders`
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
            },
            contentType: "application/json",
            body: await serializers.CreateAssetFolderDto.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquidexApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquidexApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SquidexApiTimeoutError();
            case "unknown":
                throw new errors.SquidexApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    public async updateAssetFolder(
        app: string,
        id: string,
        request: SquidexApi.RenameAssetFolderDto
    ): Promise<SquidexApi.AssetFolderDto> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.SquidexApiEnvironment.Production,
                `/api/apps/${app}/assets/folders/${id}`
            ),
            method: "PUT",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
            },
            contentType: "application/json",
            body: await serializers.RenameAssetFolderDto.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
        });
        if (_response.ok) {
            return await serializers.AssetFolderDto.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquidexApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquidexApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SquidexApiTimeoutError();
            case "unknown":
                throw new errors.SquidexApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    public async deleteAssetFolder(app: string, id: string): Promise<void> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.SquidexApiEnvironment.Production,
                `/api/apps/${app}/assets/folders/${id}`
            ),
            method: "DELETE",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
            },
            contentType: "application/json",
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquidexApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquidexApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SquidexApiTimeoutError();
            case "unknown":
                throw new errors.SquidexApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    public async moveAssetFolder(
        app: string,
        id: string,
        request: SquidexApi.MoveAssetFolderDto
    ): Promise<SquidexApi.AssetFolderDto> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.SquidexApiEnvironment.Production,
                `/api/apps/${app}/assets/folders/${id}/parent`
            ),
            method: "PUT",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
            },
            contentType: "application/json",
            body: await serializers.MoveAssetFolderDto.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
        });
        if (_response.ok) {
            return await serializers.AssetFolderDto.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquidexApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquidexApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SquidexApiTimeoutError();
            case "unknown":
                throw new errors.SquidexApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Get all tags for assets.
     */
    public async getTags(app: string): Promise<Record<string, number>> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.SquidexApiEnvironment.Production,
                `/api/apps/${app}/assets/tags`
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
            },
            contentType: "application/json",
        });
        if (_response.ok) {
            return await serializers.assets.getTags.Response.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquidexApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquidexApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SquidexApiTimeoutError();
            case "unknown":
                throw new errors.SquidexApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    public async renameTag(
        app: string,
        name: string,
        request: SquidexApi.RenameTagDto
    ): Promise<Record<string, number>> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.SquidexApiEnvironment.Production,
                `/api/apps/${app}/assets/tags/${name}`
            ),
            method: "PUT",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
            },
            contentType: "application/json",
            body: await serializers.RenameTagDto.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
        });
        if (_response.ok) {
            return await serializers.assets.renameTag.Response.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquidexApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquidexApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SquidexApiTimeoutError();
            case "unknown":
                throw new errors.SquidexApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Get all assets for the app.
     */
    public async getAll(app: string, request: SquidexApi.GetAllAssetsRequest = {}): Promise<SquidexApi.AssetsDto> {
        const { parentId, ids, q, top, skip, orderby, filter } = request;
        const _queryParams = new URLSearchParams();
        if (parentId != null) {
            _queryParams.append("parentId", parentId);
        }

        if (ids != null) {
            _queryParams.append("ids", ids);
        }

        if (q != null) {
            _queryParams.append("q", q);
        }

        if (top != null) {
            _queryParams.append("$top", top.toString());
        }

        if (skip != null) {
            _queryParams.append("$skip", skip.toString());
        }

        if (orderby != null) {
            _queryParams.append("$orderby", orderby);
        }

        if (filter != null) {
            _queryParams.append("$filter", filter);
        }

        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.SquidexApiEnvironment.Production,
                `/api/apps/${app}/assets`
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
            },
            contentType: "application/json",
            queryParameters: _queryParams,
        });
        if (_response.ok) {
            return await serializers.AssetsDto.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquidexApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquidexApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SquidexApiTimeoutError();
            case "unknown":
                throw new errors.SquidexApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * You can only upload one file at a time. The mime type of the file is not calculated by Squidex and is required correctly.
     */
    public async upload(app: string, request: SquidexApi.UploadAssetsRequest = {}): Promise<void> {
        const { parentId, id, duplicate } = request;
        const _queryParams = new URLSearchParams();
        if (parentId != null) {
            _queryParams.append("ParentId", parentId);
        }

        if (id != null) {
            _queryParams.append("Id", id);
        }

        if (duplicate != null) {
            _queryParams.append("Duplicate", duplicate.toString());
        }

        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.SquidexApiEnvironment.Production,
                `/api/apps/${app}/assets`
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
            },
            contentType: "application/json",
            queryParameters: _queryParams,
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquidexApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquidexApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SquidexApiTimeoutError();
            case "unknown":
                throw new errors.SquidexApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Get all assets for the app.
     */
    public async getAllAssetsPost(app: string, request: SquidexApi.QueryDto): Promise<SquidexApi.AssetsDto> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.SquidexApiEnvironment.Production,
                `/api/apps/${app}/assets/query`
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
            },
            contentType: "application/json",
            body: await serializers.QueryDto.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
        });
        if (_response.ok) {
            return await serializers.AssetsDto.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquidexApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquidexApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SquidexApiTimeoutError();
            case "unknown":
                throw new errors.SquidexApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    public async getById(app: string, id: string): Promise<SquidexApi.AssetDto> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.SquidexApiEnvironment.Production,
                `/api/apps/${app}/assets/${id}`
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
            },
            contentType: "application/json",
        });
        if (_response.ok) {
            return await serializers.AssetDto.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquidexApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquidexApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SquidexApiTimeoutError();
            case "unknown":
                throw new errors.SquidexApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    public async update(app: string, id: string, request: SquidexApi.AnnotateAssetDto): Promise<SquidexApi.AssetDto> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.SquidexApiEnvironment.Production,
                `/api/apps/${app}/assets/${id}`
            ),
            method: "PUT",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
            },
            contentType: "application/json",
            body: await serializers.AnnotateAssetDto.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
        });
        if (_response.ok) {
            return await serializers.AssetDto.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquidexApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquidexApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SquidexApiTimeoutError();
            case "unknown":
                throw new errors.SquidexApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * You can only upload one file at a time. The mime type of the file is not calculated by Squidex and is required correctly.
     */
    public async upsert(
        app: string,
        id: string,
        request: SquidexApi.UpsertAssetRequest = {}
    ): Promise<SquidexApi.AssetDto> {
        const { parentId, duplicate } = request;
        const _queryParams = new URLSearchParams();
        if (parentId != null) {
            _queryParams.append("ParentId", parentId);
        }

        if (duplicate != null) {
            _queryParams.append("Duplicate", duplicate.toString());
        }

        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.SquidexApiEnvironment.Production,
                `/api/apps/${app}/assets/${id}`
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
            },
            contentType: "application/json",
            queryParameters: _queryParams,
        });
        if (_response.ok) {
            return await serializers.AssetDto.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquidexApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquidexApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SquidexApiTimeoutError();
            case "unknown":
                throw new errors.SquidexApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    public async delete(app: string, id: string, request: SquidexApi.DeleteAssetRequest = {}): Promise<void> {
        const { checkReferrers, permanent } = request;
        const _queryParams = new URLSearchParams();
        if (checkReferrers != null) {
            _queryParams.append("CheckReferrers", checkReferrers.toString());
        }

        if (permanent != null) {
            _queryParams.append("Permanent", permanent.toString());
        }

        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.SquidexApiEnvironment.Production,
                `/api/apps/${app}/assets/${id}`
            ),
            method: "DELETE",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
            },
            contentType: "application/json",
            queryParameters: _queryParams,
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquidexApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquidexApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SquidexApiTimeoutError();
            case "unknown":
                throw new errors.SquidexApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    public async updateBulkAssets(
        app: string,
        request: SquidexApi.BulkUpdateAssetsDto
    ): Promise<SquidexApi.BulkResultDto[]> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.SquidexApiEnvironment.Production,
                `/api/apps/${app}/assets/bulk`
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
            },
            contentType: "application/json",
            body: await serializers.BulkUpdateAssetsDto.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
        });
        if (_response.ok) {
            return await serializers.assets.updateBulkAssets.Response.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquidexApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquidexApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SquidexApiTimeoutError();
            case "unknown":
                throw new errors.SquidexApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Use multipart request to upload an asset.
     */
    public async replace(app: string, id: string): Promise<SquidexApi.AssetDto> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.SquidexApiEnvironment.Production,
                `/api/apps/${app}/assets/${id}/content`
            ),
            method: "PUT",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
            },
            contentType: "application/json",
        });
        if (_response.ok) {
            return await serializers.AssetDto.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquidexApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquidexApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SquidexApiTimeoutError();
            case "unknown":
                throw new errors.SquidexApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    public async move(app: string, id: string, request: SquidexApi.MoveAssetDto): Promise<SquidexApi.AssetDto> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.SquidexApiEnvironment.Production,
                `/api/apps/${app}/assets/${id}/parent`
            ),
            method: "PUT",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
            },
            contentType: "application/json",
            body: await serializers.MoveAssetDto.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
        });
        if (_response.ok) {
            return await serializers.AssetDto.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SquidexApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SquidexApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SquidexApiTimeoutError();
            case "unknown":
                throw new errors.SquidexApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    private async _getAuthorizationHeader() {
        const bearer = await core.Supplier.get(this.options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
