/**
 * This file was auto-generated by Fern from our API Definition.
 */

import urlJoin from "url-join";
import * as environments from "./environments";
import * as errors from "./errors";
import * as core from "./core";
import { Apps } from "./api/resources/apps/client/Client";
import { Assets } from "./api/resources/assets/client/Client";
import { Backups } from "./api/resources/backups/client/Client";
import { Comments } from "./api/resources/comments/client/Client";
import { Diagnostics } from "./api/resources/diagnostics/client/Client";
import { EventConsumers } from "./api/resources/eventConsumers/client/Client";
import { History } from "./api/resources/history/client/Client";
import { Languages } from "./api/resources/languages/client/Client";
import { News } from "./api/resources/news/client/Client";
import { Notifications } from "./api/resources/notifications/client/Client";
import { Ping } from "./api/resources/ping/client/Client";
import { Plans } from "./api/resources/plans/client/Client";
import { Rules } from "./api/resources/rules/client/Client";
import { Schemas } from "./api/resources/schemas/client/Client";
import { Search } from "./api/resources/search/client/Client";
import { Statistics } from "./api/resources/statistics/client/Client";
import { Teams } from "./api/resources/teams/client/Client";
import { Templates } from "./api/resources/templates/client/Client";
import { Translations } from "./api/resources/translations/client/Client";
import { UserManagement } from "./api/resources/userManagement/client/Client";
import { Users } from "./api/resources/users/client/Client";

export declare namespace SquidexApiClient {
    interface Options {
        environment?: environments.SquidexEnvironment | string;
        clientId: string;
        clientSecret: string;
        token?: core.Supplier<core.BearerToken | undefined>;
    }
}

export class SquidexApiClient {
    private token: string | undefined;

    constructor(private readonly options: SquidexApiClient.Options) {
        this.options = {
            environment: options.environment,
            clientId: options.clientId,
            clientSecret: options.clientSecret,
            token: async () => {
                if (this.token == null) {
                    const response = await core.fetcher({
                        url: urlJoin(
                            this.options.environment ?? environments.SquidexEnvironment.Production,
                            "/identity-server/connect/token"
                        ),
                        contentType: "application/x-www-form-urlencoded",
                        method: "POST",
                        body: {
                            grant_type: "client_credentials",
                            client_id: options.clientId,
                            client_secret: options.clientSecret,
                            scope: "squidex-api",
                        },
                    });
                    if (response.ok) {
                        if (typeof response.body !== "string") {
                            throw new errors.SquidexError({
                                message: "Token is not a string",
                            });
                        }
                        this.token = response.body;
                    } else {
                        switch (response.error.reason) {
                            case "non-json":
                                throw new errors.SquidexError({
                                    statusCode: response.error.statusCode,
                                    body: response.error.rawBody,
                                });
                            case "timeout":
                                throw new errors.SquidexTimeoutError();
                            case "unknown":
                                throw new errors.SquidexError({
                                    message: response.error.errorMessage,
                                });
                        }
                    }
                }
                return this.token;
            },
        };
    }

    private _apps: Apps | undefined;

    public get apps(): Apps {
        return (this._apps ??= new Apps(this.options));
    }

    private _assets: Assets | undefined;

    public get assets(): Assets {
        return (this._assets ??= new Assets(this.options));
    }

    private _backups: Backups | undefined;

    public get backups(): Backups {
        return (this._backups ??= new Backups(this.options));
    }

    private _comments: Comments | undefined;

    public get comments(): Comments {
        return (this._comments ??= new Comments(this.options));
    }

    private _diagnostics: Diagnostics | undefined;

    public get diagnostics(): Diagnostics {
        return (this._diagnostics ??= new Diagnostics(this.options));
    }

    private _eventConsumers: EventConsumers | undefined;

    public get eventConsumers(): EventConsumers {
        return (this._eventConsumers ??= new EventConsumers(this.options));
    }

    private _history: History | undefined;

    public get history(): History {
        return (this._history ??= new History(this.options));
    }

    private _languages: Languages | undefined;

    public get languages(): Languages {
        return (this._languages ??= new Languages(this.options));
    }

    private _news: News | undefined;

    public get news(): News {
        return (this._news ??= new News(this.options));
    }

    private _notifications: Notifications | undefined;

    public get notifications(): Notifications {
        return (this._notifications ??= new Notifications(this.options));
    }

    private _ping: Ping | undefined;

    public get ping(): Ping {
        return (this._ping ??= new Ping(this.options));
    }

    private _plans: Plans | undefined;

    public get plans(): Plans {
        return (this._plans ??= new Plans(this.options));
    }

    private _rules: Rules | undefined;

    public get rules(): Rules {
        return (this._rules ??= new Rules(this.options));
    }

    private _schemas: Schemas | undefined;

    public get schemas(): Schemas {
        return (this._schemas ??= new Schemas(this.options));
    }

    private _search: Search | undefined;

    public get search(): Search {
        return (this._search ??= new Search(this.options));
    }

    private _statistics: Statistics | undefined;

    public get statistics(): Statistics {
        return (this._statistics ??= new Statistics(this.options));
    }

    private _teams: Teams | undefined;

    public get teams(): Teams {
        return (this._teams ??= new Teams(this.options));
    }

    private _templates: Templates | undefined;

    public get templates(): Templates {
        return (this._templates ??= new Templates(this.options));
    }

    private _translations: Translations | undefined;

    public get translations(): Translations {
        return (this._translations ??= new Translations(this.options));
    }

    private _userManagement: UserManagement | undefined;

    public get userManagement(): UserManagement {
        return (this._userManagement ??= new UserManagement(this.options));
    }

    private _users: Users | undefined;

    public get users(): Users {
        return (this._users ??= new Users(this.options));
    }
}
