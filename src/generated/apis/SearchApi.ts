/**
 * Squidex API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  SearchResultDto,
} from '../models/index';
import {
    SearchResultDtoFromJSON,
} from '../models/index';

export interface SearchGetSearchResultsRequest {
    query?: string | null;
}

/**
 * SearchApi - interface
 * 
 * @export
 * @interface SearchApiInterface
 */
export interface SearchApiInterface {
    /**
     * 
     * @summary Get search results.
     * @param {string} [query] The search query.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApiInterface
     */
    getSearchResultsRaw(requestParameters: SearchGetSearchResultsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SearchResultDto>>>;

    /**
     * Get search results.
     */
    getSearchResults(requestParameters: SearchGetSearchResultsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SearchResultDto>>;

}

/**
 * 
 */
export class SearchApi extends runtime.BaseAPI implements SearchApiInterface {

    /**
     * Get search results.
     */
    async getSearchResultsRaw(requestParameters: SearchGetSearchResultsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SearchResultDto>>> {
        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/$app$/search`.replace("$app$", encodeURIComponent(this.appName)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SearchResultDtoFromJSON));
    }

    /**
     * Get search results.
     */
    async getSearchResults(requestParameters: SearchGetSearchResultsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SearchResultDto>> {
        const response = await this.getSearchResultsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
