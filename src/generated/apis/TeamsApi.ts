/* tslint:disable */
/* eslint-disable */
/**
 * Squidex API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AssignContributorDto,
  AuthSchemeResponseDto,
  AuthSchemeValueDto,
  ContributorsDto,
  CreateTeamDto,
  ErrorDto,
  TeamDto,
  UpdateTeamDto,
} from '../models/index';
import {
    AssignContributorDtoFromJSON,
    AssignContributorDtoToJSON,
    AuthSchemeResponseDtoFromJSON,
    AuthSchemeResponseDtoToJSON,
    AuthSchemeValueDtoFromJSON,
    AuthSchemeValueDtoToJSON,
    ContributorsDtoFromJSON,
    ContributorsDtoToJSON,
    CreateTeamDtoFromJSON,
    CreateTeamDtoToJSON,
    ErrorDtoFromJSON,
    ErrorDtoToJSON,
    TeamDtoFromJSON,
    TeamDtoToJSON,
    UpdateTeamDtoFromJSON,
    UpdateTeamDtoToJSON,
} from '../models/index';

export interface TeamContributorsDeleteContributorRequest {
    team: string;
    id: string;
}

export interface TeamContributorsDeleteMyselfRequest {
    team: string;
}

export interface TeamContributorsGetContributorsRequest {
    team: string;
}

export interface TeamContributorsPostContributorRequest {
    team: string;
    assignContributorDto: AssignContributorDto;
}

export interface TeamsDeleteTeamRequest {
    team: string;
}

export interface TeamsGetTeamRequest {
    team: string;
}

export interface TeamsGetTeamAuthRequest {
    team: string;
}

export interface TeamsPostTeamRequest {
    createTeamDto: CreateTeamDto;
}

export interface TeamsPutTeamRequest {
    team: string;
    updateTeamDto: UpdateTeamDto;
}

export interface TeamsPutTeamAuthRequest {
    team: string;
    authSchemeValueDto: AuthSchemeValueDto;
}

/**
 * TeamsApi - interface
 * 
 * @export
 * @interface TeamsApiInterface
 */
export interface TeamsApiInterface {
    /**
     * 
     * @summary Remove contributor.
     * @param {string} team The ID of the team.
     * @param {string} id The ID of the contributor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiInterface
     */
    deleteContributorRaw(requestParameters: TeamContributorsDeleteContributorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContributorsDto>>;

    /**
     * Remove contributor.
     */
    deleteContributor(requestParameters: TeamContributorsDeleteContributorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContributorsDto>;

    /**
     * 
     * @summary Remove yourself.
     * @param {string} team The ID of the team.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiInterface
     */
    deleteMyselfRaw(requestParameters: TeamContributorsDeleteMyselfRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContributorsDto>>;

    /**
     * Remove yourself.
     */
    deleteMyself(requestParameters: TeamContributorsDeleteMyselfRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContributorsDto>;

    /**
     * 
     * @summary Get team contributors.
     * @param {string} team The ID of the team.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiInterface
     */
    getContributorsRaw(requestParameters: TeamContributorsGetContributorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContributorsDto>>;

    /**
     * Get team contributors.
     */
    getContributors(requestParameters: TeamContributorsGetContributorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContributorsDto>;

    /**
     * 
     * @summary Assign contributor to team.
     * @param {string} team The ID of the team.
     * @param {AssignContributorDto} assignContributorDto Contributor object that needs to be added to the team.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiInterface
     */
    postContributorRaw(requestParameters: TeamContributorsPostContributorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContributorsDto>>;

    /**
     * Assign contributor to team.
     */
    postContributor(requestParameters: TeamContributorsPostContributorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContributorsDto>;

    /**
     * 
     * @summary Delete the team.
     * @param {string} team The ID of the team to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiInterface
     */
    deleteTeamRaw(requestParameters: TeamsDeleteTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete the team.
     */
    deleteTeam(requestParameters: TeamsDeleteTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Get an team by ID.
     * @param {string} team The ID of the team.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiInterface
     */
    getTeamRaw(requestParameters: TeamsGetTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeamDto>>;

    /**
     * Get an team by ID.
     */
    getTeam(requestParameters: TeamsGetTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeamDto>;

    /**
     * 
     * @summary Get the team auth settings.
     * @param {string} team The ID of the team.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiInterface
     */
    getTeamAuthRaw(requestParameters: TeamsGetTeamAuthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthSchemeResponseDto>>;

    /**
     * Get the team auth settings.
     */
    getTeamAuth(requestParameters: TeamsGetTeamAuthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthSchemeResponseDto>;

    /**
     * You can only retrieve the list of teams when you are authenticated as a user (OpenID implicit flow). You will retrieve all teams, where you are assigned as a contributor.
     * @summary Get your teams.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiInterface
     */
    getTeamsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TeamDto>>>;

    /**
     * You can only retrieve the list of teams when you are authenticated as a user (OpenID implicit flow). You will retrieve all teams, where you are assigned as a contributor.
     * Get your teams.
     */
    getTeams(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TeamDto>>;

    /**
     * You can only create an team when you are authenticated as a user (OpenID implicit flow). You will be assigned as owner of the new team automatically.
     * @summary Create a new team.
     * @param {CreateTeamDto} createTeamDto The team object that needs to be added to Squidex.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiInterface
     */
    postTeamRaw(requestParameters: TeamsPostTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeamDto>>;

    /**
     * You can only create an team when you are authenticated as a user (OpenID implicit flow). You will be assigned as owner of the new team automatically.
     * Create a new team.
     */
    postTeam(requestParameters: TeamsPostTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeamDto>;

    /**
     * 
     * @summary Update the team.
     * @param {string} team The ID of the team to update.
     * @param {UpdateTeamDto} updateTeamDto The values to update.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiInterface
     */
    putTeamRaw(requestParameters: TeamsPutTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeamDto>>;

    /**
     * Update the team.
     */
    putTeam(requestParameters: TeamsPutTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeamDto>;

    /**
     * 
     * @summary Update the team auth.
     * @param {string} team The ID of the team to update.
     * @param {AuthSchemeValueDto} authSchemeValueDto The values to update.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiInterface
     */
    putTeamAuthRaw(requestParameters: TeamsPutTeamAuthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthSchemeResponseDto>>;

    /**
     * Update the team auth.
     */
    putTeamAuth(requestParameters: TeamsPutTeamAuthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthSchemeResponseDto>;

}

/**
 * 
 */
export class TeamsApi extends runtime.BaseAPI implements TeamsApiInterface {

    /**
     * Remove contributor.
     */
    async deleteContributorRaw(requestParameters: TeamContributorsDeleteContributorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContributorsDto>> {
        if (requestParameters['team'] == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling ().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/teams/{team}/contributors/{id}`.replace(`{${"team"}}`, encodeURIComponent(String((requestParameters as any)['team']))).replace(`{${"id"}}`, encodeURIComponent(String((requestParameters as any)['id']))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContributorsDtoFromJSON(jsonValue));
    }

    /**
     * Remove contributor.
     */
    async deleteContributor(requestParameters: TeamContributorsDeleteContributorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContributorsDto> {
        const response = await this.deleteContributorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove yourself.
     */
    async deleteMyselfRaw(requestParameters: TeamContributorsDeleteMyselfRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContributorsDto>> {
        if (requestParameters['team'] == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/teams/{team}/contributors/me`.replace(`{${"team"}}`, encodeURIComponent(String((requestParameters as any)['team']))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContributorsDtoFromJSON(jsonValue));
    }

    /**
     * Remove yourself.
     */
    async deleteMyself(requestParameters: TeamContributorsDeleteMyselfRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContributorsDto> {
        const response = await this.deleteMyselfRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get team contributors.
     */
    async getContributorsRaw(requestParameters: TeamContributorsGetContributorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContributorsDto>> {
        if (requestParameters['team'] == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/teams/{team}/contributors`.replace(`{${"team"}}`, encodeURIComponent(String((requestParameters as any)['team']))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContributorsDtoFromJSON(jsonValue));
    }

    /**
     * Get team contributors.
     */
    async getContributors(requestParameters: TeamContributorsGetContributorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContributorsDto> {
        const response = await this.getContributorsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Assign contributor to team.
     */
    async postContributorRaw(requestParameters: TeamContributorsPostContributorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContributorsDto>> {
        if (requestParameters['team'] == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling ().'
            );
        }

        if (requestParameters['assignContributorDto'] == null) {
            throw new runtime.RequiredError(
                'assignContributorDto',
                'Required parameter "assignContributorDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/teams/{team}/contributors`.replace(`{${"team"}}`, encodeURIComponent(String((requestParameters as any)['team']))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AssignContributorDtoToJSON(requestParameters['assignContributorDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContributorsDtoFromJSON(jsonValue));
    }

    /**
     * Assign contributor to team.
     */
    async postContributor(requestParameters: TeamContributorsPostContributorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContributorsDto> {
        const response = await this.postContributorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete the team.
     */
    async deleteTeamRaw(requestParameters: TeamsDeleteTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['team'] == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/teams/{team}`.replace(`{${"team"}}`, encodeURIComponent(String((requestParameters as any)['team']))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete the team.
     */
    async deleteTeam(requestParameters: TeamsDeleteTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTeamRaw(requestParameters, initOverrides);
    }

    /**
     * Get an team by ID.
     */
    async getTeamRaw(requestParameters: TeamsGetTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeamDto>> {
        if (requestParameters['team'] == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/teams/{team}`.replace(`{${"team"}}`, encodeURIComponent(String((requestParameters as any)['team']))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeamDtoFromJSON(jsonValue));
    }

    /**
     * Get an team by ID.
     */
    async getTeam(requestParameters: TeamsGetTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeamDto> {
        const response = await this.getTeamRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the team auth settings.
     */
    async getTeamAuthRaw(requestParameters: TeamsGetTeamAuthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthSchemeResponseDto>> {
        if (requestParameters['team'] == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/teams/{team}/auth`.replace(`{${"team"}}`, encodeURIComponent(String((requestParameters as any)['team']))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthSchemeResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get the team auth settings.
     */
    async getTeamAuth(requestParameters: TeamsGetTeamAuthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthSchemeResponseDto> {
        const response = await this.getTeamAuthRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can only retrieve the list of teams when you are authenticated as a user (OpenID implicit flow). You will retrieve all teams, where you are assigned as a contributor.
     * Get your teams.
     */
    async getTeamsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TeamDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/teams`.replace("$app$", encodeURIComponent(this.appName)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TeamDtoFromJSON));
    }

    /**
     * You can only retrieve the list of teams when you are authenticated as a user (OpenID implicit flow). You will retrieve all teams, where you are assigned as a contributor.
     * Get your teams.
     */
    async getTeams(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TeamDto>> {
        const response = await this.getTeamsRaw(initOverrides);
        return await response.value();
    }

    /**
     * You can only create an team when you are authenticated as a user (OpenID implicit flow). You will be assigned as owner of the new team automatically.
     * Create a new team.
     */
    async postTeamRaw(requestParameters: TeamsPostTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeamDto>> {
        if (requestParameters['createTeamDto'] == null) {
            throw new runtime.RequiredError(
                'createTeamDto',
                'Required parameter "createTeamDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/teams`.replace("$app$", encodeURIComponent(this.appName)),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateTeamDtoToJSON(requestParameters['createTeamDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeamDtoFromJSON(jsonValue));
    }

    /**
     * You can only create an team when you are authenticated as a user (OpenID implicit flow). You will be assigned as owner of the new team automatically.
     * Create a new team.
     */
    async postTeam(requestParameters: TeamsPostTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeamDto> {
        const response = await this.postTeamRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the team.
     */
    async putTeamRaw(requestParameters: TeamsPutTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeamDto>> {
        if (requestParameters['team'] == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling ().'
            );
        }

        if (requestParameters['updateTeamDto'] == null) {
            throw new runtime.RequiredError(
                'updateTeamDto',
                'Required parameter "updateTeamDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/teams/{team}`.replace(`{${"team"}}`, encodeURIComponent(String((requestParameters as any)['team']))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateTeamDtoToJSON(requestParameters['updateTeamDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeamDtoFromJSON(jsonValue));
    }

    /**
     * Update the team.
     */
    async putTeam(requestParameters: TeamsPutTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeamDto> {
        const response = await this.putTeamRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the team auth.
     */
    async putTeamAuthRaw(requestParameters: TeamsPutTeamAuthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthSchemeResponseDto>> {
        if (requestParameters['team'] == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling ().'
            );
        }

        if (requestParameters['authSchemeValueDto'] == null) {
            throw new runtime.RequiredError(
                'authSchemeValueDto',
                'Required parameter "authSchemeValueDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/teams/{team}/auth`.replace(`{${"team"}}`, encodeURIComponent(String((requestParameters as any)['team']))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AuthSchemeValueDtoToJSON(requestParameters['authSchemeValueDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthSchemeResponseDtoFromJSON(jsonValue));
    }

    /**
     * Update the team auth.
     */
    async putTeamAuth(requestParameters: TeamsPutTeamAuthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthSchemeResponseDto> {
        const response = await this.putTeamAuthRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
