/**
 * Squidex API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AssignContributorDto,
  AuthSchemeResponseDto,
  AuthSchemeValueDto,
  ContributorsDto,
  CreateTeamDto,
  TeamDto,
  UpdateTeamDto,
} from '../models/index';
import {
    AssignContributorDtoToJSON,
    AuthSchemeResponseDtoFromJSON,
    AuthSchemeValueDtoToJSON,
    ContributorsDtoFromJSON,
    CreateTeamDtoToJSON,
    TeamDtoFromJSON,
    UpdateTeamDtoToJSON,
} from '../models/index';

export interface TeamContributorsDeleteContributorRequestRaw {
    team: string;
    id: string;
}

export interface TeamContributorsDeleteMyselfRequestRaw {
    team: string;
}

export interface TeamContributorsGetContributorsRequestRaw {
    team: string;
}

export interface TeamContributorsPostContributorRequestRaw {
    team: string;
    assignContributorDto: AssignContributorDto;
}

export interface TeamsDeleteTeamRequestRaw {
    team: string;
}

export interface TeamsGetTeamRequestRaw {
    team: string;
}

export interface TeamsGetTeamAuthRequestRaw {
    team: string;
}

export interface TeamsPostTeamRequestRaw {
    createTeamDto: CreateTeamDto;
}

export interface TeamsPutTeamRequestRaw {
    team: string;
    updateTeamDto: UpdateTeamDto;
}

export interface TeamsPutTeamAuthRequestRaw {
    team: string;
    authSchemeValueDto: AuthSchemeValueDto;
}

/**
 * TeamsApi - interface
 * 
 * @export
 * @interface TeamsApiInterface
 */
export interface TeamsApiInterface {
    /**
     * 
     * @summary Remove contributor.
     * @param {string} team The ID of the team.
     * @param {string} id The ID of the contributor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiInterface
     */
    deleteContributorRaw(team: string, id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContributorsDto>>;

    /**
     * Remove contributor.
     */
    deleteContributor(team: string, id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContributorsDto>;

    /**
     * 
     * @summary Remove yourself.
     * @param {string} team The ID of the team.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiInterface
     */
    deleteMyselfRaw(team: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContributorsDto>>;

    /**
     * Remove yourself.
     */
    deleteMyself(team: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContributorsDto>;

    /**
     * 
     * @summary Get team contributors.
     * @param {string} team The ID of the team.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiInterface
     */
    getContributorsRaw(team: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContributorsDto>>;

    /**
     * Get team contributors.
     */
    getContributors(team: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContributorsDto>;

    /**
     * 
     * @summary Assign contributor to team.
     * @param {string} team The ID of the team.
     * @param {AssignContributorDto} assignContributorDto Contributor object that needs to be added to the team.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiInterface
     */
    postContributorRaw(team: string, assignContributorDto: AssignContributorDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContributorsDto>>;

    /**
     * Assign contributor to team.
     */
    postContributor(team: string, assignContributorDto: AssignContributorDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContributorsDto>;

    /**
     * 
     * @summary Delete the team.
     * @param {string} team The ID of the team to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiInterface
     */
    deleteTeamRaw(team: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete the team.
     */
    deleteTeam(team: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Get an team by ID.
     * @param {string} team The ID of the team.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiInterface
     */
    getTeamRaw(team: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeamDto>>;

    /**
     * Get an team by ID.
     */
    getTeam(team: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeamDto>;

    /**
     * 
     * @summary Get the team auth settings.
     * @param {string} team The ID of the team.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiInterface
     */
    getTeamAuthRaw(team: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthSchemeResponseDto>>;

    /**
     * Get the team auth settings.
     */
    getTeamAuth(team: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthSchemeResponseDto>;

    /**
     * You can only retrieve the list of teams when you are authenticated as a user (OpenID implicit flow). You will retrieve all teams, where you are assigned as a contributor.
     * @summary Get your teams.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiInterface
     */
    getTeamsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TeamDto>>>;

    /**
     * You can only retrieve the list of teams when you are authenticated as a user (OpenID implicit flow). You will retrieve all teams, where you are assigned as a contributor.
     * Get your teams.
     */
    getTeams(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TeamDto>>;

    /**
     * You can only create an team when you are authenticated as a user (OpenID implicit flow). You will be assigned as owner of the new team automatically.
     * @summary Create a new team.
     * @param {CreateTeamDto} createTeamDto The team object that needs to be added to Squidex.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiInterface
     */
    postTeamRaw(createTeamDto: CreateTeamDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeamDto>>;

    /**
     * You can only create an team when you are authenticated as a user (OpenID implicit flow). You will be assigned as owner of the new team automatically.
     * Create a new team.
     */
    postTeam(createTeamDto: CreateTeamDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeamDto>;

    /**
     * 
     * @summary Update the team.
     * @param {string} team The ID of the team to update.
     * @param {UpdateTeamDto} updateTeamDto The values to update.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiInterface
     */
    putTeamRaw(team: string, updateTeamDto: UpdateTeamDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeamDto>>;

    /**
     * Update the team.
     */
    putTeam(team: string, updateTeamDto: UpdateTeamDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeamDto>;

    /**
     * 
     * @summary Update the team auth.
     * @param {string} team The ID of the team to update.
     * @param {AuthSchemeValueDto} authSchemeValueDto The values to update.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiInterface
     */
    putTeamAuthRaw(team: string, authSchemeValueDto: AuthSchemeValueDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthSchemeResponseDto>>;

    /**
     * Update the team auth.
     */
    putTeamAuth(team: string, authSchemeValueDto: AuthSchemeValueDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthSchemeResponseDto>;

}

/**
 * 
 */
export class TeamsApi extends runtime.BaseAPI implements TeamsApiInterface {

    /**
     * Remove contributor.
     */
    async deleteContributorRaw(team: string, id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContributorsDto>> {
        const _team = team;
        const _id = id;

        if (_team == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling ().'
            );
        }

        if (_id == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/teams/{team}/contributors/{id}`.replace(`{${"team"}}`, encodeURIComponent(String(_team))).replace(`{${"id"}}`, encodeURIComponent(String(_id))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContributorsDtoFromJSON(jsonValue));
    }

    /**
     * Remove contributor.
     */
    async deleteContributor(team: string, id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContributorsDto> {
        const response = await this.deleteContributorRaw(team, id, initOverrides);
        return await response.value();
    }

    /**
     * Remove yourself.
     */
    async deleteMyselfRaw(team: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContributorsDto>> {
        const _team = team;

        if (_team == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/teams/{team}/contributors/me`.replace(`{${"team"}}`, encodeURIComponent(String(_team))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContributorsDtoFromJSON(jsonValue));
    }

    /**
     * Remove yourself.
     */
    async deleteMyself(team: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContributorsDto> {
        const response = await this.deleteMyselfRaw(team, initOverrides);
        return await response.value();
    }

    /**
     * Get team contributors.
     */
    async getContributorsRaw(team: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContributorsDto>> {
        const _team = team;

        if (_team == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/teams/{team}/contributors`.replace(`{${"team"}}`, encodeURIComponent(String(_team))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContributorsDtoFromJSON(jsonValue));
    }

    /**
     * Get team contributors.
     */
    async getContributors(team: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContributorsDto> {
        const response = await this.getContributorsRaw(team, initOverrides);
        return await response.value();
    }

    /**
     * Assign contributor to team.
     */
    async postContributorRaw(team: string, assignContributorDto: AssignContributorDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContributorsDto>> {
        const _team = team;
        const _assignContributorDto = assignContributorDto;

        if (_team == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling ().'
            );
        }

        if (_assignContributorDto == null) {
            throw new runtime.RequiredError(
                'assignContributorDto',
                'Required parameter "assignContributorDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/teams/{team}/contributors`.replace(`{${"team"}}`, encodeURIComponent(String(_team))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AssignContributorDtoToJSON(_assignContributorDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContributorsDtoFromJSON(jsonValue));
    }

    /**
     * Assign contributor to team.
     */
    async postContributor(team: string, assignContributorDto: AssignContributorDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContributorsDto> {
        const response = await this.postContributorRaw(team, assignContributorDto, initOverrides);
        return await response.value();
    }

    /**
     * Delete the team.
     */
    async deleteTeamRaw(team: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const _team = team;

        if (_team == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/teams/{team}`.replace(`{${"team"}}`, encodeURIComponent(String(_team))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete the team.
     */
    async deleteTeam(team: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTeamRaw(team, initOverrides);
    }

    /**
     * Get an team by ID.
     */
    async getTeamRaw(team: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeamDto>> {
        const _team = team;

        if (_team == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/teams/{team}`.replace(`{${"team"}}`, encodeURIComponent(String(_team))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeamDtoFromJSON(jsonValue));
    }

    /**
     * Get an team by ID.
     */
    async getTeam(team: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeamDto> {
        const response = await this.getTeamRaw(team, initOverrides);
        return await response.value();
    }

    /**
     * Get the team auth settings.
     */
    async getTeamAuthRaw(team: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthSchemeResponseDto>> {
        const _team = team;

        if (_team == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/teams/{team}/auth`.replace(`{${"team"}}`, encodeURIComponent(String(_team))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthSchemeResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get the team auth settings.
     */
    async getTeamAuth(team: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthSchemeResponseDto> {
        const response = await this.getTeamAuthRaw(team, initOverrides);
        return await response.value();
    }

    /**
     * You can only retrieve the list of teams when you are authenticated as a user (OpenID implicit flow). You will retrieve all teams, where you are assigned as a contributor.
     * Get your teams.
     */
    async getTeamsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TeamDto>>> {

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/teams`.replace("$app$", encodeURIComponent(this.appName)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TeamDtoFromJSON));
    }

    /**
     * You can only retrieve the list of teams when you are authenticated as a user (OpenID implicit flow). You will retrieve all teams, where you are assigned as a contributor.
     * Get your teams.
     */
    async getTeams(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TeamDto>> {
        const response = await this.getTeamsRaw(initOverrides);
        return await response.value();
    }

    /**
     * You can only create an team when you are authenticated as a user (OpenID implicit flow). You will be assigned as owner of the new team automatically.
     * Create a new team.
     */
    async postTeamRaw(createTeamDto: CreateTeamDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeamDto>> {
        const _createTeamDto = createTeamDto;

        if (_createTeamDto == null) {
            throw new runtime.RequiredError(
                'createTeamDto',
                'Required parameter "createTeamDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/teams`.replace("$app$", encodeURIComponent(this.appName)),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateTeamDtoToJSON(_createTeamDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeamDtoFromJSON(jsonValue));
    }

    /**
     * You can only create an team when you are authenticated as a user (OpenID implicit flow). You will be assigned as owner of the new team automatically.
     * Create a new team.
     */
    async postTeam(createTeamDto: CreateTeamDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeamDto> {
        const response = await this.postTeamRaw(createTeamDto, initOverrides);
        return await response.value();
    }

    /**
     * Update the team.
     */
    async putTeamRaw(team: string, updateTeamDto: UpdateTeamDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeamDto>> {
        const _team = team;
        const _updateTeamDto = updateTeamDto;

        if (_team == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling ().'
            );
        }

        if (_updateTeamDto == null) {
            throw new runtime.RequiredError(
                'updateTeamDto',
                'Required parameter "updateTeamDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/teams/{team}`.replace(`{${"team"}}`, encodeURIComponent(String(_team))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateTeamDtoToJSON(_updateTeamDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeamDtoFromJSON(jsonValue));
    }

    /**
     * Update the team.
     */
    async putTeam(team: string, updateTeamDto: UpdateTeamDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeamDto> {
        const response = await this.putTeamRaw(team, updateTeamDto, initOverrides);
        return await response.value();
    }

    /**
     * Update the team auth.
     */
    async putTeamAuthRaw(team: string, authSchemeValueDto: AuthSchemeValueDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthSchemeResponseDto>> {
        const _team = team;
        const _authSchemeValueDto = authSchemeValueDto;

        if (_team == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling ().'
            );
        }

        if (_authSchemeValueDto == null) {
            throw new runtime.RequiredError(
                'authSchemeValueDto',
                'Required parameter "authSchemeValueDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/teams/{team}/auth`.replace(`{${"team"}}`, encodeURIComponent(String(_team))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AuthSchemeValueDtoToJSON(_authSchemeValueDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthSchemeResponseDtoFromJSON(jsonValue));
    }

    /**
     * Update the team auth.
     */
    async putTeamAuth(team: string, authSchemeValueDto: AuthSchemeValueDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthSchemeResponseDto> {
        const response = await this.putTeamAuthRaw(team, authSchemeValueDto, initOverrides);
        return await response.value();
    }

}
