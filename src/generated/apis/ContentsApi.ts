/**
 * Squidex API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AllContentsByPostDto,
  BulkResultDto,
  BulkUpdateContentsDto,
  ChangeStatusDto,
  ContentDto,
  ContentsDto,
  ImportContentsDto,
  QueryDto,
} from '../models/index';
import {
    AllContentsByPostDtoToJSON,
    BulkResultDtoFromJSON,
    BulkUpdateContentsDtoToJSON,
    ChangeStatusDtoToJSON,
    ContentDtoFromJSON,
    ContentsDtoFromJSON,
    ImportContentsDtoToJSON,
    QueryDtoToJSON,
} from '../models/index';

export interface ContentsBulkUpdateContentsRequest {
    schema: string;
    bulkUpdateContentsDto: BulkUpdateContentsDto;
}

export interface ContentsCreateDraftRequest {
    schema: string;
    id: string;
    unpublished?: boolean;
    languages?: string;
}

export interface ContentsDeleteContentRequest {
    schema: string;
    id: string;
    checkReferrers?: boolean;
    permanent?: boolean;
}

export interface ContentsDeleteContentStatusRequest {
    schema: string;
    id: string;
    unpublished?: boolean;
    languages?: string;
}

export interface ContentsDeleteVersionRequest {
    schema: string;
    id: string;
    unpublished?: boolean;
    languages?: string;
}

export interface ContentsGetContentRequest {
    schema: string;
    id: string;
    version?: number;
    fields?: string;
    flatten?: boolean;
    languages?: string;
    unpublished?: boolean;
}

export interface ContentsGetContentValidityRequest {
    schema: string;
    id: string;
}

export interface ContentsGetContentVersionRequest {
    schema: string;
    id: string;
    version: number;
    unpublished?: boolean;
    languages?: string;
}

export interface ContentsGetContentsRequest {
    schema: string;
    ids?: string | null;
    q?: string | null;
    $search?: string;
    $top?: number;
    $skip?: number;
    $orderby?: string;
    $filter?: string;
    fields?: string;
    flatten?: boolean;
    languages?: string;
    noSlowTotal?: boolean;
    noTotal?: boolean;
    unpublished?: boolean;
}

export interface ContentsGetContentsPostRequest {
    schema: string;
    queryDto: QueryDto;
    fields?: string;
    flatten?: boolean;
    languages?: string;
    noSlowTotal?: boolean;
    noTotal?: boolean;
    unpublished?: boolean;
}

export interface ContentsGetReferencesRequest {
    schema: string;
    id: string;
    q?: string | null;
    fields?: string;
    flatten?: boolean;
    languages?: string;
    unpublished?: boolean;
    noSlowTotal?: boolean;
    noTotal?: boolean;
}

export interface ContentsGetReferencingRequest {
    schema: string;
    id: string;
    q?: string | null;
    fields?: string;
    flatten?: boolean;
    languages?: string;
    unpublished?: boolean;
    noSlowTotal?: boolean;
    noTotal?: boolean;
}

export interface ContentsPatchContentRequest {
    schema: string;
    id: string;
    requestBody: { [key: string]: { [key: string]: any; }; };
    unpublished?: boolean;
    languages?: string;
}

export interface ContentsPostContentRequest {
    schema: string;
    requestBody: { [key: string]: { [key: string]: any; }; };
    status?: string | null;
    id?: string | null;
    publish?: boolean;
    unpublished?: boolean;
    languages?: string;
}

export interface ContentsPostContentsRequest {
    schema: string;
    importContentsDto: ImportContentsDto;
}

export interface ContentsPostUpsertContentRequest {
    schema: string;
    id: string;
    requestBody: { [key: string]: { [key: string]: any; }; };
    status?: string | null;
    patch?: boolean;
    enrichDefaults?: boolean;
    publish?: boolean;
    unpublished?: boolean;
    languages?: string;
}

export interface ContentsPutContentRequest {
    schema: string;
    id: string;
    requestBody: { [key: string]: { [key: string]: any; }; };
    enrichDefaults?: boolean;
    unpublished?: boolean;
    languages?: string;
}

export interface ContentsPutContentDefaultsRequest {
    schema: string;
    id: string;
    enrichRequiredFields?: boolean;
    unpublished?: boolean;
    languages?: string;
}

export interface ContentsPutContentStatusRequest {
    schema: string;
    id: string;
    changeStatusDto: ChangeStatusDto;
    unpublished?: boolean;
    languages?: string;
}

export interface ContentsSharedBulkUpdateAllContentsRequest {
    bulkUpdateContentsDto: BulkUpdateContentsDto;
    schema?: string;
}

export interface ContentsSharedGetAllContentsRequest {
    ids?: string | null;
    scheduleFrom?: Date | null;
    scheduleTo?: Date | null;
    referencing?: string | null;
    references?: string | null;
    q?: string | null;
    fields?: string;
    flatten?: boolean;
    languages?: string;
    noSlowTotal?: boolean;
    noTotal?: boolean;
    unpublished?: boolean;
}

export interface ContentsSharedGetAllContentsPostRequest {
    allContentsByPostDto: AllContentsByPostDto;
    fields?: string;
    flatten?: boolean;
    languages?: string;
    noSlowTotal?: boolean;
    noTotal?: boolean;
    unpublished?: boolean;
}

export interface ContentsSharedGetGraphQLRequest {
    theQueryString?: string;
    variables?: string | null;
    operationName?: string | null;
    unpublished?: boolean;
}

export interface ContentsSharedGetGraphQLBatchRequest {
    theQueryString?: string;
    variables?: string | null;
    operationName?: string | null;
    unpublished?: boolean;
}

export interface ContentsSharedPostGraphQLRequest {
    unpublished?: boolean;
    body?: any | null;
}

export interface ContentsSharedPostGraphQLBatchRequest {
    unpublished?: boolean;
    body?: any | null;
}

/**
 * ContentsApi - interface
 * 
 * @export
 * @interface ContentsApiInterface
 */
export interface ContentsApiInterface {
    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @summary Bulk update content items.
     * @param {string} schema The name of the schema.
     * @param {BulkUpdateContentsDto} bulkUpdateContentsDto The bulk update request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentsApiInterface
     */
    bulkUpdateContentsRaw(requestParameters: ContentsBulkUpdateContentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BulkResultDto>>>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Bulk update content items.
     */
    bulkUpdateContents(requestParameters: ContentsBulkUpdateContentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BulkResultDto>>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @summary Create a new draft version.
     * @param {string} schema The name of the schema.
     * @param {string} id The ID of the content item to create the draft for.
     * @param {boolean} [unpublished] Return unpublished content items.
     * @param {string} [languages] The list of languages to resolve (comma-separated).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentsApiInterface
     */
    createDraftRaw(requestParameters: ContentsCreateDraftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentDto>>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Create a new draft version.
     */
    createDraft(requestParameters: ContentsCreateDraftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentDto>;

    /**
     * You can create an generated documentation for your app at /api/content/{appName}/docs.
     * @summary Delete a content item.
     * @param {string} schema The name of the schema.
     * @param {string} id The ID of the content item to delete.
     * @param {boolean} [checkReferrers] True to check referrers of this content.
     * @param {boolean} [permanent] True to delete the content permanently.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentsApiInterface
     */
    deleteContentRaw(requestParameters: ContentsDeleteContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * You can create an generated documentation for your app at /api/content/{appName}/docs.
     * Delete a content item.
     */
    deleteContent(requestParameters: ContentsDeleteContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @summary Cancel status change of a content item.
     * @param {string} schema The name of the schema.
     * @param {string} id The ID of the content item to cancel.
     * @param {boolean} [unpublished] Return unpublished content items.
     * @param {string} [languages] The list of languages to resolve (comma-separated).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentsApiInterface
     */
    deleteContentStatusRaw(requestParameters: ContentsDeleteContentStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentDto>>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Cancel status change of a content item.
     */
    deleteContentStatus(requestParameters: ContentsDeleteContentStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentDto>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @summary Delete the draft version.
     * @param {string} schema The name of the schema.
     * @param {string} id The ID of the content item to delete the draft from.
     * @param {boolean} [unpublished] Return unpublished content items.
     * @param {string} [languages] The list of languages to resolve (comma-separated).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentsApiInterface
     */
    deleteVersionRaw(requestParameters: ContentsDeleteVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentDto>>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Delete the draft version.
     */
    deleteVersion(requestParameters: ContentsDeleteVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentDto>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @summary Get a content item.
     * @param {string} schema The name of the schema.
     * @param {string} id The ID of the content to fetch.
     * @param {number} [version] The optional version.
     * @param {string} [fields] The list of content fields (comma-separated).
     * @param {boolean} [flatten] Provide the data as flat object.
     * @param {string} [languages] The list of languages to resolve (comma-separated).
     * @param {boolean} [unpublished] Return unpublished content items.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentsApiInterface
     */
    getContentRaw(requestParameters: ContentsGetContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentDto>>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Get a content item.
     */
    getContent(requestParameters: ContentsGetContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentDto>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @summary Get a content item validity.
     * @param {string} schema The name of the schema.
     * @param {string} id The ID of the content to fetch.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentsApiInterface
     */
    getContentValidityRaw(requestParameters: ContentsGetContentValidityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Get a content item validity.
     */
    getContentValidity(requestParameters: ContentsGetContentValidityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @summary Get a content by version.
     * @param {string} schema The name of the schema.
     * @param {string} id The ID of the content to fetch.
     * @param {number} version The version fo the content to fetch.
     * @param {boolean} [unpublished] Return unpublished content items.
     * @param {string} [languages] The list of languages to resolve (comma-separated).
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof ContentsApiInterface
     */
    getContentVersionRaw(requestParameters: ContentsGetContentVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Get a content by version.
     * @deprecated
     */
    getContentVersion(requestParameters: ContentsGetContentVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @summary Queries contents.
     * @param {string} schema The name of the schema.
     * @param {string} [ids] The optional ids of the content to fetch.
     * @param {string} [q] The optional json query.
     * @param {string} [$search] Optional number of items to skip.
     * @param {number} [$top] Optional number of items to take.
     * @param {number} [$skip] Optional number of items to skip.
     * @param {string} [$orderby] Optional OData order definition.
     * @param {string} [$filter] Optional OData filter.
     * @param {string} [fields] The list of content fields (comma-separated).
     * @param {boolean} [flatten] Provide the data as flat object.
     * @param {string} [languages] The list of languages to resolve (comma-separated).
     * @param {boolean} [noSlowTotal] Do not return the total amount, if it would be slow.
     * @param {boolean} [noTotal] Do not return the total amount.
     * @param {boolean} [unpublished] Return unpublished content items.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentsApiInterface
     */
    getContentsRaw(requestParameters: ContentsGetContentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentsDto>>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Queries contents.
     */
    getContents(requestParameters: ContentsGetContentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentsDto>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @summary Queries contents.
     * @param {string} schema The name of the schema.
     * @param {QueryDto} queryDto The required query object.
     * @param {string} [fields] The list of content fields (comma-separated).
     * @param {boolean} [flatten] Provide the data as flat object.
     * @param {string} [languages] The list of languages to resolve (comma-separated).
     * @param {boolean} [noSlowTotal] Do not return the total amount, if it would be slow.
     * @param {boolean} [noTotal] Do not return the total amount.
     * @param {boolean} [unpublished] Return unpublished content items.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentsApiInterface
     */
    getContentsPostRaw(requestParameters: ContentsGetContentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentsDto>>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Queries contents.
     */
    getContentsPost(requestParameters: ContentsGetContentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentsDto>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @summary Get all references of a content.
     * @param {string} schema The name of the schema.
     * @param {string} id The ID of the content to fetch.
     * @param {string} [q] The optional json query.
     * @param {string} [fields] The list of content fields (comma-separated).
     * @param {boolean} [flatten] Provide the data as flat object.
     * @param {string} [languages] The list of languages to resolve (comma-separated).
     * @param {boolean} [unpublished] Return unpublished content items.
     * @param {boolean} [noSlowTotal] Do not return the total amount, if it would be slow.
     * @param {boolean} [noTotal] Do not return the total amount.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentsApiInterface
     */
    getReferencesRaw(requestParameters: ContentsGetReferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentsDto>>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Get all references of a content.
     */
    getReferences(requestParameters: ContentsGetReferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentsDto>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @summary Get a referencing contents of a content item.
     * @param {string} schema The name of the schema.
     * @param {string} id The ID of the content to fetch.
     * @param {string} [q] The optional json query.
     * @param {string} [fields] The list of content fields (comma-separated).
     * @param {boolean} [flatten] Provide the data as flat object.
     * @param {string} [languages] The list of languages to resolve (comma-separated).
     * @param {boolean} [unpublished] Return unpublished content items.
     * @param {boolean} [noSlowTotal] Do not return the total amount, if it would be slow.
     * @param {boolean} [noTotal] Do not return the total amount.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentsApiInterface
     */
    getReferencingRaw(requestParameters: ContentsGetReferencingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentsDto>>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Get a referencing contents of a content item.
     */
    getReferencing(requestParameters: ContentsGetReferencingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentsDto>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @summary Patchs a content item.
     * @param {string} schema The name of the schema.
     * @param {string} id The ID of the content item to patch.
     * @param {{ [key: string]: { [key: string]: any; }; }} requestBody The patch for the content item.
     * @param {boolean} [unpublished] Return unpublished content items.
     * @param {string} [languages] The list of languages to resolve (comma-separated).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentsApiInterface
     */
    patchContentRaw(requestParameters: ContentsPatchContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentDto>>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Patchs a content item.
     */
    patchContent(requestParameters: ContentsPatchContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentDto>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @summary Create a content item.
     * @param {string} schema The name of the schema.
     * @param {{ [key: string]: { [key: string]: any; }; }} requestBody The full data for the content item.
     * @param {string} [status] The initial status.
     * @param {string} [id] The optional custom content id.
     * @param {boolean} [publish] True to automatically publish the content.
     * @param {boolean} [unpublished] Return unpublished content items.
     * @param {string} [languages] The list of languages to resolve (comma-separated).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentsApiInterface
     */
    postContentRaw(requestParameters: ContentsPostContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentDto>>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Create a content item.
     */
    postContent(requestParameters: ContentsPostContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentDto>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @summary Import content items.
     * @param {string} schema The name of the schema.
     * @param {ImportContentsDto} importContentsDto The import request.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof ContentsApiInterface
     */
    postContentsRaw(requestParameters: ContentsPostContentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BulkResultDto>>>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Import content items.
     * @deprecated
     */
    postContents(requestParameters: ContentsPostContentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BulkResultDto>>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @summary Upsert a content item.
     * @param {string} schema The name of the schema.
     * @param {string} id The ID of the content item to update.
     * @param {{ [key: string]: { [key: string]: any; }; }} requestBody The full data for the content item.
     * @param {string} [status] The initial status.
     * @param {boolean} [patch] Makes the update as patch.
     * @param {boolean} [enrichDefaults] Enrich the content with defaults.
     * @param {boolean} [publish] True to automatically publish the content.
     * @param {boolean} [unpublished] Return unpublished content items.
     * @param {string} [languages] The list of languages to resolve (comma-separated).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentsApiInterface
     */
    postUpsertContentRaw(requestParameters: ContentsPostUpsertContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentDto>>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Upsert a content item.
     */
    postUpsertContent(requestParameters: ContentsPostUpsertContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentDto>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @summary Update a content item.
     * @param {string} schema The name of the schema.
     * @param {string} id The ID of the content item to update.
     * @param {{ [key: string]: { [key: string]: any; }; }} requestBody The full data for the content item.
     * @param {boolean} [enrichDefaults] Enrich the content with defaults.
     * @param {boolean} [unpublished] Return unpublished content items.
     * @param {string} [languages] The list of languages to resolve (comma-separated).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentsApiInterface
     */
    putContentRaw(requestParameters: ContentsPutContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentDto>>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Update a content item.
     */
    putContent(requestParameters: ContentsPutContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentDto>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @summary Enrich a content item with defaults.
     * @param {string} schema The name of the schema.
     * @param {string} id The ID of the content item to update.
     * @param {boolean} [enrichRequiredFields] True, to also enrich required fields. Default: false.             
     * @param {boolean} [unpublished] Return unpublished content items.
     * @param {string} [languages] The list of languages to resolve (comma-separated).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentsApiInterface
     */
    putContentDefaultsRaw(requestParameters: ContentsPutContentDefaultsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentDto>>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Enrich a content item with defaults.
     */
    putContentDefaults(requestParameters: ContentsPutContentDefaultsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentDto>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @summary Change status of a content item.
     * @param {string} schema The name of the schema.
     * @param {string} id The ID of the content item to change.
     * @param {ChangeStatusDto} changeStatusDto The status request.
     * @param {boolean} [unpublished] Return unpublished content items.
     * @param {string} [languages] The list of languages to resolve (comma-separated).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentsApiInterface
     */
    putContentStatusRaw(requestParameters: ContentsPutContentStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentDto>>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Change status of a content item.
     */
    putContentStatus(requestParameters: ContentsPutContentStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentDto>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @summary Bulk update content items.
     * @param {BulkUpdateContentsDto} bulkUpdateContentsDto The bulk update request.
     * @param {string} [schema] The name of the schema.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentsApiInterface
     */
    bulkUpdateAllContentsRaw(requestParameters: ContentsSharedBulkUpdateAllContentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BulkResultDto>>>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Bulk update content items.
     */
    bulkUpdateAllContents(requestParameters: ContentsSharedBulkUpdateAllContentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BulkResultDto>>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @summary Queries contents.
     * @param {string} [ids] The list of ids to query.
     * @param {Date} [scheduleFrom] The start of the schedule.
     * @param {Date} [scheduleTo] The end of the schedule.
     * @param {string} [referencing] The ID of the referencing content item.
     * @param {string} [references] The ID of the reference content item.
     * @param {string} [q] The optional json query.
     * @param {string} [fields] The list of content fields (comma-separated).
     * @param {boolean} [flatten] Provide the data as flat object.
     * @param {string} [languages] The list of languages to resolve (comma-separated).
     * @param {boolean} [noSlowTotal] Do not return the total amount, if it would be slow.
     * @param {boolean} [noTotal] Do not return the total amount.
     * @param {boolean} [unpublished] Return unpublished content items.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentsApiInterface
     */
    getAllContentsRaw(requestParameters: ContentsSharedGetAllContentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentsDto>>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Queries contents.
     */
    getAllContents(requestParameters: ContentsSharedGetAllContentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentsDto>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @summary Queries contents.
     * @param {AllContentsByPostDto} allContentsByPostDto The required query object.
     * @param {string} [fields] The list of content fields (comma-separated).
     * @param {boolean} [flatten] Provide the data as flat object.
     * @param {string} [languages] The list of languages to resolve (comma-separated).
     * @param {boolean} [noSlowTotal] Do not return the total amount, if it would be slow.
     * @param {boolean} [noTotal] Do not return the total amount.
     * @param {boolean} [unpublished] Return unpublished content items.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentsApiInterface
     */
    getAllContentsPostRaw(requestParameters: ContentsSharedGetAllContentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentsDto>>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Queries contents.
     */
    getAllContentsPost(requestParameters: ContentsSharedGetAllContentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentsDto>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @summary GraphQL endpoint.
     * @param {string} [theQueryString] The optional version of the asset.
     * @param {string} [variables] The optional operation variables.
     * @param {string} [operationName] The optional operation name.
     * @param {boolean} [unpublished] Return unpublished content items.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentsApiInterface
     */
    getGraphQLRaw(requestParameters: ContentsSharedGetGraphQLRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * GraphQL endpoint.
     */
    getGraphQL(requestParameters: ContentsSharedGetGraphQLRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @summary GraphQL batch endpoint.
     * @param {string} [theQueryString] The optional version of the asset.
     * @param {string} [variables] The optional operation variables.
     * @param {string} [operationName] The optional operation name.
     * @param {boolean} [unpublished] Return unpublished content items.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentsApiInterface
     */
    getGraphQLBatchRaw(requestParameters: ContentsSharedGetGraphQLBatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * GraphQL batch endpoint.
     */
    getGraphQLBatch(requestParameters: ContentsSharedGetGraphQLBatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @summary GraphQL endpoint.
     * @param {boolean} [unpublished] Return unpublished content items.
     * @param {any} [body] The graphql request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentsApiInterface
     */
    postGraphQLRaw(requestParameters: ContentsSharedPostGraphQLRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * GraphQL endpoint.
     */
    postGraphQL(requestParameters: ContentsSharedPostGraphQLRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @summary GraphQL batch endpoint.
     * @param {boolean} [unpublished] Return unpublished content items.
     * @param {any} [body] The graphql request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentsApiInterface
     */
    postGraphQLBatchRaw(requestParameters: ContentsSharedPostGraphQLBatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * GraphQL batch endpoint.
     */
    postGraphQLBatch(requestParameters: ContentsSharedPostGraphQLBatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

}

/**
 * 
 */
export class ContentsApi extends runtime.BaseAPI implements ContentsApiInterface {

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Bulk update content items.
     */
    async bulkUpdateContentsRaw(requestParameters: ContentsBulkUpdateContentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BulkResultDto>>> {
        if (requestParameters['schema'] == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (requestParameters['bulkUpdateContentsDto'] == null) {
            throw new runtime.RequiredError(
                'bulkUpdateContentsDto',
                'Required parameter "bulkUpdateContentsDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/content/$app$/{schema}/bulk`.replace(`{${"schema"}}`, encodeURIComponent(String((requestParameters as any)['schema']))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BulkUpdateContentsDtoToJSON(requestParameters['bulkUpdateContentsDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BulkResultDtoFromJSON));
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Bulk update content items.
     */
    async bulkUpdateContents(requestParameters: ContentsBulkUpdateContentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BulkResultDto>> {
        const response = await this.bulkUpdateContentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Create a new draft version.
     */
    async createDraftRaw(requestParameters: ContentsCreateDraftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentDto>> {
        if (requestParameters['schema'] == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['unpublished'] != null) {
            headerParameters['X-Unpublished'] = String(requestParameters['unpublished']);
        }

        if (requestParameters['languages'] != null) {
            headerParameters['X-Languages'] = String(requestParameters['languages']);
        }

        const response = await this.request({
            path: `/api/content/$app$/{schema}/{id}/draft`.replace(`{${"schema"}}`, encodeURIComponent(String((requestParameters as any)['schema']))).replace(`{${"id"}}`, encodeURIComponent(String((requestParameters as any)['id']))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContentDtoFromJSON(jsonValue));
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Create a new draft version.
     */
    async createDraft(requestParameters: ContentsCreateDraftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentDto> {
        const response = await this.createDraftRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can create an generated documentation for your app at /api/content/{appName}/docs.
     * Delete a content item.
     */
    async deleteContentRaw(requestParameters: ContentsDeleteContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['schema'] == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['checkReferrers'] != null) {
            queryParameters['checkReferrers'] = requestParameters['checkReferrers'];
        }

        if (requestParameters['permanent'] != null) {
            queryParameters['permanent'] = requestParameters['permanent'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/content/$app$/{schema}/{id}`.replace(`{${"schema"}}`, encodeURIComponent(String((requestParameters as any)['schema']))).replace(`{${"id"}}`, encodeURIComponent(String((requestParameters as any)['id']))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * You can create an generated documentation for your app at /api/content/{appName}/docs.
     * Delete a content item.
     */
    async deleteContent(requestParameters: ContentsDeleteContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteContentRaw(requestParameters, initOverrides);
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Cancel status change of a content item.
     */
    async deleteContentStatusRaw(requestParameters: ContentsDeleteContentStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentDto>> {
        if (requestParameters['schema'] == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['unpublished'] != null) {
            headerParameters['X-Unpublished'] = String(requestParameters['unpublished']);
        }

        if (requestParameters['languages'] != null) {
            headerParameters['X-Languages'] = String(requestParameters['languages']);
        }

        const response = await this.request({
            path: `/api/content/$app$/{schema}/{id}/status`.replace(`{${"schema"}}`, encodeURIComponent(String((requestParameters as any)['schema']))).replace(`{${"id"}}`, encodeURIComponent(String((requestParameters as any)['id']))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContentDtoFromJSON(jsonValue));
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Cancel status change of a content item.
     */
    async deleteContentStatus(requestParameters: ContentsDeleteContentStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentDto> {
        const response = await this.deleteContentStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Delete the draft version.
     */
    async deleteVersionRaw(requestParameters: ContentsDeleteVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentDto>> {
        if (requestParameters['schema'] == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['unpublished'] != null) {
            headerParameters['X-Unpublished'] = String(requestParameters['unpublished']);
        }

        if (requestParameters['languages'] != null) {
            headerParameters['X-Languages'] = String(requestParameters['languages']);
        }

        const response = await this.request({
            path: `/api/content/$app$/{schema}/{id}/draft`.replace(`{${"schema"}}`, encodeURIComponent(String((requestParameters as any)['schema']))).replace(`{${"id"}}`, encodeURIComponent(String((requestParameters as any)['id']))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContentDtoFromJSON(jsonValue));
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Delete the draft version.
     */
    async deleteVersion(requestParameters: ContentsDeleteVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentDto> {
        const response = await this.deleteVersionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Get a content item.
     */
    async getContentRaw(requestParameters: ContentsGetContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentDto>> {
        if (requestParameters['schema'] == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['version'] != null) {
            queryParameters['version'] = requestParameters['version'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['fields'] != null) {
            headerParameters['X-Fields'] = String(requestParameters['fields']);
        }

        if (requestParameters['flatten'] != null) {
            headerParameters['X-Flatten'] = String(requestParameters['flatten']);
        }

        if (requestParameters['languages'] != null) {
            headerParameters['X-Languages'] = String(requestParameters['languages']);
        }

        if (requestParameters['unpublished'] != null) {
            headerParameters['X-Unpublished'] = String(requestParameters['unpublished']);
        }

        const response = await this.request({
            path: `/api/content/$app$/{schema}/{id}`.replace(`{${"schema"}}`, encodeURIComponent(String((requestParameters as any)['schema']))).replace(`{${"id"}}`, encodeURIComponent(String((requestParameters as any)['id']))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContentDtoFromJSON(jsonValue));
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Get a content item.
     */
    async getContent(requestParameters: ContentsGetContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentDto> {
        const response = await this.getContentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Get a content item validity.
     */
    async getContentValidityRaw(requestParameters: ContentsGetContentValidityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['schema'] == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/content/$app$/{schema}/{id}/validity`.replace(`{${"schema"}}`, encodeURIComponent(String((requestParameters as any)['schema']))).replace(`{${"id"}}`, encodeURIComponent(String((requestParameters as any)['id']))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Get a content item validity.
     */
    async getContentValidity(requestParameters: ContentsGetContentValidityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getContentValidityRaw(requestParameters, initOverrides);
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Get a content by version.
     * @deprecated
     */
    async getContentVersionRaw(requestParameters: ContentsGetContentVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['schema'] == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['unpublished'] != null) {
            headerParameters['X-Unpublished'] = String(requestParameters['unpublished']);
        }

        if (requestParameters['languages'] != null) {
            headerParameters['X-Languages'] = String(requestParameters['languages']);
        }

        const response = await this.request({
            path: `/api/content/$app$/{schema}/{id}/{version}`.replace(`{${"schema"}}`, encodeURIComponent(String((requestParameters as any)['schema']))).replace(`{${"id"}}`, encodeURIComponent(String((requestParameters as any)['id']))).replace(`{${"version"}}`, encodeURIComponent(String((requestParameters as any)['version']))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Get a content by version.
     * @deprecated
     */
    async getContentVersion(requestParameters: ContentsGetContentVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.getContentVersionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Queries contents.
     */
    async getContentsRaw(requestParameters: ContentsGetContentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentsDto>> {
        if (requestParameters['schema'] == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['ids'] != null) {
            queryParameters['ids'] = requestParameters['ids'];
        }

        if (requestParameters['q'] != null) {
            queryParameters['q'] = requestParameters['q'];
        }

        if (requestParameters['$search'] != null) {
            queryParameters['$search'] = requestParameters['$search'];
        }

        if (requestParameters['$top'] != null) {
            queryParameters['$top'] = requestParameters['$top'];
        }

        if (requestParameters['$skip'] != null) {
            queryParameters['$skip'] = requestParameters['$skip'];
        }

        if (requestParameters['$orderby'] != null) {
            queryParameters['$orderby'] = requestParameters['$orderby'];
        }

        if (requestParameters['$filter'] != null) {
            queryParameters['$filter'] = requestParameters['$filter'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['fields'] != null) {
            headerParameters['X-Fields'] = String(requestParameters['fields']);
        }

        if (requestParameters['flatten'] != null) {
            headerParameters['X-Flatten'] = String(requestParameters['flatten']);
        }

        if (requestParameters['languages'] != null) {
            headerParameters['X-Languages'] = String(requestParameters['languages']);
        }

        if (requestParameters['noSlowTotal'] != null) {
            headerParameters['X-NoSlowTotal'] = String(requestParameters['noSlowTotal']);
        }

        if (requestParameters['noTotal'] != null) {
            headerParameters['X-NoTotal'] = String(requestParameters['noTotal']);
        }

        if (requestParameters['unpublished'] != null) {
            headerParameters['X-Unpublished'] = String(requestParameters['unpublished']);
        }

        const response = await this.request({
            path: `/api/content/$app$/{schema}`.replace(`{${"schema"}}`, encodeURIComponent(String((requestParameters as any)['schema']))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContentsDtoFromJSON(jsonValue));
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Queries contents.
     */
    async getContents(requestParameters: ContentsGetContentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentsDto> {
        const response = await this.getContentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Queries contents.
     */
    async getContentsPostRaw(requestParameters: ContentsGetContentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentsDto>> {
        if (requestParameters['schema'] == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (requestParameters['queryDto'] == null) {
            throw new runtime.RequiredError(
                'queryDto',
                'Required parameter "queryDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['fields'] != null) {
            headerParameters['X-Fields'] = String(requestParameters['fields']);
        }

        if (requestParameters['flatten'] != null) {
            headerParameters['X-Flatten'] = String(requestParameters['flatten']);
        }

        if (requestParameters['languages'] != null) {
            headerParameters['X-Languages'] = String(requestParameters['languages']);
        }

        if (requestParameters['noSlowTotal'] != null) {
            headerParameters['X-NoSlowTotal'] = String(requestParameters['noSlowTotal']);
        }

        if (requestParameters['noTotal'] != null) {
            headerParameters['X-NoTotal'] = String(requestParameters['noTotal']);
        }

        if (requestParameters['unpublished'] != null) {
            headerParameters['X-Unpublished'] = String(requestParameters['unpublished']);
        }

        const response = await this.request({
            path: `/api/content/$app$/{schema}/query`.replace(`{${"schema"}}`, encodeURIComponent(String((requestParameters as any)['schema']))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: QueryDtoToJSON(requestParameters['queryDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContentsDtoFromJSON(jsonValue));
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Queries contents.
     */
    async getContentsPost(requestParameters: ContentsGetContentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentsDto> {
        const response = await this.getContentsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Get all references of a content.
     */
    async getReferencesRaw(requestParameters: ContentsGetReferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentsDto>> {
        if (requestParameters['schema'] == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['q'] != null) {
            queryParameters['q'] = requestParameters['q'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['fields'] != null) {
            headerParameters['X-Fields'] = String(requestParameters['fields']);
        }

        if (requestParameters['flatten'] != null) {
            headerParameters['X-Flatten'] = String(requestParameters['flatten']);
        }

        if (requestParameters['languages'] != null) {
            headerParameters['X-Languages'] = String(requestParameters['languages']);
        }

        if (requestParameters['unpublished'] != null) {
            headerParameters['X-Unpublished'] = String(requestParameters['unpublished']);
        }

        if (requestParameters['noSlowTotal'] != null) {
            headerParameters['X-NoSlowTotal'] = String(requestParameters['noSlowTotal']);
        }

        if (requestParameters['noTotal'] != null) {
            headerParameters['X-NoTotal'] = String(requestParameters['noTotal']);
        }

        const response = await this.request({
            path: `/api/content/$app$/{schema}/{id}/references`.replace(`{${"schema"}}`, encodeURIComponent(String((requestParameters as any)['schema']))).replace(`{${"id"}}`, encodeURIComponent(String((requestParameters as any)['id']))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContentsDtoFromJSON(jsonValue));
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Get all references of a content.
     */
    async getReferences(requestParameters: ContentsGetReferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentsDto> {
        const response = await this.getReferencesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Get a referencing contents of a content item.
     */
    async getReferencingRaw(requestParameters: ContentsGetReferencingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentsDto>> {
        if (requestParameters['schema'] == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['q'] != null) {
            queryParameters['q'] = requestParameters['q'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['fields'] != null) {
            headerParameters['X-Fields'] = String(requestParameters['fields']);
        }

        if (requestParameters['flatten'] != null) {
            headerParameters['X-Flatten'] = String(requestParameters['flatten']);
        }

        if (requestParameters['languages'] != null) {
            headerParameters['X-Languages'] = String(requestParameters['languages']);
        }

        if (requestParameters['unpublished'] != null) {
            headerParameters['X-Unpublished'] = String(requestParameters['unpublished']);
        }

        if (requestParameters['noSlowTotal'] != null) {
            headerParameters['X-NoSlowTotal'] = String(requestParameters['noSlowTotal']);
        }

        if (requestParameters['noTotal'] != null) {
            headerParameters['X-NoTotal'] = String(requestParameters['noTotal']);
        }

        const response = await this.request({
            path: `/api/content/$app$/{schema}/{id}/referencing`.replace(`{${"schema"}}`, encodeURIComponent(String((requestParameters as any)['schema']))).replace(`{${"id"}}`, encodeURIComponent(String((requestParameters as any)['id']))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContentsDtoFromJSON(jsonValue));
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Get a referencing contents of a content item.
     */
    async getReferencing(requestParameters: ContentsGetReferencingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentsDto> {
        const response = await this.getReferencingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Patchs a content item.
     */
    async patchContentRaw(requestParameters: ContentsPatchContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentDto>> {
        if (requestParameters['schema'] == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        if (requestParameters['requestBody'] == null) {
            throw new runtime.RequiredError(
                'requestBody',
                'Required parameter "requestBody" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['unpublished'] != null) {
            headerParameters['X-Unpublished'] = String(requestParameters['unpublished']);
        }

        if (requestParameters['languages'] != null) {
            headerParameters['X-Languages'] = String(requestParameters['languages']);
        }

        const response = await this.request({
            path: `/api/content/$app$/{schema}/{id}`.replace(`{${"schema"}}`, encodeURIComponent(String((requestParameters as any)['schema']))).replace(`{${"id"}}`, encodeURIComponent(String((requestParameters as any)['id']))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContentDtoFromJSON(jsonValue));
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Patchs a content item.
     */
    async patchContent(requestParameters: ContentsPatchContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentDto> {
        const response = await this.patchContentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Create a content item.
     */
    async postContentRaw(requestParameters: ContentsPostContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentDto>> {
        if (requestParameters['schema'] == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (requestParameters['requestBody'] == null) {
            throw new runtime.RequiredError(
                'requestBody',
                'Required parameter "requestBody" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['publish'] != null) {
            queryParameters['publish'] = requestParameters['publish'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['unpublished'] != null) {
            headerParameters['X-Unpublished'] = String(requestParameters['unpublished']);
        }

        if (requestParameters['languages'] != null) {
            headerParameters['X-Languages'] = String(requestParameters['languages']);
        }

        const response = await this.request({
            path: `/api/content/$app$/{schema}`.replace(`{${"schema"}}`, encodeURIComponent(String((requestParameters as any)['schema']))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContentDtoFromJSON(jsonValue));
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Create a content item.
     */
    async postContent(requestParameters: ContentsPostContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentDto> {
        const response = await this.postContentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Import content items.
     * @deprecated
     */
    async postContentsRaw(requestParameters: ContentsPostContentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BulkResultDto>>> {
        if (requestParameters['schema'] == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (requestParameters['importContentsDto'] == null) {
            throw new runtime.RequiredError(
                'importContentsDto',
                'Required parameter "importContentsDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/content/$app$/{schema}/import`.replace(`{${"schema"}}`, encodeURIComponent(String((requestParameters as any)['schema']))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ImportContentsDtoToJSON(requestParameters['importContentsDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BulkResultDtoFromJSON));
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Import content items.
     * @deprecated
     */
    async postContents(requestParameters: ContentsPostContentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BulkResultDto>> {
        const response = await this.postContentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Upsert a content item.
     */
    async postUpsertContentRaw(requestParameters: ContentsPostUpsertContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentDto>> {
        if (requestParameters['schema'] == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        if (requestParameters['requestBody'] == null) {
            throw new runtime.RequiredError(
                'requestBody',
                'Required parameter "requestBody" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['patch'] != null) {
            queryParameters['patch'] = requestParameters['patch'];
        }

        if (requestParameters['enrichDefaults'] != null) {
            queryParameters['enrichDefaults'] = requestParameters['enrichDefaults'];
        }

        if (requestParameters['publish'] != null) {
            queryParameters['publish'] = requestParameters['publish'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['unpublished'] != null) {
            headerParameters['X-Unpublished'] = String(requestParameters['unpublished']);
        }

        if (requestParameters['languages'] != null) {
            headerParameters['X-Languages'] = String(requestParameters['languages']);
        }

        const response = await this.request({
            path: `/api/content/$app$/{schema}/{id}`.replace(`{${"schema"}}`, encodeURIComponent(String((requestParameters as any)['schema']))).replace(`{${"id"}}`, encodeURIComponent(String((requestParameters as any)['id']))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContentDtoFromJSON(jsonValue));
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Upsert a content item.
     */
    async postUpsertContent(requestParameters: ContentsPostUpsertContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentDto> {
        const response = await this.postUpsertContentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Update a content item.
     */
    async putContentRaw(requestParameters: ContentsPutContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentDto>> {
        if (requestParameters['schema'] == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        if (requestParameters['requestBody'] == null) {
            throw new runtime.RequiredError(
                'requestBody',
                'Required parameter "requestBody" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['enrichDefaults'] != null) {
            queryParameters['enrichDefaults'] = requestParameters['enrichDefaults'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['unpublished'] != null) {
            headerParameters['X-Unpublished'] = String(requestParameters['unpublished']);
        }

        if (requestParameters['languages'] != null) {
            headerParameters['X-Languages'] = String(requestParameters['languages']);
        }

        const response = await this.request({
            path: `/api/content/$app$/{schema}/{id}`.replace(`{${"schema"}}`, encodeURIComponent(String((requestParameters as any)['schema']))).replace(`{${"id"}}`, encodeURIComponent(String((requestParameters as any)['id']))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContentDtoFromJSON(jsonValue));
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Update a content item.
     */
    async putContent(requestParameters: ContentsPutContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentDto> {
        const response = await this.putContentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Enrich a content item with defaults.
     */
    async putContentDefaultsRaw(requestParameters: ContentsPutContentDefaultsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentDto>> {
        if (requestParameters['schema'] == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['enrichRequiredFields'] != null) {
            queryParameters['enrichRequiredFields'] = requestParameters['enrichRequiredFields'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['unpublished'] != null) {
            headerParameters['X-Unpublished'] = String(requestParameters['unpublished']);
        }

        if (requestParameters['languages'] != null) {
            headerParameters['X-Languages'] = String(requestParameters['languages']);
        }

        const response = await this.request({
            path: `/api/content/$app$/{schema}/{id}/defaults`.replace(`{${"schema"}}`, encodeURIComponent(String((requestParameters as any)['schema']))).replace(`{${"id"}}`, encodeURIComponent(String((requestParameters as any)['id']))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContentDtoFromJSON(jsonValue));
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Enrich a content item with defaults.
     */
    async putContentDefaults(requestParameters: ContentsPutContentDefaultsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentDto> {
        const response = await this.putContentDefaultsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Change status of a content item.
     */
    async putContentStatusRaw(requestParameters: ContentsPutContentStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentDto>> {
        if (requestParameters['schema'] == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        if (requestParameters['changeStatusDto'] == null) {
            throw new runtime.RequiredError(
                'changeStatusDto',
                'Required parameter "changeStatusDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['unpublished'] != null) {
            headerParameters['X-Unpublished'] = String(requestParameters['unpublished']);
        }

        if (requestParameters['languages'] != null) {
            headerParameters['X-Languages'] = String(requestParameters['languages']);
        }

        const response = await this.request({
            path: `/api/content/$app$/{schema}/{id}/status`.replace(`{${"schema"}}`, encodeURIComponent(String((requestParameters as any)['schema']))).replace(`{${"id"}}`, encodeURIComponent(String((requestParameters as any)['id']))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeStatusDtoToJSON(requestParameters['changeStatusDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContentDtoFromJSON(jsonValue));
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Change status of a content item.
     */
    async putContentStatus(requestParameters: ContentsPutContentStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentDto> {
        const response = await this.putContentStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Bulk update content items.
     */
    async bulkUpdateAllContentsRaw(requestParameters: ContentsSharedBulkUpdateAllContentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BulkResultDto>>> {
        if (requestParameters['bulkUpdateContentsDto'] == null) {
            throw new runtime.RequiredError(
                'bulkUpdateContentsDto',
                'Required parameter "bulkUpdateContentsDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['schema'] != null) {
            queryParameters['schema'] = requestParameters['schema'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/content/$app$/bulk`.replace("$app$", encodeURIComponent(this.appName)),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BulkUpdateContentsDtoToJSON(requestParameters['bulkUpdateContentsDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BulkResultDtoFromJSON));
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Bulk update content items.
     */
    async bulkUpdateAllContents(requestParameters: ContentsSharedBulkUpdateAllContentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BulkResultDto>> {
        const response = await this.bulkUpdateAllContentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Queries contents.
     */
    async getAllContentsRaw(requestParameters: ContentsSharedGetAllContentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentsDto>> {
        const queryParameters: any = {};

        if (requestParameters['ids'] != null) {
            queryParameters['ids'] = requestParameters['ids'];
        }

        if (requestParameters['scheduleFrom'] != null) {
            queryParameters['scheduleFrom'] = (requestParameters['scheduleFrom'] as any).toISOString();
        }

        if (requestParameters['scheduleTo'] != null) {
            queryParameters['scheduleTo'] = (requestParameters['scheduleTo'] as any).toISOString();
        }

        if (requestParameters['referencing'] != null) {
            queryParameters['referencing'] = requestParameters['referencing'];
        }

        if (requestParameters['references'] != null) {
            queryParameters['references'] = requestParameters['references'];
        }

        if (requestParameters['q'] != null) {
            queryParameters['q'] = requestParameters['q'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['fields'] != null) {
            headerParameters['X-Fields'] = String(requestParameters['fields']);
        }

        if (requestParameters['flatten'] != null) {
            headerParameters['X-Flatten'] = String(requestParameters['flatten']);
        }

        if (requestParameters['languages'] != null) {
            headerParameters['X-Languages'] = String(requestParameters['languages']);
        }

        if (requestParameters['noSlowTotal'] != null) {
            headerParameters['X-NoSlowTotal'] = String(requestParameters['noSlowTotal']);
        }

        if (requestParameters['noTotal'] != null) {
            headerParameters['X-NoTotal'] = String(requestParameters['noTotal']);
        }

        if (requestParameters['unpublished'] != null) {
            headerParameters['X-Unpublished'] = String(requestParameters['unpublished']);
        }

        const response = await this.request({
            path: `/api/content/$app$`.replace("$app$", encodeURIComponent(this.appName)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContentsDtoFromJSON(jsonValue));
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Queries contents.
     */
    async getAllContents(requestParameters: ContentsSharedGetAllContentsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentsDto> {
        const response = await this.getAllContentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Queries contents.
     */
    async getAllContentsPostRaw(requestParameters: ContentsSharedGetAllContentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentsDto>> {
        if (requestParameters['allContentsByPostDto'] == null) {
            throw new runtime.RequiredError(
                'allContentsByPostDto',
                'Required parameter "allContentsByPostDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['fields'] != null) {
            headerParameters['X-Fields'] = String(requestParameters['fields']);
        }

        if (requestParameters['flatten'] != null) {
            headerParameters['X-Flatten'] = String(requestParameters['flatten']);
        }

        if (requestParameters['languages'] != null) {
            headerParameters['X-Languages'] = String(requestParameters['languages']);
        }

        if (requestParameters['noSlowTotal'] != null) {
            headerParameters['X-NoSlowTotal'] = String(requestParameters['noSlowTotal']);
        }

        if (requestParameters['noTotal'] != null) {
            headerParameters['X-NoTotal'] = String(requestParameters['noTotal']);
        }

        if (requestParameters['unpublished'] != null) {
            headerParameters['X-Unpublished'] = String(requestParameters['unpublished']);
        }

        const response = await this.request({
            path: `/api/content/$app$`.replace("$app$", encodeURIComponent(this.appName)),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AllContentsByPostDtoToJSON(requestParameters['allContentsByPostDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContentsDtoFromJSON(jsonValue));
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Queries contents.
     */
    async getAllContentsPost(requestParameters: ContentsSharedGetAllContentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentsDto> {
        const response = await this.getAllContentsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * GraphQL endpoint.
     */
    async getGraphQLRaw(requestParameters: ContentsSharedGetGraphQLRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        if (requestParameters['theQueryString'] != null) {
            queryParameters['The query string'] = requestParameters['theQueryString'];
        }

        if (requestParameters['variables'] != null) {
            queryParameters['variables'] = requestParameters['variables'];
        }

        if (requestParameters['operationName'] != null) {
            queryParameters['operationName'] = requestParameters['operationName'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['unpublished'] != null) {
            headerParameters['X-Unpublished'] = String(requestParameters['unpublished']);
        }

        const response = await this.request({
            path: `/api/content/$app$/graphql`.replace("$app$", encodeURIComponent(this.appName)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * GraphQL endpoint.
     */
    async getGraphQL(requestParameters: ContentsSharedGetGraphQLRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getGraphQLRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * GraphQL batch endpoint.
     */
    async getGraphQLBatchRaw(requestParameters: ContentsSharedGetGraphQLBatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        if (requestParameters['theQueryString'] != null) {
            queryParameters['The query string'] = requestParameters['theQueryString'];
        }

        if (requestParameters['variables'] != null) {
            queryParameters['variables'] = requestParameters['variables'];
        }

        if (requestParameters['operationName'] != null) {
            queryParameters['operationName'] = requestParameters['operationName'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['unpublished'] != null) {
            headerParameters['X-Unpublished'] = String(requestParameters['unpublished']);
        }

        const response = await this.request({
            path: `/api/content/$app$/graphql/batch`.replace("$app$", encodeURIComponent(this.appName)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * GraphQL batch endpoint.
     */
    async getGraphQLBatch(requestParameters: ContentsSharedGetGraphQLBatchRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getGraphQLBatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * GraphQL endpoint.
     */
    async postGraphQLRaw(requestParameters: ContentsSharedPostGraphQLRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['unpublished'] != null) {
            headerParameters['X-Unpublished'] = String(requestParameters['unpublished']);
        }

        const response = await this.request({
            path: `/api/content/$app$/graphql`.replace("$app$", encodeURIComponent(this.appName)),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * GraphQL endpoint.
     */
    async postGraphQL(requestParameters: ContentsSharedPostGraphQLRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.postGraphQLRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * GraphQL batch endpoint.
     */
    async postGraphQLBatchRaw(requestParameters: ContentsSharedPostGraphQLBatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['unpublished'] != null) {
            headerParameters['X-Unpublished'] = String(requestParameters['unpublished']);
        }

        const response = await this.request({
            path: `/api/content/$app$/graphql/batch`.replace("$app$", encodeURIComponent(this.appName)),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * GraphQL batch endpoint.
     */
    async postGraphQLBatch(requestParameters: ContentsSharedPostGraphQLBatchRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.postGraphQLBatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
