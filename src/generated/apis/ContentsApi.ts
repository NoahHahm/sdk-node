/**
 * Squidex API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AllContentsByPostDto,
  BulkResultDto,
  BulkUpdateContentsDto,
  ChangeStatusDto,
  ContentDto,
  ContentsDto,
  ImportContentsDto,
  QueryDto,
} from '../models/index';
import {
    AllContentsByPostDtoToJSON,
    BulkResultDtoFromJSON,
    BulkUpdateContentsDtoToJSON,
    ChangeStatusDtoToJSON,
    ContentDtoFromJSON,
    ContentsDtoFromJSON,
    ImportContentsDtoToJSON,
    QueryDtoToJSON,
} from '../models/index';

export interface ContentsBulkUpdateContentsRequestRaw {
    schema: string;
    bulkUpdateContentsDto: BulkUpdateContentsDto;
}

export interface ContentsCreateDraftRequest {
    unpublished?: boolean;
    languages?: string;
}

export interface ContentsCreateDraftRequestRaw {
    schema: string;
    id: string;
    unpublished?: boolean;
    languages?: string;
}

export interface ContentsDeleteContentRequest {
    checkReferrers?: boolean;
    permanent?: boolean;
}

export interface ContentsDeleteContentRequestRaw {
    schema: string;
    id: string;
    checkReferrers?: boolean;
    permanent?: boolean;
}

export interface ContentsDeleteContentStatusRequest {
    unpublished?: boolean;
    languages?: string;
}

export interface ContentsDeleteContentStatusRequestRaw {
    schema: string;
    id: string;
    unpublished?: boolean;
    languages?: string;
}

export interface ContentsDeleteVersionRequest {
    unpublished?: boolean;
    languages?: string;
}

export interface ContentsDeleteVersionRequestRaw {
    schema: string;
    id: string;
    unpublished?: boolean;
    languages?: string;
}

export interface ContentsGetContentRequest {
    version?: number;
    fields?: string;
    flatten?: boolean;
    languages?: string;
    unpublished?: boolean;
}

export interface ContentsGetContentRequestRaw {
    schema: string;
    id: string;
    version?: number;
    fields?: string;
    flatten?: boolean;
    languages?: string;
    unpublished?: boolean;
}

export interface ContentsGetContentValidityRequestRaw {
    schema: string;
    id: string;
}

export interface ContentsGetContentVersionRequest {
    unpublished?: boolean;
    languages?: string;
}

export interface ContentsGetContentVersionRequestRaw {
    schema: string;
    id: string;
    version: number;
    unpublished?: boolean;
    languages?: string;
}

export interface ContentsGetContentsRequest {
    ids?: string | null;
    q?: string | null;
    $search?: string;
    $top?: number;
    $skip?: number;
    $orderby?: string;
    $filter?: string;
    fields?: string;
    flatten?: boolean;
    languages?: string;
    noSlowTotal?: boolean;
    noTotal?: boolean;
    unpublished?: boolean;
}

export interface ContentsGetContentsRequestRaw {
    schema: string;
    ids?: string | null;
    q?: string | null;
    $search?: string;
    $top?: number;
    $skip?: number;
    $orderby?: string;
    $filter?: string;
    fields?: string;
    flatten?: boolean;
    languages?: string;
    noSlowTotal?: boolean;
    noTotal?: boolean;
    unpublished?: boolean;
}

export interface ContentsGetContentsPostRequest {
    fields?: string;
    flatten?: boolean;
    languages?: string;
    noSlowTotal?: boolean;
    noTotal?: boolean;
    unpublished?: boolean;
}

export interface ContentsGetContentsPostRequestRaw {
    schema: string;
    queryDto: QueryDto;
    fields?: string;
    flatten?: boolean;
    languages?: string;
    noSlowTotal?: boolean;
    noTotal?: boolean;
    unpublished?: boolean;
}

export interface ContentsGetReferencesRequest {
    q?: string | null;
    fields?: string;
    flatten?: boolean;
    languages?: string;
    unpublished?: boolean;
    noSlowTotal?: boolean;
    noTotal?: boolean;
}

export interface ContentsGetReferencesRequestRaw {
    schema: string;
    id: string;
    q?: string | null;
    fields?: string;
    flatten?: boolean;
    languages?: string;
    unpublished?: boolean;
    noSlowTotal?: boolean;
    noTotal?: boolean;
}

export interface ContentsGetReferencingRequest {
    q?: string | null;
    fields?: string;
    flatten?: boolean;
    languages?: string;
    unpublished?: boolean;
    noSlowTotal?: boolean;
    noTotal?: boolean;
}

export interface ContentsGetReferencingRequestRaw {
    schema: string;
    id: string;
    q?: string | null;
    fields?: string;
    flatten?: boolean;
    languages?: string;
    unpublished?: boolean;
    noSlowTotal?: boolean;
    noTotal?: boolean;
}

export interface ContentsPatchContentRequest {
    unpublished?: boolean;
    languages?: string;
}

export interface ContentsPatchContentRequestRaw {
    schema: string;
    id: string;
    requestBody: { [key: string]: { [key: string]: any; }; };
    unpublished?: boolean;
    languages?: string;
}

export interface ContentsPostContentRequest {
    status?: string | null;
    id?: string | null;
    publish?: boolean;
    unpublished?: boolean;
    languages?: string;
}

export interface ContentsPostContentRequestRaw {
    schema: string;
    requestBody: { [key: string]: { [key: string]: any; }; };
    status?: string | null;
    id?: string | null;
    publish?: boolean;
    unpublished?: boolean;
    languages?: string;
}

export interface ContentsPostContentsRequestRaw {
    schema: string;
    importContentsDto: ImportContentsDto;
}

export interface ContentsPostUpsertContentRequest {
    status?: string | null;
    patch?: boolean;
    enrichDefaults?: boolean;
    publish?: boolean;
    unpublished?: boolean;
    languages?: string;
}

export interface ContentsPostUpsertContentRequestRaw {
    schema: string;
    id: string;
    requestBody: { [key: string]: { [key: string]: any; }; };
    status?: string | null;
    patch?: boolean;
    enrichDefaults?: boolean;
    publish?: boolean;
    unpublished?: boolean;
    languages?: string;
}

export interface ContentsPutContentRequest {
    enrichDefaults?: boolean;
    unpublished?: boolean;
    languages?: string;
}

export interface ContentsPutContentRequestRaw {
    schema: string;
    id: string;
    requestBody: { [key: string]: { [key: string]: any; }; };
    enrichDefaults?: boolean;
    unpublished?: boolean;
    languages?: string;
}

export interface ContentsPutContentDefaultsRequest {
    enrichRequiredFields?: boolean;
    unpublished?: boolean;
    languages?: string;
}

export interface ContentsPutContentDefaultsRequestRaw {
    schema: string;
    id: string;
    enrichRequiredFields?: boolean;
    unpublished?: boolean;
    languages?: string;
}

export interface ContentsPutContentStatusRequest {
    unpublished?: boolean;
    languages?: string;
}

export interface ContentsPutContentStatusRequestRaw {
    schema: string;
    id: string;
    changeStatusDto: ChangeStatusDto;
    unpublished?: boolean;
    languages?: string;
}

export interface ContentsSharedBulkUpdateAllContentsRequest {
    schema?: string;
}

export interface ContentsSharedBulkUpdateAllContentsRequestRaw {
    bulkUpdateContentsDto: BulkUpdateContentsDto;
    schema?: string;
}

export interface ContentsSharedGetAllContentsRequest {
    ids?: string | null;
    scheduleFrom?: Date | null;
    scheduleTo?: Date | null;
    referencing?: string | null;
    references?: string | null;
    q?: string | null;
    fields?: string;
    flatten?: boolean;
    languages?: string;
    noSlowTotal?: boolean;
    noTotal?: boolean;
    unpublished?: boolean;
}

export interface ContentsSharedGetAllContentsRequestRaw {
    ids?: string | null;
    scheduleFrom?: Date | null;
    scheduleTo?: Date | null;
    referencing?: string | null;
    references?: string | null;
    q?: string | null;
    fields?: string;
    flatten?: boolean;
    languages?: string;
    noSlowTotal?: boolean;
    noTotal?: boolean;
    unpublished?: boolean;
}

export interface ContentsSharedGetAllContentsPostRequest {
    fields?: string;
    flatten?: boolean;
    languages?: string;
    noSlowTotal?: boolean;
    noTotal?: boolean;
    unpublished?: boolean;
}

export interface ContentsSharedGetAllContentsPostRequestRaw {
    allContentsByPostDto: AllContentsByPostDto;
    fields?: string;
    flatten?: boolean;
    languages?: string;
    noSlowTotal?: boolean;
    noTotal?: boolean;
    unpublished?: boolean;
}

export interface ContentsSharedGetGraphQLRequest {
    theQueryString?: string;
    variables?: string | null;
    operationName?: string | null;
    unpublished?: boolean;
}

export interface ContentsSharedGetGraphQLRequestRaw {
    theQueryString?: string;
    variables?: string | null;
    operationName?: string | null;
    unpublished?: boolean;
}

export interface ContentsSharedGetGraphQLBatchRequest {
    theQueryString?: string;
    variables?: string | null;
    operationName?: string | null;
    unpublished?: boolean;
}

export interface ContentsSharedGetGraphQLBatchRequestRaw {
    theQueryString?: string;
    variables?: string | null;
    operationName?: string | null;
    unpublished?: boolean;
}

export interface ContentsSharedPostGraphQLRequest {
    unpublished?: boolean;
    body?: any | null;
}

export interface ContentsSharedPostGraphQLRequestRaw {
    unpublished?: boolean;
    body?: any | null;
}

export interface ContentsSharedPostGraphQLBatchRequest {
    unpublished?: boolean;
    body?: any | null;
}

export interface ContentsSharedPostGraphQLBatchRequestRaw {
    unpublished?: boolean;
    body?: any | null;
}

/**
 * ContentsApi - interface
 * 
 * @export
 * @interface ContentsApiInterface
 */
export interface ContentsApiInterface {
    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @summary Bulk update content items.
     * @param {string} schema The name of the schema.
     * @param {BulkUpdateContentsDto} bulkUpdateContentsDto The bulk update request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentsApiInterface
     */
    bulkUpdateContentsRaw(schema: string, bulkUpdateContentsDto: BulkUpdateContentsDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BulkResultDto>>>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Bulk update content items.
     */
    bulkUpdateContents(schema: string, bulkUpdateContentsDto: BulkUpdateContentsDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BulkResultDto>>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @summary Create a new draft version.
     * @param {string} schema The name of the schema.
     * @param {string} id The ID of the content item to create the draft for.
     * @param {boolean} [unpublished] Return unpublished content items.
     * @param {string} [languages] The list of languages to resolve (comma-separated).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentsApiInterface
     */
    createDraftRaw(schema: string, id: string, requestParameters?: ContentsCreateDraftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentDto>>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Create a new draft version.
     */
    createDraft(schema: string, id: string, requestParameters?: ContentsCreateDraftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentDto>;

    /**
     * You can create an generated documentation for your app at /api/content/{appName}/docs.
     * @summary Delete a content item.
     * @param {string} schema The name of the schema.
     * @param {string} id The ID of the content item to delete.
     * @param {boolean} [checkReferrers] True to check referrers of this content.
     * @param {boolean} [permanent] True to delete the content permanently.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentsApiInterface
     */
    deleteContentRaw(schema: string, id: string, requestParameters?: ContentsDeleteContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * You can create an generated documentation for your app at /api/content/{appName}/docs.
     * Delete a content item.
     */
    deleteContent(schema: string, id: string, requestParameters?: ContentsDeleteContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @summary Cancel status change of a content item.
     * @param {string} schema The name of the schema.
     * @param {string} id The ID of the content item to cancel.
     * @param {boolean} [unpublished] Return unpublished content items.
     * @param {string} [languages] The list of languages to resolve (comma-separated).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentsApiInterface
     */
    deleteContentStatusRaw(schema: string, id: string, requestParameters?: ContentsDeleteContentStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentDto>>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Cancel status change of a content item.
     */
    deleteContentStatus(schema: string, id: string, requestParameters?: ContentsDeleteContentStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentDto>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @summary Delete the draft version.
     * @param {string} schema The name of the schema.
     * @param {string} id The ID of the content item to delete the draft from.
     * @param {boolean} [unpublished] Return unpublished content items.
     * @param {string} [languages] The list of languages to resolve (comma-separated).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentsApiInterface
     */
    deleteVersionRaw(schema: string, id: string, requestParameters?: ContentsDeleteVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentDto>>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Delete the draft version.
     */
    deleteVersion(schema: string, id: string, requestParameters?: ContentsDeleteVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentDto>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @summary Get a content item.
     * @param {string} schema The name of the schema.
     * @param {string} id The ID of the content to fetch.
     * @param {number} [version] The optional version.
     * @param {string} [fields] The list of content fields (comma-separated).
     * @param {boolean} [flatten] Provide the data as flat object.
     * @param {string} [languages] The list of languages to resolve (comma-separated).
     * @param {boolean} [unpublished] Return unpublished content items.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentsApiInterface
     */
    getContentRaw(schema: string, id: string, requestParameters?: ContentsGetContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentDto>>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Get a content item.
     */
    getContent(schema: string, id: string, requestParameters?: ContentsGetContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentDto>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @summary Get a content item validity.
     * @param {string} schema The name of the schema.
     * @param {string} id The ID of the content to fetch.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentsApiInterface
     */
    getContentValidityRaw(schema: string, id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Get a content item validity.
     */
    getContentValidity(schema: string, id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @summary Get a content by version.
     * @param {string} schema The name of the schema.
     * @param {string} id The ID of the content to fetch.
     * @param {number} version The version fo the content to fetch.
     * @param {boolean} [unpublished] Return unpublished content items.
     * @param {string} [languages] The list of languages to resolve (comma-separated).
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof ContentsApiInterface
     */
    getContentVersionRaw(schema: string, id: string, version: number, requestParameters?: ContentsGetContentVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Get a content by version.
     * @deprecated
     */
    getContentVersion(schema: string, id: string, version: number, requestParameters?: ContentsGetContentVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @summary Queries contents.
     * @param {string} schema The name of the schema.
     * @param {string} [ids] The optional ids of the content to fetch.
     * @param {string} [q] The optional json query.
     * @param {string} [$search] Optional number of items to skip.
     * @param {number} [$top] Optional number of items to take.
     * @param {number} [$skip] Optional number of items to skip.
     * @param {string} [$orderby] Optional OData order definition.
     * @param {string} [$filter] Optional OData filter.
     * @param {string} [fields] The list of content fields (comma-separated).
     * @param {boolean} [flatten] Provide the data as flat object.
     * @param {string} [languages] The list of languages to resolve (comma-separated).
     * @param {boolean} [noSlowTotal] Do not return the total amount, if it would be slow.
     * @param {boolean} [noTotal] Do not return the total amount.
     * @param {boolean} [unpublished] Return unpublished content items.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentsApiInterface
     */
    getContentsRaw(schema: string, requestParameters?: ContentsGetContentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentsDto>>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Queries contents.
     */
    getContents(schema: string, requestParameters?: ContentsGetContentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentsDto>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @summary Queries contents.
     * @param {string} schema The name of the schema.
     * @param {QueryDto} queryDto The required query object.
     * @param {string} [fields] The list of content fields (comma-separated).
     * @param {boolean} [flatten] Provide the data as flat object.
     * @param {string} [languages] The list of languages to resolve (comma-separated).
     * @param {boolean} [noSlowTotal] Do not return the total amount, if it would be slow.
     * @param {boolean} [noTotal] Do not return the total amount.
     * @param {boolean} [unpublished] Return unpublished content items.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentsApiInterface
     */
    getContentsPostRaw(schema: string, queryDto: QueryDto, requestParameters?: ContentsGetContentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentsDto>>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Queries contents.
     */
    getContentsPost(schema: string, queryDto: QueryDto, requestParameters?: ContentsGetContentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentsDto>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @summary Get all references of a content.
     * @param {string} schema The name of the schema.
     * @param {string} id The ID of the content to fetch.
     * @param {string} [q] The optional json query.
     * @param {string} [fields] The list of content fields (comma-separated).
     * @param {boolean} [flatten] Provide the data as flat object.
     * @param {string} [languages] The list of languages to resolve (comma-separated).
     * @param {boolean} [unpublished] Return unpublished content items.
     * @param {boolean} [noSlowTotal] Do not return the total amount, if it would be slow.
     * @param {boolean} [noTotal] Do not return the total amount.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentsApiInterface
     */
    getReferencesRaw(schema: string, id: string, requestParameters?: ContentsGetReferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentsDto>>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Get all references of a content.
     */
    getReferences(schema: string, id: string, requestParameters?: ContentsGetReferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentsDto>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @summary Get a referencing contents of a content item.
     * @param {string} schema The name of the schema.
     * @param {string} id The ID of the content to fetch.
     * @param {string} [q] The optional json query.
     * @param {string} [fields] The list of content fields (comma-separated).
     * @param {boolean} [flatten] Provide the data as flat object.
     * @param {string} [languages] The list of languages to resolve (comma-separated).
     * @param {boolean} [unpublished] Return unpublished content items.
     * @param {boolean} [noSlowTotal] Do not return the total amount, if it would be slow.
     * @param {boolean} [noTotal] Do not return the total amount.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentsApiInterface
     */
    getReferencingRaw(schema: string, id: string, requestParameters?: ContentsGetReferencingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentsDto>>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Get a referencing contents of a content item.
     */
    getReferencing(schema: string, id: string, requestParameters?: ContentsGetReferencingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentsDto>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @summary Patchs a content item.
     * @param {string} schema The name of the schema.
     * @param {string} id The ID of the content item to patch.
     * @param {{ [key: string]: { [key: string]: any; }; }} requestBody The patch for the content item.
     * @param {boolean} [unpublished] Return unpublished content items.
     * @param {string} [languages] The list of languages to resolve (comma-separated).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentsApiInterface
     */
    patchContentRaw(schema: string, id: string, requestBody: { [key: string]: { [key: string]: any; }; }, requestParameters?: ContentsPatchContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentDto>>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Patchs a content item.
     */
    patchContent(schema: string, id: string, requestBody: { [key: string]: { [key: string]: any; }; }, requestParameters?: ContentsPatchContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentDto>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @summary Create a content item.
     * @param {string} schema The name of the schema.
     * @param {{ [key: string]: { [key: string]: any; }; }} requestBody The full data for the content item.
     * @param {string} [status] The initial status.
     * @param {string} [id] The optional custom content id.
     * @param {boolean} [publish] True to automatically publish the content.
     * @param {boolean} [unpublished] Return unpublished content items.
     * @param {string} [languages] The list of languages to resolve (comma-separated).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentsApiInterface
     */
    postContentRaw(schema: string, requestBody: { [key: string]: { [key: string]: any; }; }, requestParameters?: ContentsPostContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentDto>>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Create a content item.
     */
    postContent(schema: string, requestBody: { [key: string]: { [key: string]: any; }; }, requestParameters?: ContentsPostContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentDto>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @summary Import content items.
     * @param {string} schema The name of the schema.
     * @param {ImportContentsDto} importContentsDto The import request.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof ContentsApiInterface
     */
    postContentsRaw(schema: string, importContentsDto: ImportContentsDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BulkResultDto>>>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Import content items.
     * @deprecated
     */
    postContents(schema: string, importContentsDto: ImportContentsDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BulkResultDto>>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @summary Upsert a content item.
     * @param {string} schema The name of the schema.
     * @param {string} id The ID of the content item to update.
     * @param {{ [key: string]: { [key: string]: any; }; }} requestBody The full data for the content item.
     * @param {string} [status] The initial status.
     * @param {boolean} [patch] Makes the update as patch.
     * @param {boolean} [enrichDefaults] Enrich the content with defaults.
     * @param {boolean} [publish] True to automatically publish the content.
     * @param {boolean} [unpublished] Return unpublished content items.
     * @param {string} [languages] The list of languages to resolve (comma-separated).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentsApiInterface
     */
    postUpsertContentRaw(schema: string, id: string, requestBody: { [key: string]: { [key: string]: any; }; }, requestParameters?: ContentsPostUpsertContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentDto>>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Upsert a content item.
     */
    postUpsertContent(schema: string, id: string, requestBody: { [key: string]: { [key: string]: any; }; }, requestParameters?: ContentsPostUpsertContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentDto>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @summary Update a content item.
     * @param {string} schema The name of the schema.
     * @param {string} id The ID of the content item to update.
     * @param {{ [key: string]: { [key: string]: any; }; }} requestBody The full data for the content item.
     * @param {boolean} [enrichDefaults] Enrich the content with defaults.
     * @param {boolean} [unpublished] Return unpublished content items.
     * @param {string} [languages] The list of languages to resolve (comma-separated).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentsApiInterface
     */
    putContentRaw(schema: string, id: string, requestBody: { [key: string]: { [key: string]: any; }; }, requestParameters?: ContentsPutContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentDto>>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Update a content item.
     */
    putContent(schema: string, id: string, requestBody: { [key: string]: { [key: string]: any; }; }, requestParameters?: ContentsPutContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentDto>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @summary Enrich a content item with defaults.
     * @param {string} schema The name of the schema.
     * @param {string} id The ID of the content item to update.
     * @param {boolean} [enrichRequiredFields] True, to also enrich required fields. Default: false.             
     * @param {boolean} [unpublished] Return unpublished content items.
     * @param {string} [languages] The list of languages to resolve (comma-separated).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentsApiInterface
     */
    putContentDefaultsRaw(schema: string, id: string, requestParameters?: ContentsPutContentDefaultsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentDto>>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Enrich a content item with defaults.
     */
    putContentDefaults(schema: string, id: string, requestParameters?: ContentsPutContentDefaultsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentDto>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @summary Change status of a content item.
     * @param {string} schema The name of the schema.
     * @param {string} id The ID of the content item to change.
     * @param {ChangeStatusDto} changeStatusDto The status request.
     * @param {boolean} [unpublished] Return unpublished content items.
     * @param {string} [languages] The list of languages to resolve (comma-separated).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentsApiInterface
     */
    putContentStatusRaw(schema: string, id: string, changeStatusDto: ChangeStatusDto, requestParameters?: ContentsPutContentStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentDto>>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Change status of a content item.
     */
    putContentStatus(schema: string, id: string, changeStatusDto: ChangeStatusDto, requestParameters?: ContentsPutContentStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentDto>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @summary Bulk update content items.
     * @param {BulkUpdateContentsDto} bulkUpdateContentsDto The bulk update request.
     * @param {string} [schema] The name of the schema.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentsApiInterface
     */
    bulkUpdateAllContentsRaw(bulkUpdateContentsDto: BulkUpdateContentsDto, requestParameters?: ContentsSharedBulkUpdateAllContentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BulkResultDto>>>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Bulk update content items.
     */
    bulkUpdateAllContents(bulkUpdateContentsDto: BulkUpdateContentsDto, requestParameters?: ContentsSharedBulkUpdateAllContentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BulkResultDto>>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @summary Queries contents.
     * @param {string} [ids] The list of ids to query.
     * @param {Date} [scheduleFrom] The start of the schedule.
     * @param {Date} [scheduleTo] The end of the schedule.
     * @param {string} [referencing] The ID of the referencing content item.
     * @param {string} [references] The ID of the reference content item.
     * @param {string} [q] The optional json query.
     * @param {string} [fields] The list of content fields (comma-separated).
     * @param {boolean} [flatten] Provide the data as flat object.
     * @param {string} [languages] The list of languages to resolve (comma-separated).
     * @param {boolean} [noSlowTotal] Do not return the total amount, if it would be slow.
     * @param {boolean} [noTotal] Do not return the total amount.
     * @param {boolean} [unpublished] Return unpublished content items.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentsApiInterface
     */
    getAllContentsRaw(requestParameters?: ContentsSharedGetAllContentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentsDto>>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Queries contents.
     */
    getAllContents(requestParameters?: ContentsSharedGetAllContentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentsDto>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @summary Queries contents.
     * @param {AllContentsByPostDto} allContentsByPostDto The required query object.
     * @param {string} [fields] The list of content fields (comma-separated).
     * @param {boolean} [flatten] Provide the data as flat object.
     * @param {string} [languages] The list of languages to resolve (comma-separated).
     * @param {boolean} [noSlowTotal] Do not return the total amount, if it would be slow.
     * @param {boolean} [noTotal] Do not return the total amount.
     * @param {boolean} [unpublished] Return unpublished content items.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentsApiInterface
     */
    getAllContentsPostRaw(allContentsByPostDto: AllContentsByPostDto, requestParameters?: ContentsSharedGetAllContentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentsDto>>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Queries contents.
     */
    getAllContentsPost(allContentsByPostDto: AllContentsByPostDto, requestParameters?: ContentsSharedGetAllContentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentsDto>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @summary GraphQL endpoint.
     * @param {string} [theQueryString] The optional version of the asset.
     * @param {string} [variables] The optional operation variables.
     * @param {string} [operationName] The optional operation name.
     * @param {boolean} [unpublished] Return unpublished content items.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentsApiInterface
     */
    getGraphQLRaw(requestParameters?: ContentsSharedGetGraphQLRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * GraphQL endpoint.
     */
    getGraphQL(requestParameters?: ContentsSharedGetGraphQLRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @summary GraphQL batch endpoint.
     * @param {string} [theQueryString] The optional version of the asset.
     * @param {string} [variables] The optional operation variables.
     * @param {string} [operationName] The optional operation name.
     * @param {boolean} [unpublished] Return unpublished content items.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentsApiInterface
     */
    getGraphQLBatchRaw(requestParameters?: ContentsSharedGetGraphQLBatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * GraphQL batch endpoint.
     */
    getGraphQLBatch(requestParameters?: ContentsSharedGetGraphQLBatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @summary GraphQL endpoint.
     * @param {boolean} [unpublished] Return unpublished content items.
     * @param {any} [body] The graphql request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentsApiInterface
     */
    postGraphQLRaw(requestParameters?: ContentsSharedPostGraphQLRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * GraphQL endpoint.
     */
    postGraphQL(requestParameters?: ContentsSharedPostGraphQLRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * @summary GraphQL batch endpoint.
     * @param {boolean} [unpublished] Return unpublished content items.
     * @param {any} [body] The graphql request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentsApiInterface
     */
    postGraphQLBatchRaw(requestParameters?: ContentsSharedPostGraphQLBatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * GraphQL batch endpoint.
     */
    postGraphQLBatch(requestParameters?: ContentsSharedPostGraphQLBatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

}

/**
 * 
 */
export class ContentsApi extends runtime.BaseAPI implements ContentsApiInterface {

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Bulk update content items.
     */
    async bulkUpdateContentsRaw(schema: string, bulkUpdateContentsDto: BulkUpdateContentsDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BulkResultDto>>> {
        const _schema = schema;
        const _bulkUpdateContentsDto = bulkUpdateContentsDto;

        if (_schema == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (_bulkUpdateContentsDto == null) {
            throw new runtime.RequiredError(
                'bulkUpdateContentsDto',
                'Required parameter "bulkUpdateContentsDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/content/$app$/{schema}/bulk`.replace(`{${"schema"}}`, encodeURIComponent(String(_schema))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BulkUpdateContentsDtoToJSON(_bulkUpdateContentsDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BulkResultDtoFromJSON));
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Bulk update content items.
     */
    async bulkUpdateContents(schema: string, bulkUpdateContentsDto: BulkUpdateContentsDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BulkResultDto>> {
        const response = await this.bulkUpdateContentsRaw(schema, bulkUpdateContentsDto, initOverrides);
        return await response.value();
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Create a new draft version.
     */
    async createDraftRaw(schema: string, id: string, requestParameters: ContentsCreateDraftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentDto>> {
        const _schema = schema;
        const _id = id;
        const _unpublished = requestParameters?.['unpublished'];
        const _languages = requestParameters?.['languages'];

        if (_schema == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (_id == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (_unpublished != null) {
            headerParameters['X-Unpublished'] = String(_unpublished);
        }

        if (_languages != null) {
            headerParameters['X-Languages'] = String(_languages);
        }

        const response = await this.request({
            path: `/api/content/$app$/{schema}/{id}/draft`.replace(`{${"schema"}}`, encodeURIComponent(String(_schema))).replace(`{${"id"}}`, encodeURIComponent(String(_id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContentDtoFromJSON(jsonValue));
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Create a new draft version.
     */
    async createDraft(schema: string, id: string, requestParameters: ContentsCreateDraftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentDto> {
        const response = await this.createDraftRaw(schema, id, requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can create an generated documentation for your app at /api/content/{appName}/docs.
     * Delete a content item.
     */
    async deleteContentRaw(schema: string, id: string, requestParameters: ContentsDeleteContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const _schema = schema;
        const _id = id;
        const _checkReferrers = requestParameters?.['checkReferrers'];
        const _permanent = requestParameters?.['permanent'];

        if (_schema == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (_id == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        if (_checkReferrers != null) {
            queryParameters['checkReferrers'] = _checkReferrers;
        }

        if (_permanent != null) {
            queryParameters['permanent'] = _permanent;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/content/$app$/{schema}/{id}`.replace(`{${"schema"}}`, encodeURIComponent(String(_schema))).replace(`{${"id"}}`, encodeURIComponent(String(_id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * You can create an generated documentation for your app at /api/content/{appName}/docs.
     * Delete a content item.
     */
    async deleteContent(schema: string, id: string, requestParameters: ContentsDeleteContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteContentRaw(schema, id, requestParameters, initOverrides);
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Cancel status change of a content item.
     */
    async deleteContentStatusRaw(schema: string, id: string, requestParameters: ContentsDeleteContentStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentDto>> {
        const _schema = schema;
        const _id = id;
        const _unpublished = requestParameters?.['unpublished'];
        const _languages = requestParameters?.['languages'];

        if (_schema == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (_id == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (_unpublished != null) {
            headerParameters['X-Unpublished'] = String(_unpublished);
        }

        if (_languages != null) {
            headerParameters['X-Languages'] = String(_languages);
        }

        const response = await this.request({
            path: `/api/content/$app$/{schema}/{id}/status`.replace(`{${"schema"}}`, encodeURIComponent(String(_schema))).replace(`{${"id"}}`, encodeURIComponent(String(_id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContentDtoFromJSON(jsonValue));
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Cancel status change of a content item.
     */
    async deleteContentStatus(schema: string, id: string, requestParameters: ContentsDeleteContentStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentDto> {
        const response = await this.deleteContentStatusRaw(schema, id, requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Delete the draft version.
     */
    async deleteVersionRaw(schema: string, id: string, requestParameters: ContentsDeleteVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentDto>> {
        const _schema = schema;
        const _id = id;
        const _unpublished = requestParameters?.['unpublished'];
        const _languages = requestParameters?.['languages'];

        if (_schema == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (_id == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (_unpublished != null) {
            headerParameters['X-Unpublished'] = String(_unpublished);
        }

        if (_languages != null) {
            headerParameters['X-Languages'] = String(_languages);
        }

        const response = await this.request({
            path: `/api/content/$app$/{schema}/{id}/draft`.replace(`{${"schema"}}`, encodeURIComponent(String(_schema))).replace(`{${"id"}}`, encodeURIComponent(String(_id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContentDtoFromJSON(jsonValue));
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Delete the draft version.
     */
    async deleteVersion(schema: string, id: string, requestParameters: ContentsDeleteVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentDto> {
        const response = await this.deleteVersionRaw(schema, id, requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Get a content item.
     */
    async getContentRaw(schema: string, id: string, requestParameters: ContentsGetContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentDto>> {
        const _schema = schema;
        const _id = id;
        const _version = requestParameters?.['version'];
        const _fields = requestParameters?.['fields'];
        const _flatten = requestParameters?.['flatten'];
        const _languages = requestParameters?.['languages'];
        const _unpublished = requestParameters?.['unpublished'];

        if (_schema == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (_id == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        if (_version != null) {
            queryParameters['version'] = _version;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (_fields != null) {
            headerParameters['X-Fields'] = String(_fields);
        }

        if (_flatten != null) {
            headerParameters['X-Flatten'] = String(_flatten);
        }

        if (_languages != null) {
            headerParameters['X-Languages'] = String(_languages);
        }

        if (_unpublished != null) {
            headerParameters['X-Unpublished'] = String(_unpublished);
        }

        const response = await this.request({
            path: `/api/content/$app$/{schema}/{id}`.replace(`{${"schema"}}`, encodeURIComponent(String(_schema))).replace(`{${"id"}}`, encodeURIComponent(String(_id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContentDtoFromJSON(jsonValue));
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Get a content item.
     */
    async getContent(schema: string, id: string, requestParameters: ContentsGetContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentDto> {
        const response = await this.getContentRaw(schema, id, requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Get a content item validity.
     */
    async getContentValidityRaw(schema: string, id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const _schema = schema;
        const _id = id;

        if (_schema == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (_id == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/content/$app$/{schema}/{id}/validity`.replace(`{${"schema"}}`, encodeURIComponent(String(_schema))).replace(`{${"id"}}`, encodeURIComponent(String(_id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Get a content item validity.
     */
    async getContentValidity(schema: string, id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getContentValidityRaw(schema, id, initOverrides);
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Get a content by version.
     * @deprecated
     */
    async getContentVersionRaw(schema: string, id: string, version: number, requestParameters: ContentsGetContentVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        const _schema = schema;
        const _id = id;
        const _version = version;
        const _unpublished = requestParameters?.['unpublished'];
        const _languages = requestParameters?.['languages'];

        if (_schema == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (_id == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        if (_version == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (_unpublished != null) {
            headerParameters['X-Unpublished'] = String(_unpublished);
        }

        if (_languages != null) {
            headerParameters['X-Languages'] = String(_languages);
        }

        const response = await this.request({
            path: `/api/content/$app$/{schema}/{id}/{version}`.replace(`{${"schema"}}`, encodeURIComponent(String(_schema))).replace(`{${"id"}}`, encodeURIComponent(String(_id))).replace(`{${"version"}}`, encodeURIComponent(String(_version))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Get a content by version.
     * @deprecated
     */
    async getContentVersion(schema: string, id: string, version: number, requestParameters: ContentsGetContentVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.getContentVersionRaw(schema, id, version, requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Queries contents.
     */
    async getContentsRaw(schema: string, requestParameters: ContentsGetContentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentsDto>> {
        const _schema = schema;
        const _ids = requestParameters?.['ids'];
        const _q = requestParameters?.['q'];
        const _$search = requestParameters?.['$search'];
        const _$top = requestParameters?.['$top'];
        const _$skip = requestParameters?.['$skip'];
        const _$orderby = requestParameters?.['$orderby'];
        const _$filter = requestParameters?.['$filter'];
        const _fields = requestParameters?.['fields'];
        const _flatten = requestParameters?.['flatten'];
        const _languages = requestParameters?.['languages'];
        const _noSlowTotal = requestParameters?.['noSlowTotal'];
        const _noTotal = requestParameters?.['noTotal'];
        const _unpublished = requestParameters?.['unpublished'];

        if (_schema == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        if (_ids != null) {
            queryParameters['ids'] = _ids;
        }

        if (_q != null) {
            queryParameters['q'] = _q;
        }

        if (_$search != null) {
            queryParameters['$search'] = _$search;
        }

        if (_$top != null) {
            queryParameters['$top'] = _$top;
        }

        if (_$skip != null) {
            queryParameters['$skip'] = _$skip;
        }

        if (_$orderby != null) {
            queryParameters['$orderby'] = _$orderby;
        }

        if (_$filter != null) {
            queryParameters['$filter'] = _$filter;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (_fields != null) {
            headerParameters['X-Fields'] = String(_fields);
        }

        if (_flatten != null) {
            headerParameters['X-Flatten'] = String(_flatten);
        }

        if (_languages != null) {
            headerParameters['X-Languages'] = String(_languages);
        }

        if (_noSlowTotal != null) {
            headerParameters['X-NoSlowTotal'] = String(_noSlowTotal);
        }

        if (_noTotal != null) {
            headerParameters['X-NoTotal'] = String(_noTotal);
        }

        if (_unpublished != null) {
            headerParameters['X-Unpublished'] = String(_unpublished);
        }

        const response = await this.request({
            path: `/api/content/$app$/{schema}`.replace(`{${"schema"}}`, encodeURIComponent(String(_schema))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContentsDtoFromJSON(jsonValue));
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Queries contents.
     */
    async getContents(schema: string, requestParameters: ContentsGetContentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentsDto> {
        const response = await this.getContentsRaw(schema, requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Queries contents.
     */
    async getContentsPostRaw(schema: string, queryDto: QueryDto, requestParameters: ContentsGetContentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentsDto>> {
        const _schema = schema;
        const _queryDto = queryDto;
        const _fields = requestParameters?.['fields'];
        const _flatten = requestParameters?.['flatten'];
        const _languages = requestParameters?.['languages'];
        const _noSlowTotal = requestParameters?.['noSlowTotal'];
        const _noTotal = requestParameters?.['noTotal'];
        const _unpublished = requestParameters?.['unpublished'];

        if (_schema == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (_queryDto == null) {
            throw new runtime.RequiredError(
                'queryDto',
                'Required parameter "queryDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (_fields != null) {
            headerParameters['X-Fields'] = String(_fields);
        }

        if (_flatten != null) {
            headerParameters['X-Flatten'] = String(_flatten);
        }

        if (_languages != null) {
            headerParameters['X-Languages'] = String(_languages);
        }

        if (_noSlowTotal != null) {
            headerParameters['X-NoSlowTotal'] = String(_noSlowTotal);
        }

        if (_noTotal != null) {
            headerParameters['X-NoTotal'] = String(_noTotal);
        }

        if (_unpublished != null) {
            headerParameters['X-Unpublished'] = String(_unpublished);
        }

        const response = await this.request({
            path: `/api/content/$app$/{schema}/query`.replace(`{${"schema"}}`, encodeURIComponent(String(_schema))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: QueryDtoToJSON(_queryDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContentsDtoFromJSON(jsonValue));
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Queries contents.
     */
    async getContentsPost(schema: string, queryDto: QueryDto, requestParameters: ContentsGetContentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentsDto> {
        const response = await this.getContentsPostRaw(schema, queryDto, requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Get all references of a content.
     */
    async getReferencesRaw(schema: string, id: string, requestParameters: ContentsGetReferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentsDto>> {
        const _schema = schema;
        const _id = id;
        const _q = requestParameters?.['q'];
        const _fields = requestParameters?.['fields'];
        const _flatten = requestParameters?.['flatten'];
        const _languages = requestParameters?.['languages'];
        const _unpublished = requestParameters?.['unpublished'];
        const _noSlowTotal = requestParameters?.['noSlowTotal'];
        const _noTotal = requestParameters?.['noTotal'];

        if (_schema == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (_id == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        if (_q != null) {
            queryParameters['q'] = _q;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (_fields != null) {
            headerParameters['X-Fields'] = String(_fields);
        }

        if (_flatten != null) {
            headerParameters['X-Flatten'] = String(_flatten);
        }

        if (_languages != null) {
            headerParameters['X-Languages'] = String(_languages);
        }

        if (_unpublished != null) {
            headerParameters['X-Unpublished'] = String(_unpublished);
        }

        if (_noSlowTotal != null) {
            headerParameters['X-NoSlowTotal'] = String(_noSlowTotal);
        }

        if (_noTotal != null) {
            headerParameters['X-NoTotal'] = String(_noTotal);
        }

        const response = await this.request({
            path: `/api/content/$app$/{schema}/{id}/references`.replace(`{${"schema"}}`, encodeURIComponent(String(_schema))).replace(`{${"id"}}`, encodeURIComponent(String(_id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContentsDtoFromJSON(jsonValue));
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Get all references of a content.
     */
    async getReferences(schema: string, id: string, requestParameters: ContentsGetReferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentsDto> {
        const response = await this.getReferencesRaw(schema, id, requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Get a referencing contents of a content item.
     */
    async getReferencingRaw(schema: string, id: string, requestParameters: ContentsGetReferencingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentsDto>> {
        const _schema = schema;
        const _id = id;
        const _q = requestParameters?.['q'];
        const _fields = requestParameters?.['fields'];
        const _flatten = requestParameters?.['flatten'];
        const _languages = requestParameters?.['languages'];
        const _unpublished = requestParameters?.['unpublished'];
        const _noSlowTotal = requestParameters?.['noSlowTotal'];
        const _noTotal = requestParameters?.['noTotal'];

        if (_schema == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (_id == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        if (_q != null) {
            queryParameters['q'] = _q;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (_fields != null) {
            headerParameters['X-Fields'] = String(_fields);
        }

        if (_flatten != null) {
            headerParameters['X-Flatten'] = String(_flatten);
        }

        if (_languages != null) {
            headerParameters['X-Languages'] = String(_languages);
        }

        if (_unpublished != null) {
            headerParameters['X-Unpublished'] = String(_unpublished);
        }

        if (_noSlowTotal != null) {
            headerParameters['X-NoSlowTotal'] = String(_noSlowTotal);
        }

        if (_noTotal != null) {
            headerParameters['X-NoTotal'] = String(_noTotal);
        }

        const response = await this.request({
            path: `/api/content/$app$/{schema}/{id}/referencing`.replace(`{${"schema"}}`, encodeURIComponent(String(_schema))).replace(`{${"id"}}`, encodeURIComponent(String(_id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContentsDtoFromJSON(jsonValue));
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Get a referencing contents of a content item.
     */
    async getReferencing(schema: string, id: string, requestParameters: ContentsGetReferencingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentsDto> {
        const response = await this.getReferencingRaw(schema, id, requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Patchs a content item.
     */
    async patchContentRaw(schema: string, id: string, requestBody: { [key: string]: { [key: string]: any; }; }, requestParameters: ContentsPatchContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentDto>> {
        const _schema = schema;
        const _id = id;
        const _requestBody = requestBody;
        const _unpublished = requestParameters?.['unpublished'];
        const _languages = requestParameters?.['languages'];

        if (_schema == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (_id == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        if (_requestBody == null) {
            throw new runtime.RequiredError(
                'requestBody',
                'Required parameter "requestBody" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (_unpublished != null) {
            headerParameters['X-Unpublished'] = String(_unpublished);
        }

        if (_languages != null) {
            headerParameters['X-Languages'] = String(_languages);
        }

        const response = await this.request({
            path: `/api/content/$app$/{schema}/{id}`.replace(`{${"schema"}}`, encodeURIComponent(String(_schema))).replace(`{${"id"}}`, encodeURIComponent(String(_id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: _requestBody,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContentDtoFromJSON(jsonValue));
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Patchs a content item.
     */
    async patchContent(schema: string, id: string, requestBody: { [key: string]: { [key: string]: any; }; }, requestParameters: ContentsPatchContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentDto> {
        const response = await this.patchContentRaw(schema, id, requestBody, requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Create a content item.
     */
    async postContentRaw(schema: string, requestBody: { [key: string]: { [key: string]: any; }; }, requestParameters: ContentsPostContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentDto>> {
        const _schema = schema;
        const _requestBody = requestBody;
        const _status = requestParameters?.['status'];
        const _id = requestParameters?.['id'];
        const _publish = requestParameters?.['publish'];
        const _unpublished = requestParameters?.['unpublished'];
        const _languages = requestParameters?.['languages'];

        if (_schema == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (_requestBody == null) {
            throw new runtime.RequiredError(
                'requestBody',
                'Required parameter "requestBody" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        if (_status != null) {
            queryParameters['status'] = _status;
        }

        if (_id != null) {
            queryParameters['id'] = _id;
        }

        if (_publish != null) {
            queryParameters['publish'] = _publish;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (_unpublished != null) {
            headerParameters['X-Unpublished'] = String(_unpublished);
        }

        if (_languages != null) {
            headerParameters['X-Languages'] = String(_languages);
        }

        const response = await this.request({
            path: `/api/content/$app$/{schema}`.replace(`{${"schema"}}`, encodeURIComponent(String(_schema))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: _requestBody,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContentDtoFromJSON(jsonValue));
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Create a content item.
     */
    async postContent(schema: string, requestBody: { [key: string]: { [key: string]: any; }; }, requestParameters: ContentsPostContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentDto> {
        const response = await this.postContentRaw(schema, requestBody, requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Import content items.
     * @deprecated
     */
    async postContentsRaw(schema: string, importContentsDto: ImportContentsDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BulkResultDto>>> {
        const _schema = schema;
        const _importContentsDto = importContentsDto;

        if (_schema == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (_importContentsDto == null) {
            throw new runtime.RequiredError(
                'importContentsDto',
                'Required parameter "importContentsDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/content/$app$/{schema}/import`.replace(`{${"schema"}}`, encodeURIComponent(String(_schema))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ImportContentsDtoToJSON(_importContentsDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BulkResultDtoFromJSON));
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Import content items.
     * @deprecated
     */
    async postContents(schema: string, importContentsDto: ImportContentsDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BulkResultDto>> {
        const response = await this.postContentsRaw(schema, importContentsDto, initOverrides);
        return await response.value();
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Upsert a content item.
     */
    async postUpsertContentRaw(schema: string, id: string, requestBody: { [key: string]: { [key: string]: any; }; }, requestParameters: ContentsPostUpsertContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentDto>> {
        const _schema = schema;
        const _id = id;
        const _requestBody = requestBody;
        const _status = requestParameters?.['status'];
        const _patch = requestParameters?.['patch'];
        const _enrichDefaults = requestParameters?.['enrichDefaults'];
        const _publish = requestParameters?.['publish'];
        const _unpublished = requestParameters?.['unpublished'];
        const _languages = requestParameters?.['languages'];

        if (_schema == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (_id == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        if (_requestBody == null) {
            throw new runtime.RequiredError(
                'requestBody',
                'Required parameter "requestBody" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        if (_status != null) {
            queryParameters['status'] = _status;
        }

        if (_patch != null) {
            queryParameters['patch'] = _patch;
        }

        if (_enrichDefaults != null) {
            queryParameters['enrichDefaults'] = _enrichDefaults;
        }

        if (_publish != null) {
            queryParameters['publish'] = _publish;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (_unpublished != null) {
            headerParameters['X-Unpublished'] = String(_unpublished);
        }

        if (_languages != null) {
            headerParameters['X-Languages'] = String(_languages);
        }

        const response = await this.request({
            path: `/api/content/$app$/{schema}/{id}`.replace(`{${"schema"}}`, encodeURIComponent(String(_schema))).replace(`{${"id"}}`, encodeURIComponent(String(_id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: _requestBody,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContentDtoFromJSON(jsonValue));
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Upsert a content item.
     */
    async postUpsertContent(schema: string, id: string, requestBody: { [key: string]: { [key: string]: any; }; }, requestParameters: ContentsPostUpsertContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentDto> {
        const response = await this.postUpsertContentRaw(schema, id, requestBody, requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Update a content item.
     */
    async putContentRaw(schema: string, id: string, requestBody: { [key: string]: { [key: string]: any; }; }, requestParameters: ContentsPutContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentDto>> {
        const _schema = schema;
        const _id = id;
        const _requestBody = requestBody;
        const _enrichDefaults = requestParameters?.['enrichDefaults'];
        const _unpublished = requestParameters?.['unpublished'];
        const _languages = requestParameters?.['languages'];

        if (_schema == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (_id == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        if (_requestBody == null) {
            throw new runtime.RequiredError(
                'requestBody',
                'Required parameter "requestBody" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        if (_enrichDefaults != null) {
            queryParameters['enrichDefaults'] = _enrichDefaults;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (_unpublished != null) {
            headerParameters['X-Unpublished'] = String(_unpublished);
        }

        if (_languages != null) {
            headerParameters['X-Languages'] = String(_languages);
        }

        const response = await this.request({
            path: `/api/content/$app$/{schema}/{id}`.replace(`{${"schema"}}`, encodeURIComponent(String(_schema))).replace(`{${"id"}}`, encodeURIComponent(String(_id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: _requestBody,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContentDtoFromJSON(jsonValue));
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Update a content item.
     */
    async putContent(schema: string, id: string, requestBody: { [key: string]: { [key: string]: any; }; }, requestParameters: ContentsPutContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentDto> {
        const response = await this.putContentRaw(schema, id, requestBody, requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Enrich a content item with defaults.
     */
    async putContentDefaultsRaw(schema: string, id: string, requestParameters: ContentsPutContentDefaultsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentDto>> {
        const _schema = schema;
        const _id = id;
        const _enrichRequiredFields = requestParameters?.['enrichRequiredFields'];
        const _unpublished = requestParameters?.['unpublished'];
        const _languages = requestParameters?.['languages'];

        if (_schema == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (_id == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        if (_enrichRequiredFields != null) {
            queryParameters['enrichRequiredFields'] = _enrichRequiredFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (_unpublished != null) {
            headerParameters['X-Unpublished'] = String(_unpublished);
        }

        if (_languages != null) {
            headerParameters['X-Languages'] = String(_languages);
        }

        const response = await this.request({
            path: `/api/content/$app$/{schema}/{id}/defaults`.replace(`{${"schema"}}`, encodeURIComponent(String(_schema))).replace(`{${"id"}}`, encodeURIComponent(String(_id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContentDtoFromJSON(jsonValue));
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Enrich a content item with defaults.
     */
    async putContentDefaults(schema: string, id: string, requestParameters: ContentsPutContentDefaultsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentDto> {
        const response = await this.putContentDefaultsRaw(schema, id, requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Change status of a content item.
     */
    async putContentStatusRaw(schema: string, id: string, changeStatusDto: ChangeStatusDto, requestParameters: ContentsPutContentStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentDto>> {
        const _schema = schema;
        const _id = id;
        const _changeStatusDto = changeStatusDto;
        const _unpublished = requestParameters?.['unpublished'];
        const _languages = requestParameters?.['languages'];

        if (_schema == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (_id == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        if (_changeStatusDto == null) {
            throw new runtime.RequiredError(
                'changeStatusDto',
                'Required parameter "changeStatusDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (_unpublished != null) {
            headerParameters['X-Unpublished'] = String(_unpublished);
        }

        if (_languages != null) {
            headerParameters['X-Languages'] = String(_languages);
        }

        const response = await this.request({
            path: `/api/content/$app$/{schema}/{id}/status`.replace(`{${"schema"}}`, encodeURIComponent(String(_schema))).replace(`{${"id"}}`, encodeURIComponent(String(_id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeStatusDtoToJSON(_changeStatusDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContentDtoFromJSON(jsonValue));
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Change status of a content item.
     */
    async putContentStatus(schema: string, id: string, changeStatusDto: ChangeStatusDto, requestParameters: ContentsPutContentStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentDto> {
        const response = await this.putContentStatusRaw(schema, id, changeStatusDto, requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Bulk update content items.
     */
    async bulkUpdateAllContentsRaw(bulkUpdateContentsDto: BulkUpdateContentsDto, requestParameters: ContentsSharedBulkUpdateAllContentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BulkResultDto>>> {
        const _bulkUpdateContentsDto = bulkUpdateContentsDto;
        const _schema = requestParameters?.['schema'];

        if (_bulkUpdateContentsDto == null) {
            throw new runtime.RequiredError(
                'bulkUpdateContentsDto',
                'Required parameter "bulkUpdateContentsDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        if (_schema != null) {
            queryParameters['schema'] = _schema;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/content/$app$/bulk`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BulkUpdateContentsDtoToJSON(_bulkUpdateContentsDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BulkResultDtoFromJSON));
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Bulk update content items.
     */
    async bulkUpdateAllContents(bulkUpdateContentsDto: BulkUpdateContentsDto, requestParameters: ContentsSharedBulkUpdateAllContentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BulkResultDto>> {
        const response = await this.bulkUpdateAllContentsRaw(bulkUpdateContentsDto, requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Queries contents.
     */
    async getAllContentsRaw(requestParameters: ContentsSharedGetAllContentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentsDto>> {
        const _ids = requestParameters?.['ids'];
        const _scheduleFrom = requestParameters?.['scheduleFrom'];
        const _scheduleTo = requestParameters?.['scheduleTo'];
        const _referencing = requestParameters?.['referencing'];
        const _references = requestParameters?.['references'];
        const _q = requestParameters?.['q'];
        const _fields = requestParameters?.['fields'];
        const _flatten = requestParameters?.['flatten'];
        const _languages = requestParameters?.['languages'];
        const _noSlowTotal = requestParameters?.['noSlowTotal'];
        const _noTotal = requestParameters?.['noTotal'];
        const _unpublished = requestParameters?.['unpublished'];

        const queryParameters: any = {};

        if (_ids != null) {
            queryParameters['ids'] = _ids;
        }

        if (_scheduleFrom != null) {
            queryParameters['scheduleFrom'] = (_scheduleFrom as any).toISOString();
        }

        if (_scheduleTo != null) {
            queryParameters['scheduleTo'] = (_scheduleTo as any).toISOString();
        }

        if (_referencing != null) {
            queryParameters['referencing'] = _referencing;
        }

        if (_references != null) {
            queryParameters['references'] = _references;
        }

        if (_q != null) {
            queryParameters['q'] = _q;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (_fields != null) {
            headerParameters['X-Fields'] = String(_fields);
        }

        if (_flatten != null) {
            headerParameters['X-Flatten'] = String(_flatten);
        }

        if (_languages != null) {
            headerParameters['X-Languages'] = String(_languages);
        }

        if (_noSlowTotal != null) {
            headerParameters['X-NoSlowTotal'] = String(_noSlowTotal);
        }

        if (_noTotal != null) {
            headerParameters['X-NoTotal'] = String(_noTotal);
        }

        if (_unpublished != null) {
            headerParameters['X-Unpublished'] = String(_unpublished);
        }

        const response = await this.request({
            path: `/api/content/$app$`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContentsDtoFromJSON(jsonValue));
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Queries contents.
     */
    async getAllContents(requestParameters: ContentsSharedGetAllContentsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentsDto> {
        const response = await this.getAllContentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Queries contents.
     */
    async getAllContentsPostRaw(allContentsByPostDto: AllContentsByPostDto, requestParameters: ContentsSharedGetAllContentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentsDto>> {
        const _allContentsByPostDto = allContentsByPostDto;
        const _fields = requestParameters?.['fields'];
        const _flatten = requestParameters?.['flatten'];
        const _languages = requestParameters?.['languages'];
        const _noSlowTotal = requestParameters?.['noSlowTotal'];
        const _noTotal = requestParameters?.['noTotal'];
        const _unpublished = requestParameters?.['unpublished'];

        if (_allContentsByPostDto == null) {
            throw new runtime.RequiredError(
                'allContentsByPostDto',
                'Required parameter "allContentsByPostDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (_fields != null) {
            headerParameters['X-Fields'] = String(_fields);
        }

        if (_flatten != null) {
            headerParameters['X-Flatten'] = String(_flatten);
        }

        if (_languages != null) {
            headerParameters['X-Languages'] = String(_languages);
        }

        if (_noSlowTotal != null) {
            headerParameters['X-NoSlowTotal'] = String(_noSlowTotal);
        }

        if (_noTotal != null) {
            headerParameters['X-NoTotal'] = String(_noTotal);
        }

        if (_unpublished != null) {
            headerParameters['X-Unpublished'] = String(_unpublished);
        }

        const response = await this.request({
            path: `/api/content/$app$`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AllContentsByPostDtoToJSON(_allContentsByPostDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContentsDtoFromJSON(jsonValue));
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * Queries contents.
     */
    async getAllContentsPost(allContentsByPostDto: AllContentsByPostDto, requestParameters: ContentsSharedGetAllContentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentsDto> {
        const response = await this.getAllContentsPostRaw(allContentsByPostDto, requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * GraphQL endpoint.
     */
    async getGraphQLRaw(requestParameters: ContentsSharedGetGraphQLRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const _theQueryString = requestParameters?.['theQueryString'];
        const _variables = requestParameters?.['variables'];
        const _operationName = requestParameters?.['operationName'];
        const _unpublished = requestParameters?.['unpublished'];

        const queryParameters: any = {};

        if (_theQueryString != null) {
            queryParameters['The query string'] = _theQueryString;
        }

        if (_variables != null) {
            queryParameters['variables'] = _variables;
        }

        if (_operationName != null) {
            queryParameters['operationName'] = _operationName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (_unpublished != null) {
            headerParameters['X-Unpublished'] = String(_unpublished);
        }

        const response = await this.request({
            path: `/api/content/$app$/graphql`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * GraphQL endpoint.
     */
    async getGraphQL(requestParameters: ContentsSharedGetGraphQLRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getGraphQLRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * GraphQL batch endpoint.
     */
    async getGraphQLBatchRaw(requestParameters: ContentsSharedGetGraphQLBatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const _theQueryString = requestParameters?.['theQueryString'];
        const _variables = requestParameters?.['variables'];
        const _operationName = requestParameters?.['operationName'];
        const _unpublished = requestParameters?.['unpublished'];

        const queryParameters: any = {};

        if (_theQueryString != null) {
            queryParameters['The query string'] = _theQueryString;
        }

        if (_variables != null) {
            queryParameters['variables'] = _variables;
        }

        if (_operationName != null) {
            queryParameters['operationName'] = _operationName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (_unpublished != null) {
            headerParameters['X-Unpublished'] = String(_unpublished);
        }

        const response = await this.request({
            path: `/api/content/$app$/graphql/batch`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * GraphQL batch endpoint.
     */
    async getGraphQLBatch(requestParameters: ContentsSharedGetGraphQLBatchRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getGraphQLBatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * GraphQL endpoint.
     */
    async postGraphQLRaw(requestParameters: ContentsSharedPostGraphQLRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const _unpublished = requestParameters?.['unpublished'];
        const _body = requestParameters?.['body'];

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (_unpublished != null) {
            headerParameters['X-Unpublished'] = String(_unpublished);
        }

        const response = await this.request({
            path: `/api/content/$app$/graphql`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: _body as any,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * GraphQL endpoint.
     */
    async postGraphQL(requestParameters: ContentsSharedPostGraphQLRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.postGraphQLRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * GraphQL batch endpoint.
     */
    async postGraphQLBatchRaw(requestParameters: ContentsSharedPostGraphQLBatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const _unpublished = requestParameters?.['unpublished'];
        const _body = requestParameters?.['body'];

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (_unpublished != null) {
            headerParameters['X-Unpublished'] = String(_unpublished);
        }

        const response = await this.request({
            path: `/api/content/$app$/graphql/batch`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: _body as any,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * You can read the generated documentation for your app at /api/content/{appName}/docs.
     * GraphQL batch endpoint.
     */
    async postGraphQLBatch(requestParameters: ContentsSharedPostGraphQLBatchRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.postGraphQLBatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
