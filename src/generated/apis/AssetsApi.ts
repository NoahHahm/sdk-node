/**
 * Squidex API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AnnotateAssetDto,
  AssetDto,
  AssetFolderDto,
  AssetFolderScope,
  AssetFoldersDto,
  AssetsDto,
  BulkResultDto,
  BulkUpdateAssetsDto,
  CreateAssetFolderDto,
  ImageFormat,
  MoveAssetDto,
  MoveAssetFolderDto,
  QueryDto,
  RenameAssetFolderDto,
  RenameTagDto,
  ResizeMode,
} from '../models/index';
import {
    AnnotateAssetDtoToJSON,
    AssetDtoFromJSON,
    AssetFolderDtoFromJSON,
    AssetFoldersDtoFromJSON,
    AssetsDtoFromJSON,
    BulkResultDtoFromJSON,
    BulkUpdateAssetsDtoToJSON,
    CreateAssetFolderDtoToJSON,
    MoveAssetDtoToJSON,
    MoveAssetFolderDtoToJSON,
    QueryDtoToJSON,
    RenameAssetFolderDtoToJSON,
    RenameTagDtoToJSON,
} from '../models/index';

export interface AssetContentGetAssetContentRequest {
    version?: number;
    cache?: number;
    download?: number;
    width?: number | null;
    height?: number | null;
    quality?: number | null;
    mode?: ResizeMode;
    bg?: string | null;
    focusX?: number | null;
    focusY?: number | null;
    nofocus?: boolean;
    auto?: boolean;
    force?: boolean;
    deleted?: boolean;
    format?: ImageFormat;
}

export interface AssetContentGetAssetContentRequestRaw {
    id: string;
    version?: number;
    cache?: number;
    download?: number;
    width?: number | null;
    height?: number | null;
    quality?: number | null;
    mode?: ResizeMode;
    bg?: string | null;
    focusX?: number | null;
    focusY?: number | null;
    nofocus?: boolean;
    auto?: boolean;
    force?: boolean;
    deleted?: boolean;
    format?: ImageFormat;
}

export interface AssetContentGetAssetContentBySlugRequest {
    version?: number;
    cache?: number;
    download?: number;
    width?: number | null;
    height?: number | null;
    quality?: number | null;
    mode?: ResizeMode;
    bg?: string | null;
    focusX?: number | null;
    focusY?: number | null;
    nofocus?: boolean;
    auto?: boolean;
    force?: boolean;
    deleted?: boolean;
    format?: ImageFormat;
}

export interface AssetContentGetAssetContentBySlugRequestRaw {
    idOrSlug: string;
    version?: number;
    cache?: number;
    download?: number;
    width?: number | null;
    height?: number | null;
    quality?: number | null;
    mode?: ResizeMode;
    bg?: string | null;
    focusX?: number | null;
    focusY?: number | null;
    nofocus?: boolean;
    auto?: boolean;
    force?: boolean;
    deleted?: boolean;
    format?: ImageFormat;
}

export interface AssetFoldersDeleteAssetFolderRequestRaw {
    id: string;
}

export interface AssetFoldersGetAssetFoldersRequest {
    parentId?: string | null;
    scope?: AssetFolderScope;
}

export interface AssetFoldersGetAssetFoldersRequestRaw {
    parentId?: string | null;
    scope?: AssetFolderScope;
}

export interface AssetFoldersPostAssetFolderRequestRaw {
    createAssetFolderDto: CreateAssetFolderDto;
}

export interface AssetFoldersPutAssetFolderRequestRaw {
    id: string;
    renameAssetFolderDto: RenameAssetFolderDto;
}

export interface AssetFoldersPutAssetFolderParentRequestRaw {
    id: string;
    moveAssetFolderDto: MoveAssetFolderDto;
}

export interface AssetsBulkUpdateAssetsRequestRaw {
    bulkUpdateAssetsDto: BulkUpdateAssetsDto;
}

export interface AssetsDeleteAssetRequest {
    checkReferrers?: boolean;
    permanent?: boolean;
}

export interface AssetsDeleteAssetRequestRaw {
    id: string;
    checkReferrers?: boolean;
    permanent?: boolean;
}

export interface AssetsGetAssetRequestRaw {
    id: string;
}

export interface AssetsGetAssetsRequest {
    parentId?: string | null;
    ids?: string | null;
    q?: string | null;
    $top?: number;
    $skip?: number;
    $orderby?: string;
    $filter?: string;
    noTotal?: boolean;
    noSlowTotal?: boolean;
}

export interface AssetsGetAssetsRequestRaw {
    parentId?: string | null;
    ids?: string | null;
    q?: string | null;
    $top?: number;
    $skip?: number;
    $orderby?: string;
    $filter?: string;
    noTotal?: boolean;
    noSlowTotal?: boolean;
}

export interface AssetsGetAssetsPostRequest {
    noTotal?: boolean;
    noSlowTotal?: boolean;
}

export interface AssetsGetAssetsPostRequestRaw {
    queryDto: QueryDto;
    noTotal?: boolean;
    noSlowTotal?: boolean;
}

export interface AssetsPostAssetRequest {
    parentId?: string;
    id?: string | null;
    duplicate?: boolean;
    file?: Blob;
    url?: string;
    name?: string;
}

export interface AssetsPostAssetRequestRaw {
    parentId?: string;
    id?: string | null;
    duplicate?: boolean;
    file?: Blob;
    url?: string;
    name?: string;
}

export interface AssetsPostUpsertAssetRequest {
    parentId?: string;
    duplicate?: boolean;
    file?: Blob;
    url?: string;
    name?: string;
}

export interface AssetsPostUpsertAssetRequestRaw {
    id: string;
    parentId?: string;
    duplicate?: boolean;
    file?: Blob;
    url?: string;
    name?: string;
}

export interface AssetsPutAssetRequestRaw {
    id: string;
    annotateAssetDto: AnnotateAssetDto;
}

export interface AssetsPutAssetContentRequest {
    file?: Blob;
    url?: string;
    name?: string;
}

export interface AssetsPutAssetContentRequestRaw {
    id: string;
    file?: Blob;
    url?: string;
    name?: string;
}

export interface AssetsPutAssetParentRequestRaw {
    id: string;
    moveAssetDto: MoveAssetDto;
}

export interface AssetsPutTagRequestRaw {
    name: string;
    renameTagDto: RenameTagDto;
}

/**
 * AssetsApi - interface
 * 
 * @export
 * @interface AssetsApiInterface
 */
export interface AssetsApiInterface {
    /**
     * 
     * @summary Get the asset content.
     * @param {string} id The ID of the asset.
     * @param {number} [version] The optional version of the asset.
     * @param {number} [cache] The cache duration in seconds.
     * @param {number} [download] Set it to 0 to prevent download.
     * @param {number} [width] The target width of the asset, if it is an image.
     * @param {number} [height] The target height of the asset, if it is an image.
     * @param {number} [quality] Optional image quality, it is is an jpeg image.
     * @param {ResizeMode} [mode] The resize mode when the width and height is defined.
     * @param {string} [bg] Optional background color.
     * @param {number} [focusX] Override the y focus point.
     * @param {number} [focusY] Override the x focus point.
     * @param {boolean} [nofocus] True to ignore the asset focus point if any.
     * @param {boolean} [auto] True to use auto format.
     * @param {boolean} [force] True to force a new resize even if it already stored.
     * @param {boolean} [deleted] Also return deleted content items.
     * @param {ImageFormat} [format] True to force a new resize even if it already stored.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof AssetsApiInterface
     */
    getAssetContentRaw(id: string, requestParameters?: AssetContentGetAssetContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>>;

    /**
     * Get the asset content.
     * @deprecated
     */
    getAssetContent(id: string, requestParameters?: AssetContentGetAssetContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob>;

    /**
     * 
     * @summary Get the asset content.
     * @param {string} idOrSlug The id or slug of the asset.
     * @param {number} [version] The optional version of the asset.
     * @param {number} [cache] The cache duration in seconds.
     * @param {number} [download] Set it to 0 to prevent download.
     * @param {number} [width] The target width of the asset, if it is an image.
     * @param {number} [height] The target height of the asset, if it is an image.
     * @param {number} [quality] Optional image quality, it is is an jpeg image.
     * @param {ResizeMode} [mode] The resize mode when the width and height is defined.
     * @param {string} [bg] Optional background color.
     * @param {number} [focusX] Override the y focus point.
     * @param {number} [focusY] Override the x focus point.
     * @param {boolean} [nofocus] True to ignore the asset focus point if any.
     * @param {boolean} [auto] True to use auto format.
     * @param {boolean} [force] True to force a new resize even if it already stored.
     * @param {boolean} [deleted] Also return deleted content items.
     * @param {ImageFormat} [format] True to force a new resize even if it already stored.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApiInterface
     */
    getAssetContentBySlugRaw(idOrSlug: string, requestParameters?: AssetContentGetAssetContentBySlugRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>>;

    /**
     * Get the asset content.
     */
    getAssetContentBySlug(idOrSlug: string, requestParameters?: AssetContentGetAssetContentBySlugRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob>;

    /**
     * 
     * @summary Delete an asset folder.
     * @param {string} id The ID of the asset folder to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApiInterface
     */
    deleteAssetFolderRaw(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete an asset folder.
     */
    deleteAssetFolder(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Get all asset folders for the app.
     * @summary Get asset folders.
     * @param {string} [parentId] The optional parent folder id.
     * @param {AssetFolderScope} [scope] The scope of the query.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApiInterface
     */
    getAssetFoldersRaw(requestParameters?: AssetFoldersGetAssetFoldersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetFoldersDto>>;

    /**
     * Get all asset folders for the app.
     * Get asset folders.
     */
    getAssetFolders(requestParameters?: AssetFoldersGetAssetFoldersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetFoldersDto>;

    /**
     * 
     * @summary Create an asset folder.
     * @param {CreateAssetFolderDto} createAssetFolderDto The asset folder object that needs to be added to the App.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApiInterface
     */
    postAssetFolderRaw(createAssetFolderDto: CreateAssetFolderDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetFolderDto>>;

    /**
     * Create an asset folder.
     */
    postAssetFolder(createAssetFolderDto: CreateAssetFolderDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetFolderDto>;

    /**
     * 
     * @summary Update an asset folder.
     * @param {string} id The ID of the asset folder.
     * @param {RenameAssetFolderDto} renameAssetFolderDto The asset folder object that needs to updated.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApiInterface
     */
    putAssetFolderRaw(id: string, renameAssetFolderDto: RenameAssetFolderDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetFolderDto>>;

    /**
     * Update an asset folder.
     */
    putAssetFolder(id: string, renameAssetFolderDto: RenameAssetFolderDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetFolderDto>;

    /**
     * 
     * @summary Move an asset folder.
     * @param {string} id The ID of the asset folder.
     * @param {MoveAssetFolderDto} moveAssetFolderDto The asset folder object that needs to updated.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApiInterface
     */
    putAssetFolderParentRaw(id: string, moveAssetFolderDto: MoveAssetFolderDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetFolderDto>>;

    /**
     * Move an asset folder.
     */
    putAssetFolderParent(id: string, moveAssetFolderDto: MoveAssetFolderDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetFolderDto>;

    /**
     * 
     * @summary Bulk update assets.
     * @param {BulkUpdateAssetsDto} bulkUpdateAssetsDto The bulk update request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApiInterface
     */
    bulkUpdateAssetsRaw(bulkUpdateAssetsDto: BulkUpdateAssetsDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BulkResultDto>>>;

    /**
     * Bulk update assets.
     */
    bulkUpdateAssets(bulkUpdateAssetsDto: BulkUpdateAssetsDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BulkResultDto>>;

    /**
     * 
     * @summary Delete an asset.
     * @param {string} id The ID of the asset to delete.
     * @param {boolean} [checkReferrers] True to check referrers of this asset.
     * @param {boolean} [permanent] True to delete the asset permanently.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApiInterface
     */
    deleteAssetRaw(id: string, requestParameters?: AssetsDeleteAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete an asset.
     */
    deleteAsset(id: string, requestParameters?: AssetsDeleteAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Get an asset by id.
     * @param {string} id The ID of the asset to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApiInterface
     */
    getAssetRaw(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetDto>>;

    /**
     * Get an asset by id.
     */
    getAsset(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetDto>;

    /**
     * Get all assets for the app.
     * @summary Get assets.
     * @param {string} [parentId] The optional parent folder id.
     * @param {string} [ids] The optional asset ids.
     * @param {string} [q] The optional json query.
     * @param {number} [$top] Optional number of items to take.
     * @param {number} [$skip] Optional number of items to skip.
     * @param {string} [$orderby] Optional OData order definition.
     * @param {string} [$filter] Optional OData filter.
     * @param {boolean} [noTotal] Do not return the total amount.
     * @param {boolean} [noSlowTotal] Do not return the total amount, if it would be slow.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApiInterface
     */
    getAssetsRaw(requestParameters?: AssetsGetAssetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetsDto>>;

    /**
     * Get all assets for the app.
     * Get assets.
     */
    getAssets(requestParameters?: AssetsGetAssetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetsDto>;

    /**
     * Get all assets for the app.
     * @summary Get assets.
     * @param {QueryDto} queryDto The required query object.
     * @param {boolean} [noTotal] Do not return the total amount.
     * @param {boolean} [noSlowTotal] Do not return the total amount, if it would be slow.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApiInterface
     */
    getAssetsPostRaw(queryDto: QueryDto, requestParameters?: AssetsGetAssetsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetsDto>>;

    /**
     * Get all assets for the app.
     * Get assets.
     */
    getAssetsPost(queryDto: QueryDto, requestParameters?: AssetsGetAssetsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetsDto>;

    /**
     * Get all tags for assets.
     * @summary Get assets tags.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApiInterface
     */
    getTagsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: number; }>>;

    /**
     * Get all tags for assets.
     * Get assets tags.
     */
    getTags(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: number; }>;

    /**
     * You can only upload one file at a time. The mime type of the file is not calculated by Squidex and is required correctly.
     * @summary Upload a new asset.
     * @param {string} [parentId] The optional parent folder id.
     * @param {string} [id] The optional custom asset id.
     * @param {boolean} [duplicate] True to duplicate the asset, event if the file has been uploaded.
     * @param {Blob} [file] 
     * @param {string} [url] 
     * @param {string} [name] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApiInterface
     */
    postAssetRaw(requestParameters?: AssetsPostAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetDto>>;

    /**
     * You can only upload one file at a time. The mime type of the file is not calculated by Squidex and is required correctly.
     * Upload a new asset.
     */
    postAsset(requestParameters?: AssetsPostAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetDto>;

    /**
     * You can only upload one file at a time. The mime type of the file is not calculated by Squidex and is required correctly.
     * @summary Upsert an asset.
     * @param {string} id The optional custom asset id.
     * @param {string} [parentId] The optional parent folder id.
     * @param {boolean} [duplicate] True to duplicate the asset, event if the file has been uploaded.
     * @param {Blob} [file] 
     * @param {string} [url] 
     * @param {string} [name] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApiInterface
     */
    postUpsertAssetRaw(id: string, requestParameters?: AssetsPostUpsertAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetDto>>;

    /**
     * You can only upload one file at a time. The mime type of the file is not calculated by Squidex and is required correctly.
     * Upsert an asset.
     */
    postUpsertAsset(id: string, requestParameters?: AssetsPostUpsertAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetDto>;

    /**
     * 
     * @summary Update an asset.
     * @param {string} id The ID of the asset.
     * @param {AnnotateAssetDto} annotateAssetDto The asset object that needs to updated.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApiInterface
     */
    putAssetRaw(id: string, annotateAssetDto: AnnotateAssetDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetDto>>;

    /**
     * Update an asset.
     */
    putAsset(id: string, annotateAssetDto: AnnotateAssetDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetDto>;

    /**
     * Use multipart request to upload an asset.
     * @summary Replace asset content.
     * @param {string} id The ID of the asset.
     * @param {Blob} [file] 
     * @param {string} [url] 
     * @param {string} [name] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApiInterface
     */
    putAssetContentRaw(id: string, requestParameters?: AssetsPutAssetContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetDto>>;

    /**
     * Use multipart request to upload an asset.
     * Replace asset content.
     */
    putAssetContent(id: string, requestParameters?: AssetsPutAssetContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetDto>;

    /**
     * 
     * @summary Moves the asset.
     * @param {string} id The ID of the asset.
     * @param {MoveAssetDto} moveAssetDto The asset object that needs to updated.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApiInterface
     */
    putAssetParentRaw(id: string, moveAssetDto: MoveAssetDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetDto>>;

    /**
     * Moves the asset.
     */
    putAssetParent(id: string, moveAssetDto: MoveAssetDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetDto>;

    /**
     * 
     * @summary Rename an asset tag.
     * @param {string} name The tag to return.
     * @param {RenameTagDto} renameTagDto The required request object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApiInterface
     */
    putTagRaw(name: string, renameTagDto: RenameTagDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: number; }>>;

    /**
     * Rename an asset tag.
     */
    putTag(name: string, renameTagDto: RenameTagDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: number; }>;

}

/**
 * 
 */
export class AssetsApi extends runtime.BaseAPI implements AssetsApiInterface {

    /**
     * Get the asset content.
     * @deprecated
     */
    async getAssetContentRaw(id: string, requestParameters: AssetContentGetAssetContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        const _id = id;
        const _version = requestParameters?.['version'];
        const _cache = requestParameters?.['cache'];
        const _download = requestParameters?.['download'];
        const _width = requestParameters?.['width'];
        const _height = requestParameters?.['height'];
        const _quality = requestParameters?.['quality'];
        const _mode = requestParameters?.['mode'];
        const _bg = requestParameters?.['bg'];
        const _focusX = requestParameters?.['focusX'];
        const _focusY = requestParameters?.['focusY'];
        const _nofocus = requestParameters?.['nofocus'];
        const _auto = requestParameters?.['auto'];
        const _force = requestParameters?.['force'];
        const _deleted = requestParameters?.['deleted'];
        const _format = requestParameters?.['format'];

        if (_id == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        if (_version != null) {
            queryParameters['version'] = _version;
        }

        if (_cache != null) {
            queryParameters['cache'] = _cache;
        }

        if (_download != null) {
            queryParameters['download'] = _download;
        }

        if (_width != null) {
            queryParameters['width'] = _width;
        }

        if (_height != null) {
            queryParameters['height'] = _height;
        }

        if (_quality != null) {
            queryParameters['quality'] = _quality;
        }

        if (_mode != null) {
            queryParameters['mode'] = _mode;
        }

        if (_bg != null) {
            queryParameters['bg'] = _bg;
        }

        if (_focusX != null) {
            queryParameters['focusX'] = _focusX;
        }

        if (_focusY != null) {
            queryParameters['focusY'] = _focusY;
        }

        if (_nofocus != null) {
            queryParameters['nofocus'] = _nofocus;
        }

        if (_auto != null) {
            queryParameters['auto'] = _auto;
        }

        if (_force != null) {
            queryParameters['force'] = _force;
        }

        if (_deleted != null) {
            queryParameters['deleted'] = _deleted;
        }

        if (_format != null) {
            queryParameters['format'] = _format;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/assets/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(_id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Get the asset content.
     * @deprecated
     */
    async getAssetContent(id: string, requestParameters: AssetContentGetAssetContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.getAssetContentRaw(id, requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the asset content.
     */
    async getAssetContentBySlugRaw(idOrSlug: string, requestParameters: AssetContentGetAssetContentBySlugRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        const _idOrSlug = idOrSlug;
        const _version = requestParameters?.['version'];
        const _cache = requestParameters?.['cache'];
        const _download = requestParameters?.['download'];
        const _width = requestParameters?.['width'];
        const _height = requestParameters?.['height'];
        const _quality = requestParameters?.['quality'];
        const _mode = requestParameters?.['mode'];
        const _bg = requestParameters?.['bg'];
        const _focusX = requestParameters?.['focusX'];
        const _focusY = requestParameters?.['focusY'];
        const _nofocus = requestParameters?.['nofocus'];
        const _auto = requestParameters?.['auto'];
        const _force = requestParameters?.['force'];
        const _deleted = requestParameters?.['deleted'];
        const _format = requestParameters?.['format'];

        if (_idOrSlug == null) {
            throw new runtime.RequiredError(
                'idOrSlug',
                'Required parameter "idOrSlug" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        if (_version != null) {
            queryParameters['version'] = _version;
        }

        if (_cache != null) {
            queryParameters['cache'] = _cache;
        }

        if (_download != null) {
            queryParameters['download'] = _download;
        }

        if (_width != null) {
            queryParameters['width'] = _width;
        }

        if (_height != null) {
            queryParameters['height'] = _height;
        }

        if (_quality != null) {
            queryParameters['quality'] = _quality;
        }

        if (_mode != null) {
            queryParameters['mode'] = _mode;
        }

        if (_bg != null) {
            queryParameters['bg'] = _bg;
        }

        if (_focusX != null) {
            queryParameters['focusX'] = _focusX;
        }

        if (_focusY != null) {
            queryParameters['focusY'] = _focusY;
        }

        if (_nofocus != null) {
            queryParameters['nofocus'] = _nofocus;
        }

        if (_auto != null) {
            queryParameters['auto'] = _auto;
        }

        if (_force != null) {
            queryParameters['force'] = _force;
        }

        if (_deleted != null) {
            queryParameters['deleted'] = _deleted;
        }

        if (_format != null) {
            queryParameters['format'] = _format;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/assets/$app$/{idOrSlug}/`.replace(`{${"idOrSlug"}}`, encodeURIComponent(String(_idOrSlug))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Get the asset content.
     */
    async getAssetContentBySlug(idOrSlug: string, requestParameters: AssetContentGetAssetContentBySlugRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.getAssetContentBySlugRaw(idOrSlug, requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an asset folder.
     */
    async deleteAssetFolderRaw(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const _id = id;

        if (_id == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/$app$/assets/folders/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(_id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an asset folder.
     */
    async deleteAssetFolder(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteAssetFolderRaw(id, initOverrides);
    }

    /**
     * Get all asset folders for the app.
     * Get asset folders.
     */
    async getAssetFoldersRaw(requestParameters: AssetFoldersGetAssetFoldersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetFoldersDto>> {
        const _parentId = requestParameters?.['parentId'];
        const _scope = requestParameters?.['scope'];

        const queryParameters: any = {};

        if (_parentId != null) {
            queryParameters['parentId'] = _parentId;
        }

        if (_scope != null) {
            queryParameters['scope'] = _scope;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/$app$/assets/folders`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetFoldersDtoFromJSON(jsonValue));
    }

    /**
     * Get all asset folders for the app.
     * Get asset folders.
     */
    async getAssetFolders(requestParameters: AssetFoldersGetAssetFoldersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetFoldersDto> {
        const response = await this.getAssetFoldersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create an asset folder.
     */
    async postAssetFolderRaw(createAssetFolderDto: CreateAssetFolderDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetFolderDto>> {
        const _createAssetFolderDto = createAssetFolderDto;

        if (_createAssetFolderDto == null) {
            throw new runtime.RequiredError(
                'createAssetFolderDto',
                'Required parameter "createAssetFolderDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/apps/$app$/assets/folders`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateAssetFolderDtoToJSON(_createAssetFolderDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetFolderDtoFromJSON(jsonValue));
    }

    /**
     * Create an asset folder.
     */
    async postAssetFolder(createAssetFolderDto: CreateAssetFolderDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetFolderDto> {
        const response = await this.postAssetFolderRaw(createAssetFolderDto, initOverrides);
        return await response.value();
    }

    /**
     * Update an asset folder.
     */
    async putAssetFolderRaw(id: string, renameAssetFolderDto: RenameAssetFolderDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetFolderDto>> {
        const _id = id;
        const _renameAssetFolderDto = renameAssetFolderDto;

        if (_id == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        if (_renameAssetFolderDto == null) {
            throw new runtime.RequiredError(
                'renameAssetFolderDto',
                'Required parameter "renameAssetFolderDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/apps/$app$/assets/folders/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(_id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RenameAssetFolderDtoToJSON(_renameAssetFolderDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetFolderDtoFromJSON(jsonValue));
    }

    /**
     * Update an asset folder.
     */
    async putAssetFolder(id: string, renameAssetFolderDto: RenameAssetFolderDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetFolderDto> {
        const response = await this.putAssetFolderRaw(id, renameAssetFolderDto, initOverrides);
        return await response.value();
    }

    /**
     * Move an asset folder.
     */
    async putAssetFolderParentRaw(id: string, moveAssetFolderDto: MoveAssetFolderDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetFolderDto>> {
        const _id = id;
        const _moveAssetFolderDto = moveAssetFolderDto;

        if (_id == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        if (_moveAssetFolderDto == null) {
            throw new runtime.RequiredError(
                'moveAssetFolderDto',
                'Required parameter "moveAssetFolderDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/apps/$app$/assets/folders/{id}/parent`.replace(`{${"id"}}`, encodeURIComponent(String(_id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MoveAssetFolderDtoToJSON(_moveAssetFolderDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetFolderDtoFromJSON(jsonValue));
    }

    /**
     * Move an asset folder.
     */
    async putAssetFolderParent(id: string, moveAssetFolderDto: MoveAssetFolderDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetFolderDto> {
        const response = await this.putAssetFolderParentRaw(id, moveAssetFolderDto, initOverrides);
        return await response.value();
    }

    /**
     * Bulk update assets.
     */
    async bulkUpdateAssetsRaw(bulkUpdateAssetsDto: BulkUpdateAssetsDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BulkResultDto>>> {
        const _bulkUpdateAssetsDto = bulkUpdateAssetsDto;

        if (_bulkUpdateAssetsDto == null) {
            throw new runtime.RequiredError(
                'bulkUpdateAssetsDto',
                'Required parameter "bulkUpdateAssetsDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/apps/$app$/assets/bulk`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BulkUpdateAssetsDtoToJSON(_bulkUpdateAssetsDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BulkResultDtoFromJSON));
    }

    /**
     * Bulk update assets.
     */
    async bulkUpdateAssets(bulkUpdateAssetsDto: BulkUpdateAssetsDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BulkResultDto>> {
        const response = await this.bulkUpdateAssetsRaw(bulkUpdateAssetsDto, initOverrides);
        return await response.value();
    }

    /**
     * Delete an asset.
     */
    async deleteAssetRaw(id: string, requestParameters: AssetsDeleteAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const _id = id;
        const _checkReferrers = requestParameters?.['checkReferrers'];
        const _permanent = requestParameters?.['permanent'];

        if (_id == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        if (_checkReferrers != null) {
            queryParameters['checkReferrers'] = _checkReferrers;
        }

        if (_permanent != null) {
            queryParameters['permanent'] = _permanent;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/$app$/assets/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(_id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an asset.
     */
    async deleteAsset(id: string, requestParameters: AssetsDeleteAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteAssetRaw(id, requestParameters, initOverrides);
    }

    /**
     * Get an asset by id.
     */
    async getAssetRaw(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetDto>> {
        const _id = id;

        if (_id == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/$app$/assets/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(_id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetDtoFromJSON(jsonValue));
    }

    /**
     * Get an asset by id.
     */
    async getAsset(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetDto> {
        const response = await this.getAssetRaw(id, initOverrides);
        return await response.value();
    }

    /**
     * Get all assets for the app.
     * Get assets.
     */
    async getAssetsRaw(requestParameters: AssetsGetAssetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetsDto>> {
        const _parentId = requestParameters?.['parentId'];
        const _ids = requestParameters?.['ids'];
        const _q = requestParameters?.['q'];
        const _$top = requestParameters?.['$top'];
        const _$skip = requestParameters?.['$skip'];
        const _$orderby = requestParameters?.['$orderby'];
        const _$filter = requestParameters?.['$filter'];
        const _noTotal = requestParameters?.['noTotal'];
        const _noSlowTotal = requestParameters?.['noSlowTotal'];

        const queryParameters: any = {};

        if (_parentId != null) {
            queryParameters['parentId'] = _parentId;
        }

        if (_ids != null) {
            queryParameters['ids'] = _ids;
        }

        if (_q != null) {
            queryParameters['q'] = _q;
        }

        if (_$top != null) {
            queryParameters['$top'] = _$top;
        }

        if (_$skip != null) {
            queryParameters['$skip'] = _$skip;
        }

        if (_$orderby != null) {
            queryParameters['$orderby'] = _$orderby;
        }

        if (_$filter != null) {
            queryParameters['$filter'] = _$filter;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (_noTotal != null) {
            headerParameters['X-NoTotal'] = String(_noTotal);
        }

        if (_noSlowTotal != null) {
            headerParameters['X-NoSlowTotal'] = String(_noSlowTotal);
        }

        const response = await this.request({
            path: `/api/apps/$app$/assets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetsDtoFromJSON(jsonValue));
    }

    /**
     * Get all assets for the app.
     * Get assets.
     */
    async getAssets(requestParameters: AssetsGetAssetsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetsDto> {
        const response = await this.getAssetsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all assets for the app.
     * Get assets.
     */
    async getAssetsPostRaw(queryDto: QueryDto, requestParameters: AssetsGetAssetsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetsDto>> {
        const _queryDto = queryDto;
        const _noTotal = requestParameters?.['noTotal'];
        const _noSlowTotal = requestParameters?.['noSlowTotal'];

        if (_queryDto == null) {
            throw new runtime.RequiredError(
                'queryDto',
                'Required parameter "queryDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (_noTotal != null) {
            headerParameters['X-NoTotal'] = String(_noTotal);
        }

        if (_noSlowTotal != null) {
            headerParameters['X-NoSlowTotal'] = String(_noSlowTotal);
        }

        const response = await this.request({
            path: `/api/apps/$app$/assets/query`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: QueryDtoToJSON(_queryDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetsDtoFromJSON(jsonValue));
    }

    /**
     * Get all assets for the app.
     * Get assets.
     */
    async getAssetsPost(queryDto: QueryDto, requestParameters: AssetsGetAssetsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetsDto> {
        const response = await this.getAssetsPostRaw(queryDto, requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all tags for assets.
     * Get assets tags.
     */
    async getTagsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: number; }>> {

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/$app$/assets/tags`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get all tags for assets.
     * Get assets tags.
     */
    async getTags(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: number; }> {
        const response = await this.getTagsRaw(initOverrides);
        return await response.value();
    }

    /**
     * You can only upload one file at a time. The mime type of the file is not calculated by Squidex and is required correctly.
     * Upload a new asset.
     */
    async postAssetRaw(requestParameters: AssetsPostAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetDto>> {
        const _parentId = requestParameters?.['parentId'];
        const _id = requestParameters?.['id'];
        const _duplicate = requestParameters?.['duplicate'];
        const _file = requestParameters?.['file'];
        const _url = requestParameters?.['url'];
        const _name = requestParameters?.['name'];

        const queryParameters: any = {};

        if (_parentId != null) {
            queryParameters['ParentId'] = _parentId;
        }

        if (_id != null) {
            queryParameters['id'] = _id;
        }

        if (_duplicate != null) {
            queryParameters['duplicate'] = _duplicate;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (_file != null) {
            formParams.append('file', _file as any);
        }

        if (_url != null) {
            formParams.append('url', _url as any);
        }

        if (_name != null) {
            formParams.append('name', _name as any);
        }

        const response = await this.request({
            path: `/api/apps/$app$/assets`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetDtoFromJSON(jsonValue));
    }

    /**
     * You can only upload one file at a time. The mime type of the file is not calculated by Squidex and is required correctly.
     * Upload a new asset.
     */
    async postAsset(requestParameters: AssetsPostAssetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetDto> {
        const response = await this.postAssetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can only upload one file at a time. The mime type of the file is not calculated by Squidex and is required correctly.
     * Upsert an asset.
     */
    async postUpsertAssetRaw(id: string, requestParameters: AssetsPostUpsertAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetDto>> {
        const _id = id;
        const _parentId = requestParameters?.['parentId'];
        const _duplicate = requestParameters?.['duplicate'];
        const _file = requestParameters?.['file'];
        const _url = requestParameters?.['url'];
        const _name = requestParameters?.['name'];

        if (_id == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        if (_parentId != null) {
            queryParameters['parentId'] = _parentId;
        }

        if (_duplicate != null) {
            queryParameters['duplicate'] = _duplicate;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (_file != null) {
            formParams.append('file', _file as any);
        }

        if (_url != null) {
            formParams.append('url', _url as any);
        }

        if (_name != null) {
            formParams.append('name', _name as any);
        }

        const response = await this.request({
            path: `/api/apps/$app$/assets/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(_id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetDtoFromJSON(jsonValue));
    }

    /**
     * You can only upload one file at a time. The mime type of the file is not calculated by Squidex and is required correctly.
     * Upsert an asset.
     */
    async postUpsertAsset(id: string, requestParameters: AssetsPostUpsertAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetDto> {
        const response = await this.postUpsertAssetRaw(id, requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an asset.
     */
    async putAssetRaw(id: string, annotateAssetDto: AnnotateAssetDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetDto>> {
        const _id = id;
        const _annotateAssetDto = annotateAssetDto;

        if (_id == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        if (_annotateAssetDto == null) {
            throw new runtime.RequiredError(
                'annotateAssetDto',
                'Required parameter "annotateAssetDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/apps/$app$/assets/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(_id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AnnotateAssetDtoToJSON(_annotateAssetDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetDtoFromJSON(jsonValue));
    }

    /**
     * Update an asset.
     */
    async putAsset(id: string, annotateAssetDto: AnnotateAssetDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetDto> {
        const response = await this.putAssetRaw(id, annotateAssetDto, initOverrides);
        return await response.value();
    }

    /**
     * Use multipart request to upload an asset.
     * Replace asset content.
     */
    async putAssetContentRaw(id: string, requestParameters: AssetsPutAssetContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetDto>> {
        const _id = id;
        const _file = requestParameters?.['file'];
        const _url = requestParameters?.['url'];
        const _name = requestParameters?.['name'];

        if (_id == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (_file != null) {
            formParams.append('file', _file as any);
        }

        if (_url != null) {
            formParams.append('url', _url as any);
        }

        if (_name != null) {
            formParams.append('name', _name as any);
        }

        const response = await this.request({
            path: `/api/apps/$app$/assets/{id}/content`.replace(`{${"id"}}`, encodeURIComponent(String(_id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetDtoFromJSON(jsonValue));
    }

    /**
     * Use multipart request to upload an asset.
     * Replace asset content.
     */
    async putAssetContent(id: string, requestParameters: AssetsPutAssetContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetDto> {
        const response = await this.putAssetContentRaw(id, requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Moves the asset.
     */
    async putAssetParentRaw(id: string, moveAssetDto: MoveAssetDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetDto>> {
        const _id = id;
        const _moveAssetDto = moveAssetDto;

        if (_id == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        if (_moveAssetDto == null) {
            throw new runtime.RequiredError(
                'moveAssetDto',
                'Required parameter "moveAssetDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/apps/$app$/assets/{id}/parent`.replace(`{${"id"}}`, encodeURIComponent(String(_id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MoveAssetDtoToJSON(_moveAssetDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetDtoFromJSON(jsonValue));
    }

    /**
     * Moves the asset.
     */
    async putAssetParent(id: string, moveAssetDto: MoveAssetDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetDto> {
        const response = await this.putAssetParentRaw(id, moveAssetDto, initOverrides);
        return await response.value();
    }

    /**
     * Rename an asset tag.
     */
    async putTagRaw(name: string, renameTagDto: RenameTagDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: number; }>> {
        const _name = name;
        const _renameTagDto = renameTagDto;

        if (_name == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling ().'
            );
        }

        if (_renameTagDto == null) {
            throw new runtime.RequiredError(
                'renameTagDto',
                'Required parameter "renameTagDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/apps/$app$/assets/tags/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(_name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RenameTagDtoToJSON(_renameTagDto),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Rename an asset tag.
     */
    async putTag(name: string, renameTagDto: RenameTagDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: number; }> {
        const response = await this.putTagRaw(name, renameTagDto, initOverrides);
        return await response.value();
    }

}
