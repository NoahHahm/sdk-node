/* tslint:disable */
/* eslint-disable */
/**
 * Squidex API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AnnotateAssetDto,
  AssetDto,
  AssetFolderDto,
  AssetFolderScope,
  AssetFoldersDto,
  AssetsDto,
  BulkResultDto,
  BulkUpdateAssetsDto,
  CreateAssetFolderDto,
  ErrorDto,
  ImageFormat,
  MoveAssetDto,
  MoveAssetFolderDto,
  QueryDto,
  RenameAssetFolderDto,
  RenameTagDto,
  ResizeMode,
} from '../models/index';
import {
    AnnotateAssetDtoFromJSON,
    AnnotateAssetDtoToJSON,
    AssetDtoFromJSON,
    AssetDtoToJSON,
    AssetFolderDtoFromJSON,
    AssetFolderDtoToJSON,
    AssetFolderScopeFromJSON,
    AssetFolderScopeToJSON,
    AssetFoldersDtoFromJSON,
    AssetFoldersDtoToJSON,
    AssetsDtoFromJSON,
    AssetsDtoToJSON,
    BulkResultDtoFromJSON,
    BulkResultDtoToJSON,
    BulkUpdateAssetsDtoFromJSON,
    BulkUpdateAssetsDtoToJSON,
    CreateAssetFolderDtoFromJSON,
    CreateAssetFolderDtoToJSON,
    ErrorDtoFromJSON,
    ErrorDtoToJSON,
    ImageFormatFromJSON,
    ImageFormatToJSON,
    MoveAssetDtoFromJSON,
    MoveAssetDtoToJSON,
    MoveAssetFolderDtoFromJSON,
    MoveAssetFolderDtoToJSON,
    QueryDtoFromJSON,
    QueryDtoToJSON,
    RenameAssetFolderDtoFromJSON,
    RenameAssetFolderDtoToJSON,
    RenameTagDtoFromJSON,
    RenameTagDtoToJSON,
    ResizeModeFromJSON,
    ResizeModeToJSON,
} from '../models/index';

export interface AssetContentGetAssetContentRequest {
    id: string;
    version?: number;
    cache?: number;
    download?: number;
    width?: number | null;
    height?: number | null;
    quality?: number | null;
    mode?: ResizeMode;
    bg?: string | null;
    focusX?: number | null;
    focusY?: number | null;
    nofocus?: boolean;
    auto?: boolean;
    force?: boolean;
    deleted?: boolean;
    format?: ImageFormat;
}

export interface AssetContentGetAssetContentBySlugRequest {
    idOrSlug: string;
    more: string;
    version?: number;
    cache?: number;
    download?: number;
    width?: number | null;
    height?: number | null;
    quality?: number | null;
    mode?: ResizeMode;
    bg?: string | null;
    focusX?: number | null;
    focusY?: number | null;
    nofocus?: boolean;
    auto?: boolean;
    force?: boolean;
    deleted?: boolean;
    format?: ImageFormat;
}

export interface AssetFoldersDeleteAssetFolderRequest {
    id: string;
}

export interface AssetFoldersGetAssetFoldersRequest {
    parentId?: string | null;
    scope?: AssetFolderScope;
}

export interface AssetFoldersPostAssetFolderRequest {
    createAssetFolderDto: CreateAssetFolderDto;
}

export interface AssetFoldersPutAssetFolderRequest {
    id: string;
    renameAssetFolderDto: RenameAssetFolderDto;
}

export interface AssetFoldersPutAssetFolderParentRequest {
    id: string;
    moveAssetFolderDto: MoveAssetFolderDto;
}

export interface AssetsBulkUpdateAssetsRequest {
    bulkUpdateAssetsDto: BulkUpdateAssetsDto;
}

export interface AssetsDeleteAssetRequest {
    id: string;
    checkReferrers?: boolean;
    permanent?: boolean;
}

export interface AssetsGetAssetRequest {
    id: string;
}

export interface AssetsGetAssetsRequest {
    parentId?: string | null;
    ids?: string | null;
    q?: string | null;
    $top?: number;
    $skip?: number;
    $orderby?: string;
    $filter?: string;
    xNoTotal?: boolean;
    xNoSlowTotal?: boolean;
}

export interface AssetsGetAssetsPostRequest {
    queryDto: QueryDto;
    xNoTotal?: boolean;
    xNoSlowTotal?: boolean;
}

export interface AssetsGetTagsRequest {
}

export interface AssetsPostAssetRequest {
    parentId?: string;
    id?: string | null;
    duplicate?: boolean;
    file?: Blob;
    fileUrl?: string;
    fileName?: string;
}

export interface AssetsPostUpsertAssetRequest {
    id: string;
    parentId?: string;
    duplicate?: boolean;
    file?: Blob;
    fileUrl?: string;
    fileName?: string;
}

export interface AssetsPutAssetRequest {
    id: string;
    annotateAssetDto: AnnotateAssetDto;
}

export interface AssetsPutAssetContentRequest {
    id: string;
    file?: Blob;
    fileUrl?: string;
    fileName?: string;
}

export interface AssetsPutAssetParentRequest {
    id: string;
    moveAssetDto: MoveAssetDto;
}

export interface AssetsPutTagRequest {
    name: string;
    renameTagDto: RenameTagDto;
}

/**
 * AssetsApi - interface
 * 
 * @export
 * @interface AssetsApiInterface
 */
export interface AssetsApiInterface {
    /**
     * 
     * @summary Get the asset content.
     * @param {string} id The ID of the asset.
     * @param {number} [version] The optional version of the asset.
     * @param {number} [cache] The cache duration in seconds.
     * @param {number} [download] Set it to 0 to prevent download.
     * @param {number} [width] The target width of the asset, if it is an image.
     * @param {number} [height] The target height of the asset, if it is an image.
     * @param {number} [quality] Optional image quality, it is is an jpeg image.
     * @param {ResizeMode} [mode] The resize mode when the width and height is defined.
     * @param {string} [bg] Optional background color.
     * @param {number} [focusX] Override the y focus point.
     * @param {number} [focusY] Override the x focus point.
     * @param {boolean} [nofocus] True to ignore the asset focus point if any.
     * @param {boolean} [auto] True to use auto format.
     * @param {boolean} [force] True to force a new resize even if it already stored.
     * @param {boolean} [deleted] Also return deleted content items.
     * @param {ImageFormat} [format] True to force a new resize even if it already stored.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof AssetsApiInterface
     */
    getAssetContentRaw(requestParameters: AssetContentGetAssetContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>>;

    /**
     * Get the asset content.
     * @deprecated
     */
    getAssetContent(requestParameters: AssetContentGetAssetContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob>;

    /**
     * 
     * @summary Get the asset content.
     * @param {string} idOrSlug The id or slug of the asset.
     * @param {string} more Optional suffix that can be used to seo-optimize the link to the image Has not effect.
     * @param {number} [version] The optional version of the asset.
     * @param {number} [cache] The cache duration in seconds.
     * @param {number} [download] Set it to 0 to prevent download.
     * @param {number} [width] The target width of the asset, if it is an image.
     * @param {number} [height] The target height of the asset, if it is an image.
     * @param {number} [quality] Optional image quality, it is is an jpeg image.
     * @param {ResizeMode} [mode] The resize mode when the width and height is defined.
     * @param {string} [bg] Optional background color.
     * @param {number} [focusX] Override the y focus point.
     * @param {number} [focusY] Override the x focus point.
     * @param {boolean} [nofocus] True to ignore the asset focus point if any.
     * @param {boolean} [auto] True to use auto format.
     * @param {boolean} [force] True to force a new resize even if it already stored.
     * @param {boolean} [deleted] Also return deleted content items.
     * @param {ImageFormat} [format] True to force a new resize even if it already stored.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApiInterface
     */
    getAssetContentBySlugRaw(requestParameters: AssetContentGetAssetContentBySlugRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>>;

    /**
     * Get the asset content.
     */
    getAssetContentBySlug(requestParameters: AssetContentGetAssetContentBySlugRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob>;

    /**
     * 
     * @summary Delete an asset folder.
     * @param {string} id The ID of the asset folder to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApiInterface
     */
    deleteAssetFolderRaw(requestParameters: AssetFoldersDeleteAssetFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete an asset folder.
     */
    deleteAssetFolder(requestParameters: AssetFoldersDeleteAssetFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Get all asset folders for the app.
     * @summary Get asset folders.
     * @param {string} [parentId] The optional parent folder id.
     * @param {AssetFolderScope} [scope] The scope of the query.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApiInterface
     */
    getAssetFoldersRaw(requestParameters: AssetFoldersGetAssetFoldersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetFoldersDto>>;

    /**
     * Get all asset folders for the app.
     * Get asset folders.
     */
    getAssetFolders(requestParameters: AssetFoldersGetAssetFoldersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetFoldersDto>;

    /**
     * 
     * @summary Create an asset folder.
     * @param {CreateAssetFolderDto} createAssetFolderDto The asset folder object that needs to be added to the App.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApiInterface
     */
    postAssetFolderRaw(requestParameters: AssetFoldersPostAssetFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetFolderDto>>;

    /**
     * Create an asset folder.
     */
    postAssetFolder(requestParameters: AssetFoldersPostAssetFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetFolderDto>;

    /**
     * 
     * @summary Update an asset folder.
     * @param {string} id The ID of the asset folder.
     * @param {RenameAssetFolderDto} renameAssetFolderDto The asset folder object that needs to updated.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApiInterface
     */
    putAssetFolderRaw(requestParameters: AssetFoldersPutAssetFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetFolderDto>>;

    /**
     * Update an asset folder.
     */
    putAssetFolder(requestParameters: AssetFoldersPutAssetFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetFolderDto>;

    /**
     * 
     * @summary Move an asset folder.
     * @param {string} id The ID of the asset folder.
     * @param {MoveAssetFolderDto} moveAssetFolderDto The asset folder object that needs to updated.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApiInterface
     */
    putAssetFolderParentRaw(requestParameters: AssetFoldersPutAssetFolderParentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetFolderDto>>;

    /**
     * Move an asset folder.
     */
    putAssetFolderParent(requestParameters: AssetFoldersPutAssetFolderParentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetFolderDto>;

    /**
     * 
     * @summary Bulk update assets.
     * @param {BulkUpdateAssetsDto} bulkUpdateAssetsDto The bulk update request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApiInterface
     */
    bulkUpdateAssetsRaw(requestParameters: AssetsBulkUpdateAssetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BulkResultDto>>>;

    /**
     * Bulk update assets.
     */
    bulkUpdateAssets(requestParameters: AssetsBulkUpdateAssetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BulkResultDto>>;

    /**
     * 
     * @summary Delete an asset.
     * @param {string} id The ID of the asset to delete.
     * @param {boolean} [checkReferrers] True to check referrers of this asset.
     * @param {boolean} [permanent] True to delete the asset permanently.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApiInterface
     */
    deleteAssetRaw(requestParameters: AssetsDeleteAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete an asset.
     */
    deleteAsset(requestParameters: AssetsDeleteAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Get an asset by id.
     * @param {string} id The ID of the asset to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApiInterface
     */
    getAssetRaw(requestParameters: AssetsGetAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetDto>>;

    /**
     * Get an asset by id.
     */
    getAsset(requestParameters: AssetsGetAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetDto>;

    /**
     * Get all assets for the app.
     * @summary Get assets.
     * @param {string} [parentId] The optional parent folder id.
     * @param {string} [ids] The optional asset ids.
     * @param {string} [q] The optional json query.
     * @param {number} [$top] Optional number of items to take.
     * @param {number} [$skip] Optional number of items to skip.
     * @param {string} [$orderby] Optional OData order definition.
     * @param {string} [$filter] Optional OData filter.
     * @param {boolean} [xNoTotal] Do not return the total amount.
     * @param {boolean} [xNoSlowTotal] Do not return the total amount, if it would be slow.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApiInterface
     */
    getAssetsRaw(requestParameters: AssetsGetAssetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetsDto>>;

    /**
     * Get all assets for the app.
     * Get assets.
     */
    getAssets(requestParameters: AssetsGetAssetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetsDto>;

    /**
     * Get all assets for the app.
     * @summary Get assets.
     * @param {QueryDto} queryDto The required query object.
     * @param {boolean} [xNoTotal] Do not return the total amount.
     * @param {boolean} [xNoSlowTotal] Do not return the total amount, if it would be slow.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApiInterface
     */
    getAssetsPostRaw(requestParameters: AssetsGetAssetsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetsDto>>;

    /**
     * Get all assets for the app.
     * Get assets.
     */
    getAssetsPost(requestParameters: AssetsGetAssetsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetsDto>;

    /**
     * Get all tags for assets.
     * @summary Get assets tags.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApiInterface
     */
    getTagsRaw(requestParameters: AssetsGetTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: number; }>>;

    /**
     * Get all tags for assets.
     * Get assets tags.
     */
    getTags(requestParameters: AssetsGetTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: number; }>;

    /**
     * You can only upload one file at a time. The mime type of the file is not calculated by Squidex and is required correctly.
     * @summary Upload a new asset.
     * @param {string} [parentId] The optional parent folder id.
     * @param {string} [id] The optional custom asset id.
     * @param {boolean} [duplicate] True to duplicate the asset, event if the file has been uploaded.
     * @param {Blob} [file] 
     * @param {string} [fileUrl] 
     * @param {string} [fileName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApiInterface
     */
    postAssetRaw(requestParameters: AssetsPostAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetDto>>;

    /**
     * You can only upload one file at a time. The mime type of the file is not calculated by Squidex and is required correctly.
     * Upload a new asset.
     */
    postAsset(requestParameters: AssetsPostAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetDto>;

    /**
     * You can only upload one file at a time. The mime type of the file is not calculated by Squidex and is required correctly.
     * @summary Upsert an asset.
     * @param {string} id The optional custom asset id.
     * @param {string} [parentId] The optional parent folder id.
     * @param {boolean} [duplicate] True to duplicate the asset, event if the file has been uploaded.
     * @param {Blob} [file] 
     * @param {string} [fileUrl] 
     * @param {string} [fileName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApiInterface
     */
    postUpsertAssetRaw(requestParameters: AssetsPostUpsertAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetDto>>;

    /**
     * You can only upload one file at a time. The mime type of the file is not calculated by Squidex and is required correctly.
     * Upsert an asset.
     */
    postUpsertAsset(requestParameters: AssetsPostUpsertAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetDto>;

    /**
     * 
     * @summary Update an asset.
     * @param {string} id The ID of the asset.
     * @param {AnnotateAssetDto} annotateAssetDto The asset object that needs to updated.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApiInterface
     */
    putAssetRaw(requestParameters: AssetsPutAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetDto>>;

    /**
     * Update an asset.
     */
    putAsset(requestParameters: AssetsPutAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetDto>;

    /**
     * Use multipart request to upload an asset.
     * @summary Replace asset content.
     * @param {string} id The ID of the asset.
     * @param {Blob} [file] 
     * @param {string} [fileUrl] 
     * @param {string} [fileName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApiInterface
     */
    putAssetContentRaw(requestParameters: AssetsPutAssetContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetDto>>;

    /**
     * Use multipart request to upload an asset.
     * Replace asset content.
     */
    putAssetContent(requestParameters: AssetsPutAssetContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetDto>;

    /**
     * 
     * @summary Moves the asset.
     * @param {string} id The ID of the asset.
     * @param {MoveAssetDto} moveAssetDto The asset object that needs to updated.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApiInterface
     */
    putAssetParentRaw(requestParameters: AssetsPutAssetParentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetDto>>;

    /**
     * Moves the asset.
     */
    putAssetParent(requestParameters: AssetsPutAssetParentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetDto>;

    /**
     * 
     * @summary Rename an asset tag.
     * @param {string} name The tag to return.
     * @param {RenameTagDto} renameTagDto The required request object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApiInterface
     */
    putTagRaw(requestParameters: AssetsPutTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: number; }>>;

    /**
     * Rename an asset tag.
     */
    putTag(requestParameters: AssetsPutTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: number; }>;

}

/**
 * 
 */
export class AssetsApi extends runtime.BaseAPI implements AssetsApiInterface {

    /**
     * Get the asset content.
     * @deprecated
     */
    async getAssetContentRaw(requestParameters: AssetContentGetAssetContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        (requestParameters as any)['app'] = this.appName;
        const queryParameters: any = {};

        if (requestParameters['version'] != null) {
            queryParameters['version'] = requestParameters['version'];
        }

        if (requestParameters['cache'] != null) {
            queryParameters['cache'] = requestParameters['cache'];
        }

        if (requestParameters['download'] != null) {
            queryParameters['download'] = requestParameters['download'];
        }

        if (requestParameters['width'] != null) {
            queryParameters['width'] = requestParameters['width'];
        }

        if (requestParameters['height'] != null) {
            queryParameters['height'] = requestParameters['height'];
        }

        if (requestParameters['quality'] != null) {
            queryParameters['quality'] = requestParameters['quality'];
        }

        if (requestParameters['mode'] != null) {
            queryParameters['mode'] = requestParameters['mode'];
        }

        if (requestParameters['bg'] != null) {
            queryParameters['bg'] = requestParameters['bg'];
        }

        if (requestParameters['focusX'] != null) {
            queryParameters['focusX'] = requestParameters['focusX'];
        }

        if (requestParameters['focusY'] != null) {
            queryParameters['focusY'] = requestParameters['focusY'];
        }

        if (requestParameters['nofocus'] != null) {
            queryParameters['nofocus'] = requestParameters['nofocus'];
        }

        if (requestParameters['auto'] != null) {
            queryParameters['auto'] = requestParameters['auto'];
        }

        if (requestParameters['force'] != null) {
            queryParameters['force'] = requestParameters['force'];
        }

        if (requestParameters['deleted'] != null) {
            queryParameters['deleted'] = requestParameters['deleted'];
        }

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/assets/{id}`.replace(`{${"id"}}`, encodeURIComponent(String((requestParameters as any)['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Get the asset content.
     * @deprecated
     */
    async getAssetContent(requestParameters: AssetContentGetAssetContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.getAssetContentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the asset content.
     */
    async getAssetContentBySlugRaw(requestParameters: AssetContentGetAssetContentBySlugRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['idOrSlug'] == null) {
            throw new runtime.RequiredError(
                'idOrSlug',
                'Required parameter "idOrSlug" was null or undefined when calling ().'
            );
        }

        if (requestParameters['more'] == null) {
            throw new runtime.RequiredError(
                'more',
                'Required parameter "more" was null or undefined when calling ().'
            );
        }

        (requestParameters as any)['app'] = this.appName;
        const queryParameters: any = {};

        if (requestParameters['version'] != null) {
            queryParameters['version'] = requestParameters['version'];
        }

        if (requestParameters['cache'] != null) {
            queryParameters['cache'] = requestParameters['cache'];
        }

        if (requestParameters['download'] != null) {
            queryParameters['download'] = requestParameters['download'];
        }

        if (requestParameters['width'] != null) {
            queryParameters['width'] = requestParameters['width'];
        }

        if (requestParameters['height'] != null) {
            queryParameters['height'] = requestParameters['height'];
        }

        if (requestParameters['quality'] != null) {
            queryParameters['quality'] = requestParameters['quality'];
        }

        if (requestParameters['mode'] != null) {
            queryParameters['mode'] = requestParameters['mode'];
        }

        if (requestParameters['bg'] != null) {
            queryParameters['bg'] = requestParameters['bg'];
        }

        if (requestParameters['focusX'] != null) {
            queryParameters['focusX'] = requestParameters['focusX'];
        }

        if (requestParameters['focusY'] != null) {
            queryParameters['focusY'] = requestParameters['focusY'];
        }

        if (requestParameters['nofocus'] != null) {
            queryParameters['nofocus'] = requestParameters['nofocus'];
        }

        if (requestParameters['auto'] != null) {
            queryParameters['auto'] = requestParameters['auto'];
        }

        if (requestParameters['force'] != null) {
            queryParameters['force'] = requestParameters['force'];
        }

        if (requestParameters['deleted'] != null) {
            queryParameters['deleted'] = requestParameters['deleted'];
        }

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/assets/{app}/{idOrSlug}/{more}`.replace(`{${"app"}}`, encodeURIComponent(String((requestParameters as any)['app']))).replace(`{${"idOrSlug"}}`, encodeURIComponent(String((requestParameters as any)['idOrSlug']))).replace(`{${"more"}}`, encodeURIComponent(String((requestParameters as any)['more']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Get the asset content.
     */
    async getAssetContentBySlug(requestParameters: AssetContentGetAssetContentBySlugRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.getAssetContentBySlugRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an asset folder.
     */
    async deleteAssetFolderRaw(requestParameters: AssetFoldersDeleteAssetFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        (requestParameters as any)['app'] = this.appName;
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/{app}/assets/folders/{id}`.replace(`{${"app"}}`, encodeURIComponent(String((requestParameters as any)['app']))).replace(`{${"id"}}`, encodeURIComponent(String((requestParameters as any)['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an asset folder.
     */
    async deleteAssetFolder(requestParameters: AssetFoldersDeleteAssetFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteAssetFolderRaw(requestParameters, initOverrides);
    }

    /**
     * Get all asset folders for the app.
     * Get asset folders.
     */
    async getAssetFoldersRaw(requestParameters: AssetFoldersGetAssetFoldersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetFoldersDto>> {
        (requestParameters as any)['app'] = this.appName;
        const queryParameters: any = {};

        if (requestParameters['parentId'] != null) {
            queryParameters['parentId'] = requestParameters['parentId'];
        }

        if (requestParameters['scope'] != null) {
            queryParameters['scope'] = requestParameters['scope'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/{app}/assets/folders`.replace(`{${"app"}}`, encodeURIComponent(String((requestParameters as any)['app']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetFoldersDtoFromJSON(jsonValue));
    }

    /**
     * Get all asset folders for the app.
     * Get asset folders.
     */
    async getAssetFolders(requestParameters: AssetFoldersGetAssetFoldersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetFoldersDto> {
        const response = await this.getAssetFoldersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create an asset folder.
     */
    async postAssetFolderRaw(requestParameters: AssetFoldersPostAssetFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetFolderDto>> {
        if (requestParameters['createAssetFolderDto'] == null) {
            throw new runtime.RequiredError(
                'createAssetFolderDto',
                'Required parameter "createAssetFolderDto" was null or undefined when calling ().'
            );
        }

        (requestParameters as any)['app'] = this.appName;
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/apps/{app}/assets/folders`.replace(`{${"app"}}`, encodeURIComponent(String((requestParameters as any)['app']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateAssetFolderDtoToJSON(requestParameters['createAssetFolderDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetFolderDtoFromJSON(jsonValue));
    }

    /**
     * Create an asset folder.
     */
    async postAssetFolder(requestParameters: AssetFoldersPostAssetFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetFolderDto> {
        const response = await this.postAssetFolderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an asset folder.
     */
    async putAssetFolderRaw(requestParameters: AssetFoldersPutAssetFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetFolderDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        if (requestParameters['renameAssetFolderDto'] == null) {
            throw new runtime.RequiredError(
                'renameAssetFolderDto',
                'Required parameter "renameAssetFolderDto" was null or undefined when calling ().'
            );
        }

        (requestParameters as any)['app'] = this.appName;
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/apps/{app}/assets/folders/{id}`.replace(`{${"app"}}`, encodeURIComponent(String((requestParameters as any)['app']))).replace(`{${"id"}}`, encodeURIComponent(String((requestParameters as any)['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RenameAssetFolderDtoToJSON(requestParameters['renameAssetFolderDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetFolderDtoFromJSON(jsonValue));
    }

    /**
     * Update an asset folder.
     */
    async putAssetFolder(requestParameters: AssetFoldersPutAssetFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetFolderDto> {
        const response = await this.putAssetFolderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Move an asset folder.
     */
    async putAssetFolderParentRaw(requestParameters: AssetFoldersPutAssetFolderParentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetFolderDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        if (requestParameters['moveAssetFolderDto'] == null) {
            throw new runtime.RequiredError(
                'moveAssetFolderDto',
                'Required parameter "moveAssetFolderDto" was null or undefined when calling ().'
            );
        }

        (requestParameters as any)['app'] = this.appName;
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/apps/{app}/assets/folders/{id}/parent`.replace(`{${"app"}}`, encodeURIComponent(String((requestParameters as any)['app']))).replace(`{${"id"}}`, encodeURIComponent(String((requestParameters as any)['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MoveAssetFolderDtoToJSON(requestParameters['moveAssetFolderDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetFolderDtoFromJSON(jsonValue));
    }

    /**
     * Move an asset folder.
     */
    async putAssetFolderParent(requestParameters: AssetFoldersPutAssetFolderParentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetFolderDto> {
        const response = await this.putAssetFolderParentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Bulk update assets.
     */
    async bulkUpdateAssetsRaw(requestParameters: AssetsBulkUpdateAssetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BulkResultDto>>> {
        if (requestParameters['bulkUpdateAssetsDto'] == null) {
            throw new runtime.RequiredError(
                'bulkUpdateAssetsDto',
                'Required parameter "bulkUpdateAssetsDto" was null or undefined when calling ().'
            );
        }

        (requestParameters as any)['app'] = this.appName;
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/apps/{app}/assets/bulk`.replace(`{${"app"}}`, encodeURIComponent(String((requestParameters as any)['app']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BulkUpdateAssetsDtoToJSON(requestParameters['bulkUpdateAssetsDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BulkResultDtoFromJSON));
    }

    /**
     * Bulk update assets.
     */
    async bulkUpdateAssets(requestParameters: AssetsBulkUpdateAssetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BulkResultDto>> {
        const response = await this.bulkUpdateAssetsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an asset.
     */
    async deleteAssetRaw(requestParameters: AssetsDeleteAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        (requestParameters as any)['app'] = this.appName;
        const queryParameters: any = {};

        if (requestParameters['checkReferrers'] != null) {
            queryParameters['checkReferrers'] = requestParameters['checkReferrers'];
        }

        if (requestParameters['permanent'] != null) {
            queryParameters['permanent'] = requestParameters['permanent'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/{app}/assets/{id}`.replace(`{${"app"}}`, encodeURIComponent(String((requestParameters as any)['app']))).replace(`{${"id"}}`, encodeURIComponent(String((requestParameters as any)['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an asset.
     */
    async deleteAsset(requestParameters: AssetsDeleteAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteAssetRaw(requestParameters, initOverrides);
    }

    /**
     * Get an asset by id.
     */
    async getAssetRaw(requestParameters: AssetsGetAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        (requestParameters as any)['app'] = this.appName;
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/{app}/assets/{id}`.replace(`{${"app"}}`, encodeURIComponent(String((requestParameters as any)['app']))).replace(`{${"id"}}`, encodeURIComponent(String((requestParameters as any)['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetDtoFromJSON(jsonValue));
    }

    /**
     * Get an asset by id.
     */
    async getAsset(requestParameters: AssetsGetAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetDto> {
        const response = await this.getAssetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all assets for the app.
     * Get assets.
     */
    async getAssetsRaw(requestParameters: AssetsGetAssetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetsDto>> {
        (requestParameters as any)['app'] = this.appName;
        const queryParameters: any = {};

        if (requestParameters['parentId'] != null) {
            queryParameters['parentId'] = requestParameters['parentId'];
        }

        if (requestParameters['ids'] != null) {
            queryParameters['ids'] = requestParameters['ids'];
        }

        if (requestParameters['q'] != null) {
            queryParameters['q'] = requestParameters['q'];
        }

        if (requestParameters['$top'] != null) {
            queryParameters['$top'] = requestParameters['$top'];
        }

        if (requestParameters['$skip'] != null) {
            queryParameters['$skip'] = requestParameters['$skip'];
        }

        if (requestParameters['$orderby'] != null) {
            queryParameters['$orderby'] = requestParameters['$orderby'];
        }

        if (requestParameters['$filter'] != null) {
            queryParameters['$filter'] = requestParameters['$filter'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xNoTotal'] != null) {
            headerParameters['X-NoTotal'] = String(requestParameters['xNoTotal']);
        }

        if (requestParameters['xNoSlowTotal'] != null) {
            headerParameters['X-NoSlowTotal'] = String(requestParameters['xNoSlowTotal']);
        }

        const response = await this.request({
            path: `/api/apps/{app}/assets`.replace(`{${"app"}}`, encodeURIComponent(String((requestParameters as any)['app']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetsDtoFromJSON(jsonValue));
    }

    /**
     * Get all assets for the app.
     * Get assets.
     */
    async getAssets(requestParameters: AssetsGetAssetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetsDto> {
        const response = await this.getAssetsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all assets for the app.
     * Get assets.
     */
    async getAssetsPostRaw(requestParameters: AssetsGetAssetsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetsDto>> {
        if (requestParameters['queryDto'] == null) {
            throw new runtime.RequiredError(
                'queryDto',
                'Required parameter "queryDto" was null or undefined when calling ().'
            );
        }

        (requestParameters as any)['app'] = this.appName;
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xNoTotal'] != null) {
            headerParameters['X-NoTotal'] = String(requestParameters['xNoTotal']);
        }

        if (requestParameters['xNoSlowTotal'] != null) {
            headerParameters['X-NoSlowTotal'] = String(requestParameters['xNoSlowTotal']);
        }

        const response = await this.request({
            path: `/api/apps/{app}/assets/query`.replace(`{${"app"}}`, encodeURIComponent(String((requestParameters as any)['app']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: QueryDtoToJSON(requestParameters['queryDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetsDtoFromJSON(jsonValue));
    }

    /**
     * Get all assets for the app.
     * Get assets.
     */
    async getAssetsPost(requestParameters: AssetsGetAssetsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetsDto> {
        const response = await this.getAssetsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all tags for assets.
     * Get assets tags.
     */
    async getTagsRaw(requestParameters: AssetsGetTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: number; }>> {
        (requestParameters as any)['app'] = this.appName;
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/{app}/assets/tags`.replace(`{${"app"}}`, encodeURIComponent(String((requestParameters as any)['app']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get all tags for assets.
     * Get assets tags.
     */
    async getTags(requestParameters: AssetsGetTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: number; }> {
        const response = await this.getTagsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can only upload one file at a time. The mime type of the file is not calculated by Squidex and is required correctly.
     * Upload a new asset.
     */
    async postAssetRaw(requestParameters: AssetsPostAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetDto>> {
        (requestParameters as any)['app'] = this.appName;
        const queryParameters: any = {};

        if (requestParameters['parentId'] != null) {
            queryParameters['ParentId'] = requestParameters['parentId'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['duplicate'] != null) {
            queryParameters['duplicate'] = requestParameters['duplicate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file'] as any);
        }

        if (requestParameters['fileUrl'] != null) {
            formParams.append('fileUrl', requestParameters['fileUrl'] as any);
        }

        if (requestParameters['fileName'] != null) {
            formParams.append('fileName', requestParameters['fileName'] as any);
        }

        const response = await this.request({
            path: `/api/apps/{app}/assets`.replace(`{${"app"}}`, encodeURIComponent(String((requestParameters as any)['app']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetDtoFromJSON(jsonValue));
    }

    /**
     * You can only upload one file at a time. The mime type of the file is not calculated by Squidex and is required correctly.
     * Upload a new asset.
     */
    async postAsset(requestParameters: AssetsPostAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetDto> {
        const response = await this.postAssetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can only upload one file at a time. The mime type of the file is not calculated by Squidex and is required correctly.
     * Upsert an asset.
     */
    async postUpsertAssetRaw(requestParameters: AssetsPostUpsertAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        (requestParameters as any)['app'] = this.appName;
        const queryParameters: any = {};

        if (requestParameters['parentId'] != null) {
            queryParameters['parentId'] = requestParameters['parentId'];
        }

        if (requestParameters['duplicate'] != null) {
            queryParameters['duplicate'] = requestParameters['duplicate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file'] as any);
        }

        if (requestParameters['fileUrl'] != null) {
            formParams.append('fileUrl', requestParameters['fileUrl'] as any);
        }

        if (requestParameters['fileName'] != null) {
            formParams.append('fileName', requestParameters['fileName'] as any);
        }

        const response = await this.request({
            path: `/api/apps/{app}/assets/{id}`.replace(`{${"app"}}`, encodeURIComponent(String((requestParameters as any)['app']))).replace(`{${"id"}}`, encodeURIComponent(String((requestParameters as any)['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetDtoFromJSON(jsonValue));
    }

    /**
     * You can only upload one file at a time. The mime type of the file is not calculated by Squidex and is required correctly.
     * Upsert an asset.
     */
    async postUpsertAsset(requestParameters: AssetsPostUpsertAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetDto> {
        const response = await this.postUpsertAssetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an asset.
     */
    async putAssetRaw(requestParameters: AssetsPutAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        if (requestParameters['annotateAssetDto'] == null) {
            throw new runtime.RequiredError(
                'annotateAssetDto',
                'Required parameter "annotateAssetDto" was null or undefined when calling ().'
            );
        }

        (requestParameters as any)['app'] = this.appName;
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/apps/{app}/assets/{id}`.replace(`{${"app"}}`, encodeURIComponent(String((requestParameters as any)['app']))).replace(`{${"id"}}`, encodeURIComponent(String((requestParameters as any)['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AnnotateAssetDtoToJSON(requestParameters['annotateAssetDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetDtoFromJSON(jsonValue));
    }

    /**
     * Update an asset.
     */
    async putAsset(requestParameters: AssetsPutAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetDto> {
        const response = await this.putAssetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use multipart request to upload an asset.
     * Replace asset content.
     */
    async putAssetContentRaw(requestParameters: AssetsPutAssetContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        (requestParameters as any)['app'] = this.appName;
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file'] as any);
        }

        if (requestParameters['fileUrl'] != null) {
            formParams.append('fileUrl', requestParameters['fileUrl'] as any);
        }

        if (requestParameters['fileName'] != null) {
            formParams.append('fileName', requestParameters['fileName'] as any);
        }

        const response = await this.request({
            path: `/api/apps/{app}/assets/{id}/content`.replace(`{${"app"}}`, encodeURIComponent(String((requestParameters as any)['app']))).replace(`{${"id"}}`, encodeURIComponent(String((requestParameters as any)['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetDtoFromJSON(jsonValue));
    }

    /**
     * Use multipart request to upload an asset.
     * Replace asset content.
     */
    async putAssetContent(requestParameters: AssetsPutAssetContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetDto> {
        const response = await this.putAssetContentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Moves the asset.
     */
    async putAssetParentRaw(requestParameters: AssetsPutAssetParentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        if (requestParameters['moveAssetDto'] == null) {
            throw new runtime.RequiredError(
                'moveAssetDto',
                'Required parameter "moveAssetDto" was null or undefined when calling ().'
            );
        }

        (requestParameters as any)['app'] = this.appName;
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/apps/{app}/assets/{id}/parent`.replace(`{${"app"}}`, encodeURIComponent(String((requestParameters as any)['app']))).replace(`{${"id"}}`, encodeURIComponent(String((requestParameters as any)['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MoveAssetDtoToJSON(requestParameters['moveAssetDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetDtoFromJSON(jsonValue));
    }

    /**
     * Moves the asset.
     */
    async putAssetParent(requestParameters: AssetsPutAssetParentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetDto> {
        const response = await this.putAssetParentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Rename an asset tag.
     */
    async putTagRaw(requestParameters: AssetsPutTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: number; }>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling ().'
            );
        }

        if (requestParameters['renameTagDto'] == null) {
            throw new runtime.RequiredError(
                'renameTagDto',
                'Required parameter "renameTagDto" was null or undefined when calling ().'
            );
        }

        (requestParameters as any)['app'] = this.appName;
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/apps/{app}/assets/tags/{name}`.replace(`{${"app"}}`, encodeURIComponent(String((requestParameters as any)['app']))).replace(`{${"name"}}`, encodeURIComponent(String((requestParameters as any)['name']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RenameTagDtoToJSON(requestParameters['renameTagDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Rename an asset tag.
     */
    async putTag(requestParameters: AssetsPutTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: number; }> {
        const response = await this.putTagRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
