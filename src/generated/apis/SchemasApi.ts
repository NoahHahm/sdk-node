/**
 * Squidex API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddFieldDto,
  ChangeCategoryDto,
  ConfigureFieldRulesDto,
  ConfigureUIFieldsDto,
  CreateSchemaDto,
  ReorderFieldsDto,
  SchemaDto,
  SchemaScriptsDto,
  SchemasDto,
  SynchronizeSchemaDto,
  UpdateFieldDto,
  UpdateSchemaDto,
} from '../models/index';
import {
    AddFieldDtoToJSON,
    ChangeCategoryDtoToJSON,
    ConfigureFieldRulesDtoToJSON,
    ConfigureUIFieldsDtoToJSON,
    CreateSchemaDtoToJSON,
    ReorderFieldsDtoToJSON,
    SchemaDtoFromJSON,
    SchemaScriptsDtoToJSON,
    SchemasDtoFromJSON,
    SynchronizeSchemaDtoToJSON,
    UpdateFieldDtoToJSON,
    UpdateSchemaDtoToJSON,
} from '../models/index';

export interface SchemaFieldsDeleteFieldRequestRaw {
    schema: string;
    id: number;
}

export interface SchemaFieldsDeleteNestedFieldRequestRaw {
    schema: string;
    parentId: number;
    id: number;
}

export interface SchemaFieldsDisableFieldRequestRaw {
    schema: string;
    id: number;
}

export interface SchemaFieldsDisableNestedFieldRequestRaw {
    schema: string;
    parentId: number;
    id: number;
}

export interface SchemaFieldsEnableFieldRequestRaw {
    schema: string;
    id: number;
}

export interface SchemaFieldsEnableNestedFieldRequestRaw {
    schema: string;
    parentId: number;
    id: number;
}

export interface SchemaFieldsHideFieldRequestRaw {
    schema: string;
    id: number;
}

export interface SchemaFieldsHideNestedFieldRequestRaw {
    schema: string;
    parentId: number;
    id: number;
}

export interface SchemaFieldsLockFieldRequestRaw {
    schema: string;
    id: number;
}

export interface SchemaFieldsLockNestedFieldRequestRaw {
    schema: string;
    parentId: number;
    id: number;
}

export interface SchemaFieldsPostFieldRequestRaw {
    schema: string;
    addFieldDto: AddFieldDto;
}

export interface SchemaFieldsPostNestedFieldRequestRaw {
    schema: string;
    parentId: number;
    addFieldDto: AddFieldDto;
}

export interface SchemaFieldsPutFieldRequestRaw {
    schema: string;
    id: number;
    updateFieldDto: UpdateFieldDto;
}

export interface SchemaFieldsPutNestedFieldRequestRaw {
    schema: string;
    parentId: number;
    id: number;
    updateFieldDto: UpdateFieldDto;
}

export interface SchemaFieldsPutNestedFieldOrderingRequestRaw {
    schema: string;
    parentId: number;
    reorderFieldsDto: ReorderFieldsDto;
}

export interface SchemaFieldsPutSchemaFieldOrderingRequestRaw {
    schema: string;
    reorderFieldsDto: ReorderFieldsDto;
}

export interface SchemaFieldsPutSchemaUIFieldsRequestRaw {
    schema: string;
    configureUIFieldsDto: ConfigureUIFieldsDto;
}

export interface SchemaFieldsShowFieldRequestRaw {
    schema: string;
    id: number;
}

export interface SchemaFieldsShowNestedFieldRequestRaw {
    schema: string;
    parentId: number;
    id: number;
}

export interface SchemasDeleteSchemaRequestRaw {
    schema: string;
}

export interface SchemasGetSchemaRequestRaw {
    schema: string;
}

export interface SchemasPostSchemaRequestRaw {
    createSchemaDto: CreateSchemaDto;
}

export interface SchemasPublishSchemaRequestRaw {
    schema: string;
}

export interface SchemasPutCategoryRequestRaw {
    schema: string;
    changeCategoryDto: ChangeCategoryDto;
}

export interface SchemasPutPreviewUrlsRequestRaw {
    schema: string;
    requestBody: { [key: string]: string; };
}

export interface SchemasPutRulesRequestRaw {
    schema: string;
    configureFieldRulesDto: ConfigureFieldRulesDto;
}

export interface SchemasPutSchemaRequestRaw {
    schema: string;
    updateSchemaDto: UpdateSchemaDto;
}

export interface SchemasPutSchemaSyncRequestRaw {
    schema: string;
    synchronizeSchemaDto: SynchronizeSchemaDto;
}

export interface SchemasPutScriptsRequestRaw {
    schema: string;
    schemaScriptsDto: SchemaScriptsDto;
}

export interface SchemasUnpublishSchemaRequestRaw {
    schema: string;
}

/**
 * SchemasApi - interface
 * 
 * @export
 * @interface SchemasApiInterface
 */
export interface SchemasApiInterface {
    /**
     * 
     * @summary Delete a schema field.
     * @param {string} schema The name of the schema.
     * @param {number} id The ID of the field to disable.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApiInterface
     */
    deleteFieldRaw(schema: string, id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>>;

    /**
     * Delete a schema field.
     */
    deleteField(schema: string, id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto>;

    /**
     * 
     * @summary Delete a nested field.
     * @param {string} schema The name of the schema.
     * @param {number} parentId The parent field id.
     * @param {number} id The ID of the field to disable.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApiInterface
     */
    deleteNestedFieldRaw(schema: string, parentId: number, id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>>;

    /**
     * Delete a nested field.
     */
    deleteNestedField(schema: string, parentId: number, id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto>;

    /**
     * A disabled field cannot not be edited in the squidex portal anymore, but will be part of the API response.
     * @summary Disable a schema field.
     * @param {string} schema The name of the schema.
     * @param {number} id The ID of the field to disable.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApiInterface
     */
    disableFieldRaw(schema: string, id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>>;

    /**
     * A disabled field cannot not be edited in the squidex portal anymore, but will be part of the API response.
     * Disable a schema field.
     */
    disableField(schema: string, id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto>;

    /**
     * A disabled field cannot not be edited in the squidex portal anymore, but will be part of the API response.
     * @summary Disable a nested field.
     * @param {string} schema The name of the schema.
     * @param {number} parentId The parent field id.
     * @param {number} id The ID of the field to disable.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApiInterface
     */
    disableNestedFieldRaw(schema: string, parentId: number, id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>>;

    /**
     * A disabled field cannot not be edited in the squidex portal anymore, but will be part of the API response.
     * Disable a nested field.
     */
    disableNestedField(schema: string, parentId: number, id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto>;

    /**
     * A disabled field cannot not be edited in the squidex portal anymore, but will be part of the API response.
     * @summary Enable a schema field.
     * @param {string} schema The name of the schema.
     * @param {number} id The ID of the field to enable.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApiInterface
     */
    enableFieldRaw(schema: string, id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>>;

    /**
     * A disabled field cannot not be edited in the squidex portal anymore, but will be part of the API response.
     * Enable a schema field.
     */
    enableField(schema: string, id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto>;

    /**
     * A disabled field cannot not be edited in the squidex portal anymore, but will be part of the API response.
     * @summary Enable a nested field.
     * @param {string} schema The name of the schema.
     * @param {number} parentId The parent field id.
     * @param {number} id The ID of the field to enable.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApiInterface
     */
    enableNestedFieldRaw(schema: string, parentId: number, id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>>;

    /**
     * A disabled field cannot not be edited in the squidex portal anymore, but will be part of the API response.
     * Enable a nested field.
     */
    enableNestedField(schema: string, parentId: number, id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto>;

    /**
     * A hidden field is not part of the API response, but can still be edited in the portal.
     * @summary Hide a schema field.
     * @param {string} schema The name of the schema.
     * @param {number} id The ID of the field to hide.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApiInterface
     */
    hideFieldRaw(schema: string, id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>>;

    /**
     * A hidden field is not part of the API response, but can still be edited in the portal.
     * Hide a schema field.
     */
    hideField(schema: string, id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto>;

    /**
     * A hidden field is not part of the API response, but can still be edited in the portal.
     * @summary Hide a nested field.
     * @param {string} schema The name of the schema.
     * @param {number} parentId The parent field id.
     * @param {number} id The ID of the field to hide.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApiInterface
     */
    hideNestedFieldRaw(schema: string, parentId: number, id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>>;

    /**
     * A hidden field is not part of the API response, but can still be edited in the portal.
     * Hide a nested field.
     */
    hideNestedField(schema: string, parentId: number, id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto>;

    /**
     * A locked field cannot be updated or deleted.
     * @summary Lock a schema field.
     * @param {string} schema The name of the schema.
     * @param {number} id The ID of the field to lock.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApiInterface
     */
    lockFieldRaw(schema: string, id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>>;

    /**
     * A locked field cannot be updated or deleted.
     * Lock a schema field.
     */
    lockField(schema: string, id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto>;

    /**
     * A locked field cannot be edited or deleted.
     * @summary Lock a nested field.
     * @param {string} schema The name of the schema.
     * @param {number} parentId The parent field id.
     * @param {number} id The ID of the field to lock.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApiInterface
     */
    lockNestedFieldRaw(schema: string, parentId: number, id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>>;

    /**
     * A locked field cannot be edited or deleted.
     * Lock a nested field.
     */
    lockNestedField(schema: string, parentId: number, id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto>;

    /**
     * 
     * @summary Add a schema field.
     * @param {string} schema The name of the schema.
     * @param {AddFieldDto} addFieldDto The field object that needs to be added to the schema.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApiInterface
     */
    postFieldRaw(schema: string, addFieldDto: AddFieldDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>>;

    /**
     * Add a schema field.
     */
    postField(schema: string, addFieldDto: AddFieldDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto>;

    /**
     * 
     * @summary Add a nested field.
     * @param {string} schema The name of the schema.
     * @param {number} parentId The parent field id.
     * @param {AddFieldDto} addFieldDto The field object that needs to be added to the schema.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApiInterface
     */
    postNestedFieldRaw(schema: string, parentId: number, addFieldDto: AddFieldDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>>;

    /**
     * Add a nested field.
     */
    postNestedField(schema: string, parentId: number, addFieldDto: AddFieldDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto>;

    /**
     * 
     * @summary Update a schema field.
     * @param {string} schema The name of the schema.
     * @param {number} id The ID of the field to update.
     * @param {UpdateFieldDto} updateFieldDto The field object that needs to be added to the schema.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApiInterface
     */
    putFieldRaw(schema: string, id: number, updateFieldDto: UpdateFieldDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>>;

    /**
     * Update a schema field.
     */
    putField(schema: string, id: number, updateFieldDto: UpdateFieldDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto>;

    /**
     * 
     * @summary Update a nested field.
     * @param {string} schema The name of the schema.
     * @param {number} parentId The parent field id.
     * @param {number} id The ID of the field to update.
     * @param {UpdateFieldDto} updateFieldDto The field object that needs to be added to the schema.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApiInterface
     */
    putNestedFieldRaw(schema: string, parentId: number, id: number, updateFieldDto: UpdateFieldDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>>;

    /**
     * Update a nested field.
     */
    putNestedField(schema: string, parentId: number, id: number, updateFieldDto: UpdateFieldDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto>;

    /**
     * 
     * @summary Reorder all nested fields.
     * @param {string} schema The name of the schema.
     * @param {number} parentId The parent field id.
     * @param {ReorderFieldsDto} reorderFieldsDto The request that contains the field ids.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApiInterface
     */
    putNestedFieldOrderingRaw(schema: string, parentId: number, reorderFieldsDto: ReorderFieldsDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>>;

    /**
     * Reorder all nested fields.
     */
    putNestedFieldOrdering(schema: string, parentId: number, reorderFieldsDto: ReorderFieldsDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto>;

    /**
     * 
     * @summary Reorder all fields.
     * @param {string} schema The name of the schema.
     * @param {ReorderFieldsDto} reorderFieldsDto The request that contains the field ids.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApiInterface
     */
    putSchemaFieldOrderingRaw(schema: string, reorderFieldsDto: ReorderFieldsDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>>;

    /**
     * Reorder all fields.
     */
    putSchemaFieldOrdering(schema: string, reorderFieldsDto: ReorderFieldsDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto>;

    /**
     * 
     * @summary Configure UI fields.
     * @param {string} schema The name of the schema.
     * @param {ConfigureUIFieldsDto} configureUIFieldsDto The request that contains the field names.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApiInterface
     */
    putSchemaUIFieldsRaw(schema: string, configureUIFieldsDto: ConfigureUIFieldsDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>>;

    /**
     * Configure UI fields.
     */
    putSchemaUIFields(schema: string, configureUIFieldsDto: ConfigureUIFieldsDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto>;

    /**
     * A hidden field is not part of the API response, but can still be edited in the portal.
     * @summary Show a schema field.
     * @param {string} schema The name of the schema.
     * @param {number} id The ID of the field to show.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApiInterface
     */
    showFieldRaw(schema: string, id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>>;

    /**
     * A hidden field is not part of the API response, but can still be edited in the portal.
     * Show a schema field.
     */
    showField(schema: string, id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto>;

    /**
     * A hidden field is not part of the API response, but can still be edited in the portal.
     * @summary Show a nested field.
     * @param {string} schema The name of the schema.
     * @param {number} parentId The parent field id.
     * @param {number} id The ID of the field to show.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApiInterface
     */
    showNestedFieldRaw(schema: string, parentId: number, id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>>;

    /**
     * A hidden field is not part of the API response, but can still be edited in the portal.
     * Show a nested field.
     */
    showNestedField(schema: string, parentId: number, id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto>;

    /**
     * 
     * @summary Delete a schema.
     * @param {string} schema The name of the schema to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApiInterface
     */
    deleteSchemaRaw(schema: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete a schema.
     */
    deleteSchema(schema: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Get a schema by name.
     * @param {string} schema The name of the schema to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApiInterface
     */
    getSchemaRaw(schema: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>>;

    /**
     * Get a schema by name.
     */
    getSchema(schema: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto>;

    /**
     * 
     * @summary Get schemas.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApiInterface
     */
    getSchemasRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemasDto>>;

    /**
     * Get schemas.
     */
    getSchemas(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemasDto>;

    /**
     * 
     * @summary Create a new schema.
     * @param {CreateSchemaDto} createSchemaDto The schema object that needs to be added to the app.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApiInterface
     */
    postSchemaRaw(createSchemaDto: CreateSchemaDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>>;

    /**
     * Create a new schema.
     */
    postSchema(createSchemaDto: CreateSchemaDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto>;

    /**
     * 
     * @summary Publish a schema.
     * @param {string} schema The name of the schema to publish.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApiInterface
     */
    publishSchemaRaw(schema: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>>;

    /**
     * Publish a schema.
     */
    publishSchema(schema: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto>;

    /**
     * 
     * @summary Update a schema category.
     * @param {string} schema The name of the schema.
     * @param {ChangeCategoryDto} changeCategoryDto The schema object that needs to updated.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApiInterface
     */
    putCategoryRaw(schema: string, changeCategoryDto: ChangeCategoryDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>>;

    /**
     * Update a schema category.
     */
    putCategory(schema: string, changeCategoryDto: ChangeCategoryDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto>;

    /**
     * 
     * @summary Update the preview urls.
     * @param {string} schema The name of the schema.
     * @param {{ [key: string]: string; }} requestBody The preview urls for the schema.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApiInterface
     */
    putPreviewUrlsRaw(schema: string, requestBody: { [key: string]: string; }, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>>;

    /**
     * Update the preview urls.
     */
    putPreviewUrls(schema: string, requestBody: { [key: string]: string; }, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto>;

    /**
     * 
     * @summary Update the rules.
     * @param {string} schema The name of the schema.
     * @param {ConfigureFieldRulesDto} configureFieldRulesDto The schema rules object that needs to updated.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApiInterface
     */
    putRulesRaw(schema: string, configureFieldRulesDto: ConfigureFieldRulesDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>>;

    /**
     * Update the rules.
     */
    putRules(schema: string, configureFieldRulesDto: ConfigureFieldRulesDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto>;

    /**
     * 
     * @summary Update a schema.
     * @param {string} schema The name of the schema.
     * @param {UpdateSchemaDto} updateSchemaDto The schema object that needs to updated.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApiInterface
     */
    putSchemaRaw(schema: string, updateSchemaDto: UpdateSchemaDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>>;

    /**
     * Update a schema.
     */
    putSchema(schema: string, updateSchemaDto: UpdateSchemaDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto>;

    /**
     * 
     * @summary Synchronize a schema.
     * @param {string} schema The name of the schema.
     * @param {SynchronizeSchemaDto} synchronizeSchemaDto The schema object that needs to updated.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApiInterface
     */
    putSchemaSyncRaw(schema: string, synchronizeSchemaDto: SynchronizeSchemaDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>>;

    /**
     * Synchronize a schema.
     */
    putSchemaSync(schema: string, synchronizeSchemaDto: SynchronizeSchemaDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto>;

    /**
     * 
     * @summary Update the scripts.
     * @param {string} schema The name of the schema.
     * @param {SchemaScriptsDto} schemaScriptsDto The schema scripts object that needs to updated.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApiInterface
     */
    putScriptsRaw(schema: string, schemaScriptsDto: SchemaScriptsDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>>;

    /**
     * Update the scripts.
     */
    putScripts(schema: string, schemaScriptsDto: SchemaScriptsDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto>;

    /**
     * 
     * @summary Unpublish a schema.
     * @param {string} schema The name of the schema to unpublish.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApiInterface
     */
    unpublishSchemaRaw(schema: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>>;

    /**
     * Unpublish a schema.
     */
    unpublishSchema(schema: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto>;

}

/**
 * 
 */
export class SchemasApi extends runtime.BaseAPI implements SchemasApiInterface {

    /**
     * Delete a schema field.
     */
    async deleteFieldRaw(schema: string, id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>> {
        const _schema = schema;
        const _id = id;

        if (_schema == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (_id == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/$app$/schemas/{schema}/fields/{id}`.replace(`{${"schema"}}`, encodeURIComponent(String(_schema))).replace(`{${"id"}}`, encodeURIComponent(String(_id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemaDtoFromJSON(jsonValue));
    }

    /**
     * Delete a schema field.
     */
    async deleteField(schema: string, id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto> {
        const response = await this.deleteFieldRaw(schema, id, initOverrides);
        return await response.value();
    }

    /**
     * Delete a nested field.
     */
    async deleteNestedFieldRaw(schema: string, parentId: number, id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>> {
        const _schema = schema;
        const _parentId = parentId;
        const _id = id;

        if (_schema == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (_parentId == null) {
            throw new runtime.RequiredError(
                'parentId',
                'Required parameter "parentId" was null or undefined when calling ().'
            );
        }

        if (_id == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/$app$/schemas/{schema}/fields/{parentId}/nested/{id}`.replace(`{${"schema"}}`, encodeURIComponent(String(_schema))).replace(`{${"parentId"}}`, encodeURIComponent(String(_parentId))).replace(`{${"id"}}`, encodeURIComponent(String(_id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemaDtoFromJSON(jsonValue));
    }

    /**
     * Delete a nested field.
     */
    async deleteNestedField(schema: string, parentId: number, id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto> {
        const response = await this.deleteNestedFieldRaw(schema, parentId, id, initOverrides);
        return await response.value();
    }

    /**
     * A disabled field cannot not be edited in the squidex portal anymore, but will be part of the API response.
     * Disable a schema field.
     */
    async disableFieldRaw(schema: string, id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>> {
        const _schema = schema;
        const _id = id;

        if (_schema == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (_id == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/$app$/schemas/{schema}/fields/{id}/disable`.replace(`{${"schema"}}`, encodeURIComponent(String(_schema))).replace(`{${"id"}}`, encodeURIComponent(String(_id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemaDtoFromJSON(jsonValue));
    }

    /**
     * A disabled field cannot not be edited in the squidex portal anymore, but will be part of the API response.
     * Disable a schema field.
     */
    async disableField(schema: string, id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto> {
        const response = await this.disableFieldRaw(schema, id, initOverrides);
        return await response.value();
    }

    /**
     * A disabled field cannot not be edited in the squidex portal anymore, but will be part of the API response.
     * Disable a nested field.
     */
    async disableNestedFieldRaw(schema: string, parentId: number, id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>> {
        const _schema = schema;
        const _parentId = parentId;
        const _id = id;

        if (_schema == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (_parentId == null) {
            throw new runtime.RequiredError(
                'parentId',
                'Required parameter "parentId" was null or undefined when calling ().'
            );
        }

        if (_id == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/$app$/schemas/{schema}/fields/{parentId}/nested/{id}/disable`.replace(`{${"schema"}}`, encodeURIComponent(String(_schema))).replace(`{${"parentId"}}`, encodeURIComponent(String(_parentId))).replace(`{${"id"}}`, encodeURIComponent(String(_id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemaDtoFromJSON(jsonValue));
    }

    /**
     * A disabled field cannot not be edited in the squidex portal anymore, but will be part of the API response.
     * Disable a nested field.
     */
    async disableNestedField(schema: string, parentId: number, id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto> {
        const response = await this.disableNestedFieldRaw(schema, parentId, id, initOverrides);
        return await response.value();
    }

    /**
     * A disabled field cannot not be edited in the squidex portal anymore, but will be part of the API response.
     * Enable a schema field.
     */
    async enableFieldRaw(schema: string, id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>> {
        const _schema = schema;
        const _id = id;

        if (_schema == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (_id == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/$app$/schemas/{schema}/fields/{id}/enable`.replace(`{${"schema"}}`, encodeURIComponent(String(_schema))).replace(`{${"id"}}`, encodeURIComponent(String(_id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemaDtoFromJSON(jsonValue));
    }

    /**
     * A disabled field cannot not be edited in the squidex portal anymore, but will be part of the API response.
     * Enable a schema field.
     */
    async enableField(schema: string, id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto> {
        const response = await this.enableFieldRaw(schema, id, initOverrides);
        return await response.value();
    }

    /**
     * A disabled field cannot not be edited in the squidex portal anymore, but will be part of the API response.
     * Enable a nested field.
     */
    async enableNestedFieldRaw(schema: string, parentId: number, id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>> {
        const _schema = schema;
        const _parentId = parentId;
        const _id = id;

        if (_schema == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (_parentId == null) {
            throw new runtime.RequiredError(
                'parentId',
                'Required parameter "parentId" was null or undefined when calling ().'
            );
        }

        if (_id == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/$app$/schemas/{schema}/fields/{parentId}/nested/{id}/enable`.replace(`{${"schema"}}`, encodeURIComponent(String(_schema))).replace(`{${"parentId"}}`, encodeURIComponent(String(_parentId))).replace(`{${"id"}}`, encodeURIComponent(String(_id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemaDtoFromJSON(jsonValue));
    }

    /**
     * A disabled field cannot not be edited in the squidex portal anymore, but will be part of the API response.
     * Enable a nested field.
     */
    async enableNestedField(schema: string, parentId: number, id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto> {
        const response = await this.enableNestedFieldRaw(schema, parentId, id, initOverrides);
        return await response.value();
    }

    /**
     * A hidden field is not part of the API response, but can still be edited in the portal.
     * Hide a schema field.
     */
    async hideFieldRaw(schema: string, id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>> {
        const _schema = schema;
        const _id = id;

        if (_schema == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (_id == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/$app$/schemas/{schema}/fields/{id}/hide`.replace(`{${"schema"}}`, encodeURIComponent(String(_schema))).replace(`{${"id"}}`, encodeURIComponent(String(_id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemaDtoFromJSON(jsonValue));
    }

    /**
     * A hidden field is not part of the API response, but can still be edited in the portal.
     * Hide a schema field.
     */
    async hideField(schema: string, id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto> {
        const response = await this.hideFieldRaw(schema, id, initOverrides);
        return await response.value();
    }

    /**
     * A hidden field is not part of the API response, but can still be edited in the portal.
     * Hide a nested field.
     */
    async hideNestedFieldRaw(schema: string, parentId: number, id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>> {
        const _schema = schema;
        const _parentId = parentId;
        const _id = id;

        if (_schema == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (_parentId == null) {
            throw new runtime.RequiredError(
                'parentId',
                'Required parameter "parentId" was null or undefined when calling ().'
            );
        }

        if (_id == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/$app$/schemas/{schema}/fields/{parentId}/nested/{id}/hide`.replace(`{${"schema"}}`, encodeURIComponent(String(_schema))).replace(`{${"parentId"}}`, encodeURIComponent(String(_parentId))).replace(`{${"id"}}`, encodeURIComponent(String(_id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemaDtoFromJSON(jsonValue));
    }

    /**
     * A hidden field is not part of the API response, but can still be edited in the portal.
     * Hide a nested field.
     */
    async hideNestedField(schema: string, parentId: number, id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto> {
        const response = await this.hideNestedFieldRaw(schema, parentId, id, initOverrides);
        return await response.value();
    }

    /**
     * A locked field cannot be updated or deleted.
     * Lock a schema field.
     */
    async lockFieldRaw(schema: string, id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>> {
        const _schema = schema;
        const _id = id;

        if (_schema == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (_id == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/$app$/schemas/{schema}/fields/{id}/lock`.replace(`{${"schema"}}`, encodeURIComponent(String(_schema))).replace(`{${"id"}}`, encodeURIComponent(String(_id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemaDtoFromJSON(jsonValue));
    }

    /**
     * A locked field cannot be updated or deleted.
     * Lock a schema field.
     */
    async lockField(schema: string, id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto> {
        const response = await this.lockFieldRaw(schema, id, initOverrides);
        return await response.value();
    }

    /**
     * A locked field cannot be edited or deleted.
     * Lock a nested field.
     */
    async lockNestedFieldRaw(schema: string, parentId: number, id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>> {
        const _schema = schema;
        const _parentId = parentId;
        const _id = id;

        if (_schema == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (_parentId == null) {
            throw new runtime.RequiredError(
                'parentId',
                'Required parameter "parentId" was null or undefined when calling ().'
            );
        }

        if (_id == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/$app$/schemas/{schema}/fields/{parentId}/nested/{id}/lock`.replace(`{${"schema"}}`, encodeURIComponent(String(_schema))).replace(`{${"parentId"}}`, encodeURIComponent(String(_parentId))).replace(`{${"id"}}`, encodeURIComponent(String(_id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemaDtoFromJSON(jsonValue));
    }

    /**
     * A locked field cannot be edited or deleted.
     * Lock a nested field.
     */
    async lockNestedField(schema: string, parentId: number, id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto> {
        const response = await this.lockNestedFieldRaw(schema, parentId, id, initOverrides);
        return await response.value();
    }

    /**
     * Add a schema field.
     */
    async postFieldRaw(schema: string, addFieldDto: AddFieldDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>> {
        const _schema = schema;
        const _addFieldDto = addFieldDto;

        if (_schema == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (_addFieldDto == null) {
            throw new runtime.RequiredError(
                'addFieldDto',
                'Required parameter "addFieldDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/apps/$app$/schemas/{schema}/fields`.replace(`{${"schema"}}`, encodeURIComponent(String(_schema))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddFieldDtoToJSON(_addFieldDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemaDtoFromJSON(jsonValue));
    }

    /**
     * Add a schema field.
     */
    async postField(schema: string, addFieldDto: AddFieldDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto> {
        const response = await this.postFieldRaw(schema, addFieldDto, initOverrides);
        return await response.value();
    }

    /**
     * Add a nested field.
     */
    async postNestedFieldRaw(schema: string, parentId: number, addFieldDto: AddFieldDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>> {
        const _schema = schema;
        const _parentId = parentId;
        const _addFieldDto = addFieldDto;

        if (_schema == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (_parentId == null) {
            throw new runtime.RequiredError(
                'parentId',
                'Required parameter "parentId" was null or undefined when calling ().'
            );
        }

        if (_addFieldDto == null) {
            throw new runtime.RequiredError(
                'addFieldDto',
                'Required parameter "addFieldDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/apps/$app$/schemas/{schema}/fields/{parentId}/nested`.replace(`{${"schema"}}`, encodeURIComponent(String(_schema))).replace(`{${"parentId"}}`, encodeURIComponent(String(_parentId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddFieldDtoToJSON(_addFieldDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemaDtoFromJSON(jsonValue));
    }

    /**
     * Add a nested field.
     */
    async postNestedField(schema: string, parentId: number, addFieldDto: AddFieldDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto> {
        const response = await this.postNestedFieldRaw(schema, parentId, addFieldDto, initOverrides);
        return await response.value();
    }

    /**
     * Update a schema field.
     */
    async putFieldRaw(schema: string, id: number, updateFieldDto: UpdateFieldDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>> {
        const _schema = schema;
        const _id = id;
        const _updateFieldDto = updateFieldDto;

        if (_schema == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (_id == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        if (_updateFieldDto == null) {
            throw new runtime.RequiredError(
                'updateFieldDto',
                'Required parameter "updateFieldDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/apps/$app$/schemas/{schema}/fields/{id}`.replace(`{${"schema"}}`, encodeURIComponent(String(_schema))).replace(`{${"id"}}`, encodeURIComponent(String(_id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateFieldDtoToJSON(_updateFieldDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemaDtoFromJSON(jsonValue));
    }

    /**
     * Update a schema field.
     */
    async putField(schema: string, id: number, updateFieldDto: UpdateFieldDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto> {
        const response = await this.putFieldRaw(schema, id, updateFieldDto, initOverrides);
        return await response.value();
    }

    /**
     * Update a nested field.
     */
    async putNestedFieldRaw(schema: string, parentId: number, id: number, updateFieldDto: UpdateFieldDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>> {
        const _schema = schema;
        const _parentId = parentId;
        const _id = id;
        const _updateFieldDto = updateFieldDto;

        if (_schema == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (_parentId == null) {
            throw new runtime.RequiredError(
                'parentId',
                'Required parameter "parentId" was null or undefined when calling ().'
            );
        }

        if (_id == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        if (_updateFieldDto == null) {
            throw new runtime.RequiredError(
                'updateFieldDto',
                'Required parameter "updateFieldDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/apps/$app$/schemas/{schema}/fields/{parentId}/nested/{id}`.replace(`{${"schema"}}`, encodeURIComponent(String(_schema))).replace(`{${"parentId"}}`, encodeURIComponent(String(_parentId))).replace(`{${"id"}}`, encodeURIComponent(String(_id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateFieldDtoToJSON(_updateFieldDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemaDtoFromJSON(jsonValue));
    }

    /**
     * Update a nested field.
     */
    async putNestedField(schema: string, parentId: number, id: number, updateFieldDto: UpdateFieldDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto> {
        const response = await this.putNestedFieldRaw(schema, parentId, id, updateFieldDto, initOverrides);
        return await response.value();
    }

    /**
     * Reorder all nested fields.
     */
    async putNestedFieldOrderingRaw(schema: string, parentId: number, reorderFieldsDto: ReorderFieldsDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>> {
        const _schema = schema;
        const _parentId = parentId;
        const _reorderFieldsDto = reorderFieldsDto;

        if (_schema == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (_parentId == null) {
            throw new runtime.RequiredError(
                'parentId',
                'Required parameter "parentId" was null or undefined when calling ().'
            );
        }

        if (_reorderFieldsDto == null) {
            throw new runtime.RequiredError(
                'reorderFieldsDto',
                'Required parameter "reorderFieldsDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/apps/$app$/schemas/{schema}/fields/{parentId}/nested/ordering`.replace(`{${"schema"}}`, encodeURIComponent(String(_schema))).replace(`{${"parentId"}}`, encodeURIComponent(String(_parentId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ReorderFieldsDtoToJSON(_reorderFieldsDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemaDtoFromJSON(jsonValue));
    }

    /**
     * Reorder all nested fields.
     */
    async putNestedFieldOrdering(schema: string, parentId: number, reorderFieldsDto: ReorderFieldsDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto> {
        const response = await this.putNestedFieldOrderingRaw(schema, parentId, reorderFieldsDto, initOverrides);
        return await response.value();
    }

    /**
     * Reorder all fields.
     */
    async putSchemaFieldOrderingRaw(schema: string, reorderFieldsDto: ReorderFieldsDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>> {
        const _schema = schema;
        const _reorderFieldsDto = reorderFieldsDto;

        if (_schema == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (_reorderFieldsDto == null) {
            throw new runtime.RequiredError(
                'reorderFieldsDto',
                'Required parameter "reorderFieldsDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/apps/$app$/schemas/{schema}/fields/ordering`.replace(`{${"schema"}}`, encodeURIComponent(String(_schema))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ReorderFieldsDtoToJSON(_reorderFieldsDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemaDtoFromJSON(jsonValue));
    }

    /**
     * Reorder all fields.
     */
    async putSchemaFieldOrdering(schema: string, reorderFieldsDto: ReorderFieldsDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto> {
        const response = await this.putSchemaFieldOrderingRaw(schema, reorderFieldsDto, initOverrides);
        return await response.value();
    }

    /**
     * Configure UI fields.
     */
    async putSchemaUIFieldsRaw(schema: string, configureUIFieldsDto: ConfigureUIFieldsDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>> {
        const _schema = schema;
        const _configureUIFieldsDto = configureUIFieldsDto;

        if (_schema == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (_configureUIFieldsDto == null) {
            throw new runtime.RequiredError(
                'configureUIFieldsDto',
                'Required parameter "configureUIFieldsDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/apps/$app$/schemas/{schema}/fields/ui`.replace(`{${"schema"}}`, encodeURIComponent(String(_schema))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ConfigureUIFieldsDtoToJSON(_configureUIFieldsDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemaDtoFromJSON(jsonValue));
    }

    /**
     * Configure UI fields.
     */
    async putSchemaUIFields(schema: string, configureUIFieldsDto: ConfigureUIFieldsDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto> {
        const response = await this.putSchemaUIFieldsRaw(schema, configureUIFieldsDto, initOverrides);
        return await response.value();
    }

    /**
     * A hidden field is not part of the API response, but can still be edited in the portal.
     * Show a schema field.
     */
    async showFieldRaw(schema: string, id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>> {
        const _schema = schema;
        const _id = id;

        if (_schema == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (_id == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/$app$/schemas/{schema}/fields/{id}/show`.replace(`{${"schema"}}`, encodeURIComponent(String(_schema))).replace(`{${"id"}}`, encodeURIComponent(String(_id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemaDtoFromJSON(jsonValue));
    }

    /**
     * A hidden field is not part of the API response, but can still be edited in the portal.
     * Show a schema field.
     */
    async showField(schema: string, id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto> {
        const response = await this.showFieldRaw(schema, id, initOverrides);
        return await response.value();
    }

    /**
     * A hidden field is not part of the API response, but can still be edited in the portal.
     * Show a nested field.
     */
    async showNestedFieldRaw(schema: string, parentId: number, id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>> {
        const _schema = schema;
        const _parentId = parentId;
        const _id = id;

        if (_schema == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (_parentId == null) {
            throw new runtime.RequiredError(
                'parentId',
                'Required parameter "parentId" was null or undefined when calling ().'
            );
        }

        if (_id == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/$app$/schemas/{schema}/fields/{parentId}/nested/{id}/show`.replace(`{${"schema"}}`, encodeURIComponent(String(_schema))).replace(`{${"parentId"}}`, encodeURIComponent(String(_parentId))).replace(`{${"id"}}`, encodeURIComponent(String(_id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemaDtoFromJSON(jsonValue));
    }

    /**
     * A hidden field is not part of the API response, but can still be edited in the portal.
     * Show a nested field.
     */
    async showNestedField(schema: string, parentId: number, id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto> {
        const response = await this.showNestedFieldRaw(schema, parentId, id, initOverrides);
        return await response.value();
    }

    /**
     * Delete a schema.
     */
    async deleteSchemaRaw(schema: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const _schema = schema;

        if (_schema == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/$app$/schemas/{schema}`.replace(`{${"schema"}}`, encodeURIComponent(String(_schema))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a schema.
     */
    async deleteSchema(schema: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSchemaRaw(schema, initOverrides);
    }

    /**
     * Get a schema by name.
     */
    async getSchemaRaw(schema: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>> {
        const _schema = schema;

        if (_schema == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/$app$/schemas/{schema}`.replace(`{${"schema"}}`, encodeURIComponent(String(_schema))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemaDtoFromJSON(jsonValue));
    }

    /**
     * Get a schema by name.
     */
    async getSchema(schema: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto> {
        const response = await this.getSchemaRaw(schema, initOverrides);
        return await response.value();
    }

    /**
     * Get schemas.
     */
    async getSchemasRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemasDto>> {

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/$app$/schemas`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemasDtoFromJSON(jsonValue));
    }

    /**
     * Get schemas.
     */
    async getSchemas(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemasDto> {
        const response = await this.getSchemasRaw(initOverrides);
        return await response.value();
    }

    /**
     * Create a new schema.
     */
    async postSchemaRaw(createSchemaDto: CreateSchemaDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>> {
        const _createSchemaDto = createSchemaDto;

        if (_createSchemaDto == null) {
            throw new runtime.RequiredError(
                'createSchemaDto',
                'Required parameter "createSchemaDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/apps/$app$/schemas`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateSchemaDtoToJSON(_createSchemaDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemaDtoFromJSON(jsonValue));
    }

    /**
     * Create a new schema.
     */
    async postSchema(createSchemaDto: CreateSchemaDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto> {
        const response = await this.postSchemaRaw(createSchemaDto, initOverrides);
        return await response.value();
    }

    /**
     * Publish a schema.
     */
    async publishSchemaRaw(schema: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>> {
        const _schema = schema;

        if (_schema == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/$app$/schemas/{schema}/publish`.replace(`{${"schema"}}`, encodeURIComponent(String(_schema))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemaDtoFromJSON(jsonValue));
    }

    /**
     * Publish a schema.
     */
    async publishSchema(schema: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto> {
        const response = await this.publishSchemaRaw(schema, initOverrides);
        return await response.value();
    }

    /**
     * Update a schema category.
     */
    async putCategoryRaw(schema: string, changeCategoryDto: ChangeCategoryDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>> {
        const _schema = schema;
        const _changeCategoryDto = changeCategoryDto;

        if (_schema == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (_changeCategoryDto == null) {
            throw new runtime.RequiredError(
                'changeCategoryDto',
                'Required parameter "changeCategoryDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/apps/$app$/schemas/{schema}/category`.replace(`{${"schema"}}`, encodeURIComponent(String(_schema))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeCategoryDtoToJSON(_changeCategoryDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemaDtoFromJSON(jsonValue));
    }

    /**
     * Update a schema category.
     */
    async putCategory(schema: string, changeCategoryDto: ChangeCategoryDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto> {
        const response = await this.putCategoryRaw(schema, changeCategoryDto, initOverrides);
        return await response.value();
    }

    /**
     * Update the preview urls.
     */
    async putPreviewUrlsRaw(schema: string, requestBody: { [key: string]: string; }, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>> {
        const _schema = schema;
        const _requestBody = requestBody;

        if (_schema == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (_requestBody == null) {
            throw new runtime.RequiredError(
                'requestBody',
                'Required parameter "requestBody" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/apps/$app$/schemas/{schema}/preview-urls`.replace(`{${"schema"}}`, encodeURIComponent(String(_schema))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: _requestBody,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemaDtoFromJSON(jsonValue));
    }

    /**
     * Update the preview urls.
     */
    async putPreviewUrls(schema: string, requestBody: { [key: string]: string; }, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto> {
        const response = await this.putPreviewUrlsRaw(schema, requestBody, initOverrides);
        return await response.value();
    }

    /**
     * Update the rules.
     */
    async putRulesRaw(schema: string, configureFieldRulesDto: ConfigureFieldRulesDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>> {
        const _schema = schema;
        const _configureFieldRulesDto = configureFieldRulesDto;

        if (_schema == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (_configureFieldRulesDto == null) {
            throw new runtime.RequiredError(
                'configureFieldRulesDto',
                'Required parameter "configureFieldRulesDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/apps/$app$/schemas/{schema}/rules`.replace(`{${"schema"}}`, encodeURIComponent(String(_schema))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ConfigureFieldRulesDtoToJSON(_configureFieldRulesDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemaDtoFromJSON(jsonValue));
    }

    /**
     * Update the rules.
     */
    async putRules(schema: string, configureFieldRulesDto: ConfigureFieldRulesDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto> {
        const response = await this.putRulesRaw(schema, configureFieldRulesDto, initOverrides);
        return await response.value();
    }

    /**
     * Update a schema.
     */
    async putSchemaRaw(schema: string, updateSchemaDto: UpdateSchemaDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>> {
        const _schema = schema;
        const _updateSchemaDto = updateSchemaDto;

        if (_schema == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (_updateSchemaDto == null) {
            throw new runtime.RequiredError(
                'updateSchemaDto',
                'Required parameter "updateSchemaDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/apps/$app$/schemas/{schema}`.replace(`{${"schema"}}`, encodeURIComponent(String(_schema))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateSchemaDtoToJSON(_updateSchemaDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemaDtoFromJSON(jsonValue));
    }

    /**
     * Update a schema.
     */
    async putSchema(schema: string, updateSchemaDto: UpdateSchemaDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto> {
        const response = await this.putSchemaRaw(schema, updateSchemaDto, initOverrides);
        return await response.value();
    }

    /**
     * Synchronize a schema.
     */
    async putSchemaSyncRaw(schema: string, synchronizeSchemaDto: SynchronizeSchemaDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>> {
        const _schema = schema;
        const _synchronizeSchemaDto = synchronizeSchemaDto;

        if (_schema == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (_synchronizeSchemaDto == null) {
            throw new runtime.RequiredError(
                'synchronizeSchemaDto',
                'Required parameter "synchronizeSchemaDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/apps/$app$/schemas/{schema}/sync`.replace(`{${"schema"}}`, encodeURIComponent(String(_schema))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SynchronizeSchemaDtoToJSON(_synchronizeSchemaDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemaDtoFromJSON(jsonValue));
    }

    /**
     * Synchronize a schema.
     */
    async putSchemaSync(schema: string, synchronizeSchemaDto: SynchronizeSchemaDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto> {
        const response = await this.putSchemaSyncRaw(schema, synchronizeSchemaDto, initOverrides);
        return await response.value();
    }

    /**
     * Update the scripts.
     */
    async putScriptsRaw(schema: string, schemaScriptsDto: SchemaScriptsDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>> {
        const _schema = schema;
        const _schemaScriptsDto = schemaScriptsDto;

        if (_schema == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (_schemaScriptsDto == null) {
            throw new runtime.RequiredError(
                'schemaScriptsDto',
                'Required parameter "schemaScriptsDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/apps/$app$/schemas/{schema}/scripts`.replace(`{${"schema"}}`, encodeURIComponent(String(_schema))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SchemaScriptsDtoToJSON(_schemaScriptsDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemaDtoFromJSON(jsonValue));
    }

    /**
     * Update the scripts.
     */
    async putScripts(schema: string, schemaScriptsDto: SchemaScriptsDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto> {
        const response = await this.putScriptsRaw(schema, schemaScriptsDto, initOverrides);
        return await response.value();
    }

    /**
     * Unpublish a schema.
     */
    async unpublishSchemaRaw(schema: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>> {
        const _schema = schema;

        if (_schema == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/$app$/schemas/{schema}/unpublish`.replace(`{${"schema"}}`, encodeURIComponent(String(_schema))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemaDtoFromJSON(jsonValue));
    }

    /**
     * Unpublish a schema.
     */
    async unpublishSchema(schema: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto> {
        const response = await this.unpublishSchemaRaw(schema, initOverrides);
        return await response.value();
    }

}
