/* tslint:disable */
/* eslint-disable */
/**
 * Squidex API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddFieldDto,
  ChangeCategoryDto,
  ConfigureFieldRulesDto,
  ConfigureUIFieldsDto,
  CreateSchemaDto,
  ErrorDto,
  ReorderFieldsDto,
  SchemaDto,
  SchemaScriptsDto,
  SchemasDto,
  SynchronizeSchemaDto,
  UpdateFieldDto,
  UpdateSchemaDto,
} from '../models/index';
import {
    AddFieldDtoFromJSON,
    AddFieldDtoToJSON,
    ChangeCategoryDtoFromJSON,
    ChangeCategoryDtoToJSON,
    ConfigureFieldRulesDtoFromJSON,
    ConfigureFieldRulesDtoToJSON,
    ConfigureUIFieldsDtoFromJSON,
    ConfigureUIFieldsDtoToJSON,
    CreateSchemaDtoFromJSON,
    CreateSchemaDtoToJSON,
    ErrorDtoFromJSON,
    ErrorDtoToJSON,
    ReorderFieldsDtoFromJSON,
    ReorderFieldsDtoToJSON,
    SchemaDtoFromJSON,
    SchemaDtoToJSON,
    SchemaScriptsDtoFromJSON,
    SchemaScriptsDtoToJSON,
    SchemasDtoFromJSON,
    SchemasDtoToJSON,
    SynchronizeSchemaDtoFromJSON,
    SynchronizeSchemaDtoToJSON,
    UpdateFieldDtoFromJSON,
    UpdateFieldDtoToJSON,
    UpdateSchemaDtoFromJSON,
    UpdateSchemaDtoToJSON,
} from '../models/index';

export interface SchemaFieldsDeleteFieldRequest {
    schema: string;
    id: number;
}

export interface SchemaFieldsDeleteNestedFieldRequest {
    schema: string;
    parentId: number;
    id: number;
}

export interface SchemaFieldsDisableFieldRequest {
    schema: string;
    id: number;
}

export interface SchemaFieldsDisableNestedFieldRequest {
    schema: string;
    parentId: number;
    id: number;
}

export interface SchemaFieldsEnableFieldRequest {
    schema: string;
    id: number;
}

export interface SchemaFieldsEnableNestedFieldRequest {
    schema: string;
    parentId: number;
    id: number;
}

export interface SchemaFieldsHideFieldRequest {
    schema: string;
    id: number;
}

export interface SchemaFieldsHideNestedFieldRequest {
    schema: string;
    parentId: number;
    id: number;
}

export interface SchemaFieldsLockFieldRequest {
    schema: string;
    id: number;
}

export interface SchemaFieldsLockNestedFieldRequest {
    schema: string;
    parentId: number;
    id: number;
}

export interface SchemaFieldsPostFieldRequest {
    schema: string;
    addFieldDto: AddFieldDto;
}

export interface SchemaFieldsPostNestedFieldRequest {
    schema: string;
    parentId: number;
    addFieldDto: AddFieldDto;
}

export interface SchemaFieldsPutFieldRequest {
    schema: string;
    id: number;
    updateFieldDto: UpdateFieldDto;
}

export interface SchemaFieldsPutNestedFieldRequest {
    schema: string;
    parentId: number;
    id: number;
    updateFieldDto: UpdateFieldDto;
}

export interface SchemaFieldsPutNestedFieldOrderingRequest {
    schema: string;
    parentId: number;
    reorderFieldsDto: ReorderFieldsDto;
}

export interface SchemaFieldsPutSchemaFieldOrderingRequest {
    schema: string;
    reorderFieldsDto: ReorderFieldsDto;
}

export interface SchemaFieldsPutSchemaUIFieldsRequest {
    schema: string;
    configureUIFieldsDto: ConfigureUIFieldsDto;
}

export interface SchemaFieldsShowFieldRequest {
    schema: string;
    id: number;
}

export interface SchemaFieldsShowNestedFieldRequest {
    schema: string;
    parentId: number;
    id: number;
}

export interface SchemasDeleteSchemaRequest {
    schema: string;
}

export interface SchemasGetSchemaRequest {
    schema: string;
}

export interface SchemasPostSchemaRequest {
    createSchemaDto: CreateSchemaDto;
}

export interface SchemasPublishSchemaRequest {
    schema: string;
}

export interface SchemasPutCategoryRequest {
    schema: string;
    changeCategoryDto: ChangeCategoryDto;
}

export interface SchemasPutPreviewUrlsRequest {
    schema: string;
    requestBody: { [key: string]: string; };
}

export interface SchemasPutRulesRequest {
    schema: string;
    configureFieldRulesDto: ConfigureFieldRulesDto;
}

export interface SchemasPutSchemaRequest {
    schema: string;
    updateSchemaDto: UpdateSchemaDto;
}

export interface SchemasPutSchemaSyncRequest {
    schema: string;
    synchronizeSchemaDto: SynchronizeSchemaDto;
}

export interface SchemasPutScriptsRequest {
    schema: string;
    schemaScriptsDto: SchemaScriptsDto;
}

export interface SchemasUnpublishSchemaRequest {
    schema: string;
}

/**
 * SchemasApi - interface
 * 
 * @export
 * @interface SchemasApiInterface
 */
export interface SchemasApiInterface {
    /**
     * 
     * @summary Delete a schema field.
     * @param {string} schema The name of the schema.
     * @param {number} id The ID of the field to disable.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApiInterface
     */
    deleteFieldRaw(requestParameters: SchemaFieldsDeleteFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>>;

    /**
     * Delete a schema field.
     */
    deleteField(requestParameters: SchemaFieldsDeleteFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto>;

    /**
     * 
     * @summary Delete a nested field.
     * @param {string} schema The name of the schema.
     * @param {number} parentId The parent field id.
     * @param {number} id The ID of the field to disable.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApiInterface
     */
    deleteNestedFieldRaw(requestParameters: SchemaFieldsDeleteNestedFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>>;

    /**
     * Delete a nested field.
     */
    deleteNestedField(requestParameters: SchemaFieldsDeleteNestedFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto>;

    /**
     * A disabled field cannot not be edited in the squidex portal anymore, but will be part of the API response.
     * @summary Disable a schema field.
     * @param {string} schema The name of the schema.
     * @param {number} id The ID of the field to disable.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApiInterface
     */
    disableFieldRaw(requestParameters: SchemaFieldsDisableFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>>;

    /**
     * A disabled field cannot not be edited in the squidex portal anymore, but will be part of the API response.
     * Disable a schema field.
     */
    disableField(requestParameters: SchemaFieldsDisableFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto>;

    /**
     * A disabled field cannot not be edited in the squidex portal anymore, but will be part of the API response.
     * @summary Disable a nested field.
     * @param {string} schema The name of the schema.
     * @param {number} parentId The parent field id.
     * @param {number} id The ID of the field to disable.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApiInterface
     */
    disableNestedFieldRaw(requestParameters: SchemaFieldsDisableNestedFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>>;

    /**
     * A disabled field cannot not be edited in the squidex portal anymore, but will be part of the API response.
     * Disable a nested field.
     */
    disableNestedField(requestParameters: SchemaFieldsDisableNestedFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto>;

    /**
     * A disabled field cannot not be edited in the squidex portal anymore, but will be part of the API response.
     * @summary Enable a schema field.
     * @param {string} schema The name of the schema.
     * @param {number} id The ID of the field to enable.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApiInterface
     */
    enableFieldRaw(requestParameters: SchemaFieldsEnableFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>>;

    /**
     * A disabled field cannot not be edited in the squidex portal anymore, but will be part of the API response.
     * Enable a schema field.
     */
    enableField(requestParameters: SchemaFieldsEnableFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto>;

    /**
     * A disabled field cannot not be edited in the squidex portal anymore, but will be part of the API response.
     * @summary Enable a nested field.
     * @param {string} schema The name of the schema.
     * @param {number} parentId The parent field id.
     * @param {number} id The ID of the field to enable.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApiInterface
     */
    enableNestedFieldRaw(requestParameters: SchemaFieldsEnableNestedFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>>;

    /**
     * A disabled field cannot not be edited in the squidex portal anymore, but will be part of the API response.
     * Enable a nested field.
     */
    enableNestedField(requestParameters: SchemaFieldsEnableNestedFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto>;

    /**
     * A hidden field is not part of the API response, but can still be edited in the portal.
     * @summary Hide a schema field.
     * @param {string} schema The name of the schema.
     * @param {number} id The ID of the field to hide.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApiInterface
     */
    hideFieldRaw(requestParameters: SchemaFieldsHideFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>>;

    /**
     * A hidden field is not part of the API response, but can still be edited in the portal.
     * Hide a schema field.
     */
    hideField(requestParameters: SchemaFieldsHideFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto>;

    /**
     * A hidden field is not part of the API response, but can still be edited in the portal.
     * @summary Hide a nested field.
     * @param {string} schema The name of the schema.
     * @param {number} parentId The parent field id.
     * @param {number} id The ID of the field to hide.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApiInterface
     */
    hideNestedFieldRaw(requestParameters: SchemaFieldsHideNestedFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>>;

    /**
     * A hidden field is not part of the API response, but can still be edited in the portal.
     * Hide a nested field.
     */
    hideNestedField(requestParameters: SchemaFieldsHideNestedFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto>;

    /**
     * A locked field cannot be updated or deleted.
     * @summary Lock a schema field.
     * @param {string} schema The name of the schema.
     * @param {number} id The ID of the field to lock.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApiInterface
     */
    lockFieldRaw(requestParameters: SchemaFieldsLockFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>>;

    /**
     * A locked field cannot be updated or deleted.
     * Lock a schema field.
     */
    lockField(requestParameters: SchemaFieldsLockFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto>;

    /**
     * A locked field cannot be edited or deleted.
     * @summary Lock a nested field.
     * @param {string} schema The name of the schema.
     * @param {number} parentId The parent field id.
     * @param {number} id The ID of the field to lock.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApiInterface
     */
    lockNestedFieldRaw(requestParameters: SchemaFieldsLockNestedFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>>;

    /**
     * A locked field cannot be edited or deleted.
     * Lock a nested field.
     */
    lockNestedField(requestParameters: SchemaFieldsLockNestedFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto>;

    /**
     * 
     * @summary Add a schema field.
     * @param {string} schema The name of the schema.
     * @param {AddFieldDto} addFieldDto The field object that needs to be added to the schema.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApiInterface
     */
    postFieldRaw(requestParameters: SchemaFieldsPostFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>>;

    /**
     * Add a schema field.
     */
    postField(requestParameters: SchemaFieldsPostFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto>;

    /**
     * 
     * @summary Add a nested field.
     * @param {string} schema The name of the schema.
     * @param {number} parentId The parent field id.
     * @param {AddFieldDto} addFieldDto The field object that needs to be added to the schema.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApiInterface
     */
    postNestedFieldRaw(requestParameters: SchemaFieldsPostNestedFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>>;

    /**
     * Add a nested field.
     */
    postNestedField(requestParameters: SchemaFieldsPostNestedFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto>;

    /**
     * 
     * @summary Update a schema field.
     * @param {string} schema The name of the schema.
     * @param {number} id The ID of the field to update.
     * @param {UpdateFieldDto} updateFieldDto The field object that needs to be added to the schema.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApiInterface
     */
    putFieldRaw(requestParameters: SchemaFieldsPutFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>>;

    /**
     * Update a schema field.
     */
    putField(requestParameters: SchemaFieldsPutFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto>;

    /**
     * 
     * @summary Update a nested field.
     * @param {string} schema The name of the schema.
     * @param {number} parentId The parent field id.
     * @param {number} id The ID of the field to update.
     * @param {UpdateFieldDto} updateFieldDto The field object that needs to be added to the schema.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApiInterface
     */
    putNestedFieldRaw(requestParameters: SchemaFieldsPutNestedFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>>;

    /**
     * Update a nested field.
     */
    putNestedField(requestParameters: SchemaFieldsPutNestedFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto>;

    /**
     * 
     * @summary Reorder all nested fields.
     * @param {string} schema The name of the schema.
     * @param {number} parentId The parent field id.
     * @param {ReorderFieldsDto} reorderFieldsDto The request that contains the field ids.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApiInterface
     */
    putNestedFieldOrderingRaw(requestParameters: SchemaFieldsPutNestedFieldOrderingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>>;

    /**
     * Reorder all nested fields.
     */
    putNestedFieldOrdering(requestParameters: SchemaFieldsPutNestedFieldOrderingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto>;

    /**
     * 
     * @summary Reorder all fields.
     * @param {string} schema The name of the schema.
     * @param {ReorderFieldsDto} reorderFieldsDto The request that contains the field ids.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApiInterface
     */
    putSchemaFieldOrderingRaw(requestParameters: SchemaFieldsPutSchemaFieldOrderingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>>;

    /**
     * Reorder all fields.
     */
    putSchemaFieldOrdering(requestParameters: SchemaFieldsPutSchemaFieldOrderingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto>;

    /**
     * 
     * @summary Configure UI fields.
     * @param {string} schema The name of the schema.
     * @param {ConfigureUIFieldsDto} configureUIFieldsDto The request that contains the field names.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApiInterface
     */
    putSchemaUIFieldsRaw(requestParameters: SchemaFieldsPutSchemaUIFieldsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>>;

    /**
     * Configure UI fields.
     */
    putSchemaUIFields(requestParameters: SchemaFieldsPutSchemaUIFieldsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto>;

    /**
     * A hidden field is not part of the API response, but can still be edited in the portal.
     * @summary Show a schema field.
     * @param {string} schema The name of the schema.
     * @param {number} id The ID of the field to show.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApiInterface
     */
    showFieldRaw(requestParameters: SchemaFieldsShowFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>>;

    /**
     * A hidden field is not part of the API response, but can still be edited in the portal.
     * Show a schema field.
     */
    showField(requestParameters: SchemaFieldsShowFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto>;

    /**
     * A hidden field is not part of the API response, but can still be edited in the portal.
     * @summary Show a nested field.
     * @param {string} schema The name of the schema.
     * @param {number} parentId The parent field id.
     * @param {number} id The ID of the field to show.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApiInterface
     */
    showNestedFieldRaw(requestParameters: SchemaFieldsShowNestedFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>>;

    /**
     * A hidden field is not part of the API response, but can still be edited in the portal.
     * Show a nested field.
     */
    showNestedField(requestParameters: SchemaFieldsShowNestedFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto>;

    /**
     * 
     * @summary Delete a schema.
     * @param {string} schema The name of the schema to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApiInterface
     */
    deleteSchemaRaw(requestParameters: SchemasDeleteSchemaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete a schema.
     */
    deleteSchema(requestParameters: SchemasDeleteSchemaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Get a schema by name.
     * @param {string} schema The name of the schema to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApiInterface
     */
    getSchemaRaw(requestParameters: SchemasGetSchemaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>>;

    /**
     * Get a schema by name.
     */
    getSchema(requestParameters: SchemasGetSchemaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto>;

    /**
     * 
     * @summary Get schemas.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApiInterface
     */
    getSchemasRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemasDto>>;

    /**
     * Get schemas.
     */
    getSchemas(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemasDto>;

    /**
     * 
     * @summary Create a new schema.
     * @param {CreateSchemaDto} createSchemaDto The schema object that needs to be added to the app.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApiInterface
     */
    postSchemaRaw(requestParameters: SchemasPostSchemaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>>;

    /**
     * Create a new schema.
     */
    postSchema(requestParameters: SchemasPostSchemaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto>;

    /**
     * 
     * @summary Publish a schema.
     * @param {string} schema The name of the schema to publish.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApiInterface
     */
    publishSchemaRaw(requestParameters: SchemasPublishSchemaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>>;

    /**
     * Publish a schema.
     */
    publishSchema(requestParameters: SchemasPublishSchemaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto>;

    /**
     * 
     * @summary Update a schema category.
     * @param {string} schema The name of the schema.
     * @param {ChangeCategoryDto} changeCategoryDto The schema object that needs to updated.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApiInterface
     */
    putCategoryRaw(requestParameters: SchemasPutCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>>;

    /**
     * Update a schema category.
     */
    putCategory(requestParameters: SchemasPutCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto>;

    /**
     * 
     * @summary Update the preview urls.
     * @param {string} schema The name of the schema.
     * @param {{ [key: string]: string; }} requestBody The preview urls for the schema.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApiInterface
     */
    putPreviewUrlsRaw(requestParameters: SchemasPutPreviewUrlsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>>;

    /**
     * Update the preview urls.
     */
    putPreviewUrls(requestParameters: SchemasPutPreviewUrlsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto>;

    /**
     * 
     * @summary Update the rules.
     * @param {string} schema The name of the schema.
     * @param {ConfigureFieldRulesDto} configureFieldRulesDto The schema rules object that needs to updated.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApiInterface
     */
    putRulesRaw(requestParameters: SchemasPutRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>>;

    /**
     * Update the rules.
     */
    putRules(requestParameters: SchemasPutRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto>;

    /**
     * 
     * @summary Update a schema.
     * @param {string} schema The name of the schema.
     * @param {UpdateSchemaDto} updateSchemaDto The schema object that needs to updated.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApiInterface
     */
    putSchemaRaw(requestParameters: SchemasPutSchemaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>>;

    /**
     * Update a schema.
     */
    putSchema(requestParameters: SchemasPutSchemaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto>;

    /**
     * 
     * @summary Synchronize a schema.
     * @param {string} schema The name of the schema.
     * @param {SynchronizeSchemaDto} synchronizeSchemaDto The schema object that needs to updated.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApiInterface
     */
    putSchemaSyncRaw(requestParameters: SchemasPutSchemaSyncRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>>;

    /**
     * Synchronize a schema.
     */
    putSchemaSync(requestParameters: SchemasPutSchemaSyncRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto>;

    /**
     * 
     * @summary Update the scripts.
     * @param {string} schema The name of the schema.
     * @param {SchemaScriptsDto} schemaScriptsDto The schema scripts object that needs to updated.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApiInterface
     */
    putScriptsRaw(requestParameters: SchemasPutScriptsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>>;

    /**
     * Update the scripts.
     */
    putScripts(requestParameters: SchemasPutScriptsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto>;

    /**
     * 
     * @summary Unpublish a schema.
     * @param {string} schema The name of the schema to unpublish.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemasApiInterface
     */
    unpublishSchemaRaw(requestParameters: SchemasUnpublishSchemaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>>;

    /**
     * Unpublish a schema.
     */
    unpublishSchema(requestParameters: SchemasUnpublishSchemaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto>;

}

/**
 * 
 */
export class SchemasApi extends runtime.BaseAPI implements SchemasApiInterface {

    /**
     * Delete a schema field.
     */
    async deleteFieldRaw(requestParameters: SchemaFieldsDeleteFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>> {
        if (requestParameters['schema'] == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/$app$/schemas/{schema}/fields/{id}`.replace(`{${"schema"}}`, encodeURIComponent(String((requestParameters as any)['schema']))).replace(`{${"id"}}`, encodeURIComponent(String((requestParameters as any)['id']))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemaDtoFromJSON(jsonValue));
    }

    /**
     * Delete a schema field.
     */
    async deleteField(requestParameters: SchemaFieldsDeleteFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto> {
        const response = await this.deleteFieldRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a nested field.
     */
    async deleteNestedFieldRaw(requestParameters: SchemaFieldsDeleteNestedFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>> {
        if (requestParameters['schema'] == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (requestParameters['parentId'] == null) {
            throw new runtime.RequiredError(
                'parentId',
                'Required parameter "parentId" was null or undefined when calling ().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/$app$/schemas/{schema}/fields/{parentId}/nested/{id}`.replace(`{${"schema"}}`, encodeURIComponent(String((requestParameters as any)['schema']))).replace(`{${"parentId"}}`, encodeURIComponent(String((requestParameters as any)['parentId']))).replace(`{${"id"}}`, encodeURIComponent(String((requestParameters as any)['id']))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemaDtoFromJSON(jsonValue));
    }

    /**
     * Delete a nested field.
     */
    async deleteNestedField(requestParameters: SchemaFieldsDeleteNestedFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto> {
        const response = await this.deleteNestedFieldRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A disabled field cannot not be edited in the squidex portal anymore, but will be part of the API response.
     * Disable a schema field.
     */
    async disableFieldRaw(requestParameters: SchemaFieldsDisableFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>> {
        if (requestParameters['schema'] == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/$app$/schemas/{schema}/fields/{id}/disable`.replace(`{${"schema"}}`, encodeURIComponent(String((requestParameters as any)['schema']))).replace(`{${"id"}}`, encodeURIComponent(String((requestParameters as any)['id']))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemaDtoFromJSON(jsonValue));
    }

    /**
     * A disabled field cannot not be edited in the squidex portal anymore, but will be part of the API response.
     * Disable a schema field.
     */
    async disableField(requestParameters: SchemaFieldsDisableFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto> {
        const response = await this.disableFieldRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A disabled field cannot not be edited in the squidex portal anymore, but will be part of the API response.
     * Disable a nested field.
     */
    async disableNestedFieldRaw(requestParameters: SchemaFieldsDisableNestedFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>> {
        if (requestParameters['schema'] == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (requestParameters['parentId'] == null) {
            throw new runtime.RequiredError(
                'parentId',
                'Required parameter "parentId" was null or undefined when calling ().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/$app$/schemas/{schema}/fields/{parentId}/nested/{id}/disable`.replace(`{${"schema"}}`, encodeURIComponent(String((requestParameters as any)['schema']))).replace(`{${"parentId"}}`, encodeURIComponent(String((requestParameters as any)['parentId']))).replace(`{${"id"}}`, encodeURIComponent(String((requestParameters as any)['id']))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemaDtoFromJSON(jsonValue));
    }

    /**
     * A disabled field cannot not be edited in the squidex portal anymore, but will be part of the API response.
     * Disable a nested field.
     */
    async disableNestedField(requestParameters: SchemaFieldsDisableNestedFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto> {
        const response = await this.disableNestedFieldRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A disabled field cannot not be edited in the squidex portal anymore, but will be part of the API response.
     * Enable a schema field.
     */
    async enableFieldRaw(requestParameters: SchemaFieldsEnableFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>> {
        if (requestParameters['schema'] == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/$app$/schemas/{schema}/fields/{id}/enable`.replace(`{${"schema"}}`, encodeURIComponent(String((requestParameters as any)['schema']))).replace(`{${"id"}}`, encodeURIComponent(String((requestParameters as any)['id']))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemaDtoFromJSON(jsonValue));
    }

    /**
     * A disabled field cannot not be edited in the squidex portal anymore, but will be part of the API response.
     * Enable a schema field.
     */
    async enableField(requestParameters: SchemaFieldsEnableFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto> {
        const response = await this.enableFieldRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A disabled field cannot not be edited in the squidex portal anymore, but will be part of the API response.
     * Enable a nested field.
     */
    async enableNestedFieldRaw(requestParameters: SchemaFieldsEnableNestedFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>> {
        if (requestParameters['schema'] == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (requestParameters['parentId'] == null) {
            throw new runtime.RequiredError(
                'parentId',
                'Required parameter "parentId" was null or undefined when calling ().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/$app$/schemas/{schema}/fields/{parentId}/nested/{id}/enable`.replace(`{${"schema"}}`, encodeURIComponent(String((requestParameters as any)['schema']))).replace(`{${"parentId"}}`, encodeURIComponent(String((requestParameters as any)['parentId']))).replace(`{${"id"}}`, encodeURIComponent(String((requestParameters as any)['id']))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemaDtoFromJSON(jsonValue));
    }

    /**
     * A disabled field cannot not be edited in the squidex portal anymore, but will be part of the API response.
     * Enable a nested field.
     */
    async enableNestedField(requestParameters: SchemaFieldsEnableNestedFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto> {
        const response = await this.enableNestedFieldRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A hidden field is not part of the API response, but can still be edited in the portal.
     * Hide a schema field.
     */
    async hideFieldRaw(requestParameters: SchemaFieldsHideFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>> {
        if (requestParameters['schema'] == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/$app$/schemas/{schema}/fields/{id}/hide`.replace(`{${"schema"}}`, encodeURIComponent(String((requestParameters as any)['schema']))).replace(`{${"id"}}`, encodeURIComponent(String((requestParameters as any)['id']))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemaDtoFromJSON(jsonValue));
    }

    /**
     * A hidden field is not part of the API response, but can still be edited in the portal.
     * Hide a schema field.
     */
    async hideField(requestParameters: SchemaFieldsHideFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto> {
        const response = await this.hideFieldRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A hidden field is not part of the API response, but can still be edited in the portal.
     * Hide a nested field.
     */
    async hideNestedFieldRaw(requestParameters: SchemaFieldsHideNestedFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>> {
        if (requestParameters['schema'] == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (requestParameters['parentId'] == null) {
            throw new runtime.RequiredError(
                'parentId',
                'Required parameter "parentId" was null or undefined when calling ().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/$app$/schemas/{schema}/fields/{parentId}/nested/{id}/hide`.replace(`{${"schema"}}`, encodeURIComponent(String((requestParameters as any)['schema']))).replace(`{${"parentId"}}`, encodeURIComponent(String((requestParameters as any)['parentId']))).replace(`{${"id"}}`, encodeURIComponent(String((requestParameters as any)['id']))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemaDtoFromJSON(jsonValue));
    }

    /**
     * A hidden field is not part of the API response, but can still be edited in the portal.
     * Hide a nested field.
     */
    async hideNestedField(requestParameters: SchemaFieldsHideNestedFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto> {
        const response = await this.hideNestedFieldRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A locked field cannot be updated or deleted.
     * Lock a schema field.
     */
    async lockFieldRaw(requestParameters: SchemaFieldsLockFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>> {
        if (requestParameters['schema'] == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/$app$/schemas/{schema}/fields/{id}/lock`.replace(`{${"schema"}}`, encodeURIComponent(String((requestParameters as any)['schema']))).replace(`{${"id"}}`, encodeURIComponent(String((requestParameters as any)['id']))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemaDtoFromJSON(jsonValue));
    }

    /**
     * A locked field cannot be updated or deleted.
     * Lock a schema field.
     */
    async lockField(requestParameters: SchemaFieldsLockFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto> {
        const response = await this.lockFieldRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A locked field cannot be edited or deleted.
     * Lock a nested field.
     */
    async lockNestedFieldRaw(requestParameters: SchemaFieldsLockNestedFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>> {
        if (requestParameters['schema'] == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (requestParameters['parentId'] == null) {
            throw new runtime.RequiredError(
                'parentId',
                'Required parameter "parentId" was null or undefined when calling ().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/$app$/schemas/{schema}/fields/{parentId}/nested/{id}/lock`.replace(`{${"schema"}}`, encodeURIComponent(String((requestParameters as any)['schema']))).replace(`{${"parentId"}}`, encodeURIComponent(String((requestParameters as any)['parentId']))).replace(`{${"id"}}`, encodeURIComponent(String((requestParameters as any)['id']))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemaDtoFromJSON(jsonValue));
    }

    /**
     * A locked field cannot be edited or deleted.
     * Lock a nested field.
     */
    async lockNestedField(requestParameters: SchemaFieldsLockNestedFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto> {
        const response = await this.lockNestedFieldRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add a schema field.
     */
    async postFieldRaw(requestParameters: SchemaFieldsPostFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>> {
        if (requestParameters['schema'] == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (requestParameters['addFieldDto'] == null) {
            throw new runtime.RequiredError(
                'addFieldDto',
                'Required parameter "addFieldDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/apps/$app$/schemas/{schema}/fields`.replace(`{${"schema"}}`, encodeURIComponent(String((requestParameters as any)['schema']))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddFieldDtoToJSON(requestParameters['addFieldDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemaDtoFromJSON(jsonValue));
    }

    /**
     * Add a schema field.
     */
    async postField(requestParameters: SchemaFieldsPostFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto> {
        const response = await this.postFieldRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add a nested field.
     */
    async postNestedFieldRaw(requestParameters: SchemaFieldsPostNestedFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>> {
        if (requestParameters['schema'] == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (requestParameters['parentId'] == null) {
            throw new runtime.RequiredError(
                'parentId',
                'Required parameter "parentId" was null or undefined when calling ().'
            );
        }

        if (requestParameters['addFieldDto'] == null) {
            throw new runtime.RequiredError(
                'addFieldDto',
                'Required parameter "addFieldDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/apps/$app$/schemas/{schema}/fields/{parentId}/nested`.replace(`{${"schema"}}`, encodeURIComponent(String((requestParameters as any)['schema']))).replace(`{${"parentId"}}`, encodeURIComponent(String((requestParameters as any)['parentId']))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddFieldDtoToJSON(requestParameters['addFieldDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemaDtoFromJSON(jsonValue));
    }

    /**
     * Add a nested field.
     */
    async postNestedField(requestParameters: SchemaFieldsPostNestedFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto> {
        const response = await this.postNestedFieldRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a schema field.
     */
    async putFieldRaw(requestParameters: SchemaFieldsPutFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>> {
        if (requestParameters['schema'] == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        if (requestParameters['updateFieldDto'] == null) {
            throw new runtime.RequiredError(
                'updateFieldDto',
                'Required parameter "updateFieldDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/apps/$app$/schemas/{schema}/fields/{id}`.replace(`{${"schema"}}`, encodeURIComponent(String((requestParameters as any)['schema']))).replace(`{${"id"}}`, encodeURIComponent(String((requestParameters as any)['id']))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateFieldDtoToJSON(requestParameters['updateFieldDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemaDtoFromJSON(jsonValue));
    }

    /**
     * Update a schema field.
     */
    async putField(requestParameters: SchemaFieldsPutFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto> {
        const response = await this.putFieldRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a nested field.
     */
    async putNestedFieldRaw(requestParameters: SchemaFieldsPutNestedFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>> {
        if (requestParameters['schema'] == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (requestParameters['parentId'] == null) {
            throw new runtime.RequiredError(
                'parentId',
                'Required parameter "parentId" was null or undefined when calling ().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        if (requestParameters['updateFieldDto'] == null) {
            throw new runtime.RequiredError(
                'updateFieldDto',
                'Required parameter "updateFieldDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/apps/$app$/schemas/{schema}/fields/{parentId}/nested/{id}`.replace(`{${"schema"}}`, encodeURIComponent(String((requestParameters as any)['schema']))).replace(`{${"parentId"}}`, encodeURIComponent(String((requestParameters as any)['parentId']))).replace(`{${"id"}}`, encodeURIComponent(String((requestParameters as any)['id']))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateFieldDtoToJSON(requestParameters['updateFieldDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemaDtoFromJSON(jsonValue));
    }

    /**
     * Update a nested field.
     */
    async putNestedField(requestParameters: SchemaFieldsPutNestedFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto> {
        const response = await this.putNestedFieldRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Reorder all nested fields.
     */
    async putNestedFieldOrderingRaw(requestParameters: SchemaFieldsPutNestedFieldOrderingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>> {
        if (requestParameters['schema'] == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (requestParameters['parentId'] == null) {
            throw new runtime.RequiredError(
                'parentId',
                'Required parameter "parentId" was null or undefined when calling ().'
            );
        }

        if (requestParameters['reorderFieldsDto'] == null) {
            throw new runtime.RequiredError(
                'reorderFieldsDto',
                'Required parameter "reorderFieldsDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/apps/$app$/schemas/{schema}/fields/{parentId}/nested/ordering`.replace(`{${"schema"}}`, encodeURIComponent(String((requestParameters as any)['schema']))).replace(`{${"parentId"}}`, encodeURIComponent(String((requestParameters as any)['parentId']))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ReorderFieldsDtoToJSON(requestParameters['reorderFieldsDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemaDtoFromJSON(jsonValue));
    }

    /**
     * Reorder all nested fields.
     */
    async putNestedFieldOrdering(requestParameters: SchemaFieldsPutNestedFieldOrderingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto> {
        const response = await this.putNestedFieldOrderingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Reorder all fields.
     */
    async putSchemaFieldOrderingRaw(requestParameters: SchemaFieldsPutSchemaFieldOrderingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>> {
        if (requestParameters['schema'] == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (requestParameters['reorderFieldsDto'] == null) {
            throw new runtime.RequiredError(
                'reorderFieldsDto',
                'Required parameter "reorderFieldsDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/apps/$app$/schemas/{schema}/fields/ordering`.replace(`{${"schema"}}`, encodeURIComponent(String((requestParameters as any)['schema']))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ReorderFieldsDtoToJSON(requestParameters['reorderFieldsDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemaDtoFromJSON(jsonValue));
    }

    /**
     * Reorder all fields.
     */
    async putSchemaFieldOrdering(requestParameters: SchemaFieldsPutSchemaFieldOrderingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto> {
        const response = await this.putSchemaFieldOrderingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Configure UI fields.
     */
    async putSchemaUIFieldsRaw(requestParameters: SchemaFieldsPutSchemaUIFieldsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>> {
        if (requestParameters['schema'] == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (requestParameters['configureUIFieldsDto'] == null) {
            throw new runtime.RequiredError(
                'configureUIFieldsDto',
                'Required parameter "configureUIFieldsDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/apps/$app$/schemas/{schema}/fields/ui`.replace(`{${"schema"}}`, encodeURIComponent(String((requestParameters as any)['schema']))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ConfigureUIFieldsDtoToJSON(requestParameters['configureUIFieldsDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemaDtoFromJSON(jsonValue));
    }

    /**
     * Configure UI fields.
     */
    async putSchemaUIFields(requestParameters: SchemaFieldsPutSchemaUIFieldsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto> {
        const response = await this.putSchemaUIFieldsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A hidden field is not part of the API response, but can still be edited in the portal.
     * Show a schema field.
     */
    async showFieldRaw(requestParameters: SchemaFieldsShowFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>> {
        if (requestParameters['schema'] == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/$app$/schemas/{schema}/fields/{id}/show`.replace(`{${"schema"}}`, encodeURIComponent(String((requestParameters as any)['schema']))).replace(`{${"id"}}`, encodeURIComponent(String((requestParameters as any)['id']))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemaDtoFromJSON(jsonValue));
    }

    /**
     * A hidden field is not part of the API response, but can still be edited in the portal.
     * Show a schema field.
     */
    async showField(requestParameters: SchemaFieldsShowFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto> {
        const response = await this.showFieldRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A hidden field is not part of the API response, but can still be edited in the portal.
     * Show a nested field.
     */
    async showNestedFieldRaw(requestParameters: SchemaFieldsShowNestedFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>> {
        if (requestParameters['schema'] == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (requestParameters['parentId'] == null) {
            throw new runtime.RequiredError(
                'parentId',
                'Required parameter "parentId" was null or undefined when calling ().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/$app$/schemas/{schema}/fields/{parentId}/nested/{id}/show`.replace(`{${"schema"}}`, encodeURIComponent(String((requestParameters as any)['schema']))).replace(`{${"parentId"}}`, encodeURIComponent(String((requestParameters as any)['parentId']))).replace(`{${"id"}}`, encodeURIComponent(String((requestParameters as any)['id']))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemaDtoFromJSON(jsonValue));
    }

    /**
     * A hidden field is not part of the API response, but can still be edited in the portal.
     * Show a nested field.
     */
    async showNestedField(requestParameters: SchemaFieldsShowNestedFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto> {
        const response = await this.showNestedFieldRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a schema.
     */
    async deleteSchemaRaw(requestParameters: SchemasDeleteSchemaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['schema'] == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/$app$/schemas/{schema}`.replace(`{${"schema"}}`, encodeURIComponent(String((requestParameters as any)['schema']))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a schema.
     */
    async deleteSchema(requestParameters: SchemasDeleteSchemaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSchemaRaw(requestParameters, initOverrides);
    }

    /**
     * Get a schema by name.
     */
    async getSchemaRaw(requestParameters: SchemasGetSchemaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>> {
        if (requestParameters['schema'] == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/$app$/schemas/{schema}`.replace(`{${"schema"}}`, encodeURIComponent(String((requestParameters as any)['schema']))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemaDtoFromJSON(jsonValue));
    }

    /**
     * Get a schema by name.
     */
    async getSchema(requestParameters: SchemasGetSchemaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto> {
        const response = await this.getSchemaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get schemas.
     */
    async getSchemasRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemasDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/$app$/schemas`.replace("$app$", encodeURIComponent(this.appName)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemasDtoFromJSON(jsonValue));
    }

    /**
     * Get schemas.
     */
    async getSchemas(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemasDto> {
        const response = await this.getSchemasRaw(initOverrides);
        return await response.value();
    }

    /**
     * Create a new schema.
     */
    async postSchemaRaw(requestParameters: SchemasPostSchemaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>> {
        if (requestParameters['createSchemaDto'] == null) {
            throw new runtime.RequiredError(
                'createSchemaDto',
                'Required parameter "createSchemaDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/apps/$app$/schemas`.replace("$app$", encodeURIComponent(this.appName)),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateSchemaDtoToJSON(requestParameters['createSchemaDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemaDtoFromJSON(jsonValue));
    }

    /**
     * Create a new schema.
     */
    async postSchema(requestParameters: SchemasPostSchemaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto> {
        const response = await this.postSchemaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Publish a schema.
     */
    async publishSchemaRaw(requestParameters: SchemasPublishSchemaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>> {
        if (requestParameters['schema'] == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/$app$/schemas/{schema}/publish`.replace(`{${"schema"}}`, encodeURIComponent(String((requestParameters as any)['schema']))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemaDtoFromJSON(jsonValue));
    }

    /**
     * Publish a schema.
     */
    async publishSchema(requestParameters: SchemasPublishSchemaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto> {
        const response = await this.publishSchemaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a schema category.
     */
    async putCategoryRaw(requestParameters: SchemasPutCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>> {
        if (requestParameters['schema'] == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (requestParameters['changeCategoryDto'] == null) {
            throw new runtime.RequiredError(
                'changeCategoryDto',
                'Required parameter "changeCategoryDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/apps/$app$/schemas/{schema}/category`.replace(`{${"schema"}}`, encodeURIComponent(String((requestParameters as any)['schema']))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeCategoryDtoToJSON(requestParameters['changeCategoryDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemaDtoFromJSON(jsonValue));
    }

    /**
     * Update a schema category.
     */
    async putCategory(requestParameters: SchemasPutCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto> {
        const response = await this.putCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the preview urls.
     */
    async putPreviewUrlsRaw(requestParameters: SchemasPutPreviewUrlsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>> {
        if (requestParameters['schema'] == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (requestParameters['requestBody'] == null) {
            throw new runtime.RequiredError(
                'requestBody',
                'Required parameter "requestBody" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/apps/$app$/schemas/{schema}/preview-urls`.replace(`{${"schema"}}`, encodeURIComponent(String((requestParameters as any)['schema']))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemaDtoFromJSON(jsonValue));
    }

    /**
     * Update the preview urls.
     */
    async putPreviewUrls(requestParameters: SchemasPutPreviewUrlsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto> {
        const response = await this.putPreviewUrlsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the rules.
     */
    async putRulesRaw(requestParameters: SchemasPutRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>> {
        if (requestParameters['schema'] == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (requestParameters['configureFieldRulesDto'] == null) {
            throw new runtime.RequiredError(
                'configureFieldRulesDto',
                'Required parameter "configureFieldRulesDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/apps/$app$/schemas/{schema}/rules`.replace(`{${"schema"}}`, encodeURIComponent(String((requestParameters as any)['schema']))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ConfigureFieldRulesDtoToJSON(requestParameters['configureFieldRulesDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemaDtoFromJSON(jsonValue));
    }

    /**
     * Update the rules.
     */
    async putRules(requestParameters: SchemasPutRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto> {
        const response = await this.putRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a schema.
     */
    async putSchemaRaw(requestParameters: SchemasPutSchemaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>> {
        if (requestParameters['schema'] == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (requestParameters['updateSchemaDto'] == null) {
            throw new runtime.RequiredError(
                'updateSchemaDto',
                'Required parameter "updateSchemaDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/apps/$app$/schemas/{schema}`.replace(`{${"schema"}}`, encodeURIComponent(String((requestParameters as any)['schema']))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateSchemaDtoToJSON(requestParameters['updateSchemaDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemaDtoFromJSON(jsonValue));
    }

    /**
     * Update a schema.
     */
    async putSchema(requestParameters: SchemasPutSchemaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto> {
        const response = await this.putSchemaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Synchronize a schema.
     */
    async putSchemaSyncRaw(requestParameters: SchemasPutSchemaSyncRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>> {
        if (requestParameters['schema'] == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (requestParameters['synchronizeSchemaDto'] == null) {
            throw new runtime.RequiredError(
                'synchronizeSchemaDto',
                'Required parameter "synchronizeSchemaDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/apps/$app$/schemas/{schema}/sync`.replace(`{${"schema"}}`, encodeURIComponent(String((requestParameters as any)['schema']))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SynchronizeSchemaDtoToJSON(requestParameters['synchronizeSchemaDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemaDtoFromJSON(jsonValue));
    }

    /**
     * Synchronize a schema.
     */
    async putSchemaSync(requestParameters: SchemasPutSchemaSyncRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto> {
        const response = await this.putSchemaSyncRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the scripts.
     */
    async putScriptsRaw(requestParameters: SchemasPutScriptsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>> {
        if (requestParameters['schema'] == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        if (requestParameters['schemaScriptsDto'] == null) {
            throw new runtime.RequiredError(
                'schemaScriptsDto',
                'Required parameter "schemaScriptsDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/apps/$app$/schemas/{schema}/scripts`.replace(`{${"schema"}}`, encodeURIComponent(String((requestParameters as any)['schema']))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SchemaScriptsDtoToJSON(requestParameters['schemaScriptsDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemaDtoFromJSON(jsonValue));
    }

    /**
     * Update the scripts.
     */
    async putScripts(requestParameters: SchemasPutScriptsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto> {
        const response = await this.putScriptsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Unpublish a schema.
     */
    async unpublishSchemaRaw(requestParameters: SchemasUnpublishSchemaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDto>> {
        if (requestParameters['schema'] == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/$app$/schemas/{schema}/unpublish`.replace(`{${"schema"}}`, encodeURIComponent(String((requestParameters as any)['schema']))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemaDtoFromJSON(jsonValue));
    }

    /**
     * Unpublish a schema.
     */
    async unpublishSchema(requestParameters: SchemasUnpublishSchemaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDto> {
        const response = await this.unpublishSchemaRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
