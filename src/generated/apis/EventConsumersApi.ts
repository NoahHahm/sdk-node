/**
 * Squidex API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  EventConsumerDto,
  EventConsumersDto,
} from '../models/index';
import {
    EventConsumerDtoFromJSON,
    EventConsumersDtoFromJSON,
} from '../models/index';

export interface EventConsumersResetEventConsumerRequestRaw {
    consumerName: string;
}

export interface EventConsumersStartEventConsumerRequestRaw {
    consumerName: string;
}

export interface EventConsumersStopEventConsumerRequestRaw {
    consumerName: string;
}

/**
 * EventConsumersApi - interface
 * 
 * @export
 * @interface EventConsumersApiInterface
 */
export interface EventConsumersApiInterface {
    /**
     * 
     * @summary Get event consumers.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventConsumersApiInterface
     */
    getEventConsumersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventConsumersDto>>;

    /**
     * Get event consumers.
     */
    getEventConsumers(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventConsumersDto>;

    /**
     * 
     * @summary Reset an event consumer.
     * @param {string} consumerName The name of the event consumer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventConsumersApiInterface
     */
    resetEventConsumerRaw(consumerName: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventConsumerDto>>;

    /**
     * Reset an event consumer.
     */
    resetEventConsumer(consumerName: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventConsumerDto>;

    /**
     * 
     * @summary Start an event consumer.
     * @param {string} consumerName The name of the event consumer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventConsumersApiInterface
     */
    startEventConsumerRaw(consumerName: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventConsumerDto>>;

    /**
     * Start an event consumer.
     */
    startEventConsumer(consumerName: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventConsumerDto>;

    /**
     * 
     * @summary Stop an event consumer.
     * @param {string} consumerName The name of the event consumer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventConsumersApiInterface
     */
    stopEventConsumerRaw(consumerName: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventConsumerDto>>;

    /**
     * Stop an event consumer.
     */
    stopEventConsumer(consumerName: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventConsumerDto>;

}

/**
 * 
 */
export class EventConsumersApi extends runtime.BaseAPI implements EventConsumersApiInterface {

    /**
     * Get event consumers.
     */
    async getEventConsumersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventConsumersDto>> {

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/event-consumers`.replace("$app$", encodeURIComponent(this.appName)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventConsumersDtoFromJSON(jsonValue));
    }

    /**
     * Get event consumers.
     */
    async getEventConsumers(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventConsumersDto> {
        const response = await this.getEventConsumersRaw(initOverrides);
        return await response.value();
    }

    /**
     * Reset an event consumer.
     */
    async resetEventConsumerRaw(consumerName: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventConsumerDto>> {
        const _consumerName = consumerName;

        if (_consumerName == null) {
            throw new runtime.RequiredError(
                'consumerName',
                'Required parameter "consumerName" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/event-consumers/{consumerName}/reset`.replace(`{${"consumerName"}}`, encodeURIComponent(String(_consumerName))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventConsumerDtoFromJSON(jsonValue));
    }

    /**
     * Reset an event consumer.
     */
    async resetEventConsumer(consumerName: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventConsumerDto> {
        const response = await this.resetEventConsumerRaw(consumerName, initOverrides);
        return await response.value();
    }

    /**
     * Start an event consumer.
     */
    async startEventConsumerRaw(consumerName: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventConsumerDto>> {
        const _consumerName = consumerName;

        if (_consumerName == null) {
            throw new runtime.RequiredError(
                'consumerName',
                'Required parameter "consumerName" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/event-consumers/{consumerName}/start`.replace(`{${"consumerName"}}`, encodeURIComponent(String(_consumerName))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventConsumerDtoFromJSON(jsonValue));
    }

    /**
     * Start an event consumer.
     */
    async startEventConsumer(consumerName: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventConsumerDto> {
        const response = await this.startEventConsumerRaw(consumerName, initOverrides);
        return await response.value();
    }

    /**
     * Stop an event consumer.
     */
    async stopEventConsumerRaw(consumerName: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventConsumerDto>> {
        const _consumerName = consumerName;

        if (_consumerName == null) {
            throw new runtime.RequiredError(
                'consumerName',
                'Required parameter "consumerName" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/event-consumers/{consumerName}/stop`.replace(`{${"consumerName"}}`, encodeURIComponent(String(_consumerName))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventConsumerDtoFromJSON(jsonValue));
    }

    /**
     * Stop an event consumer.
     */
    async stopEventConsumer(consumerName: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventConsumerDto> {
        const response = await this.stopEventConsumerRaw(consumerName, initOverrides);
        return await response.value();
    }

}
