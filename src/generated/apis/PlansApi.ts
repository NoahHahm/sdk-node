/**
 * Squidex API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ChangePlanDto,
  PlanChangedDto,
  PlansDto,
} from '../models/index';
import {
    ChangePlanDtoToJSON,
    PlanChangedDtoFromJSON,
    PlansDtoFromJSON,
} from '../models/index';

export interface AppPlansPutPlanRequestRaw {
    changePlanDto: ChangePlanDto;
}

export interface TeamPlansGetTeamPlansRequestRaw {
    team: string;
}

export interface TeamPlansPutTeamPlanRequestRaw {
    team: string;
    changePlanDto: ChangePlanDto;
}

/**
 * PlansApi - interface
 * 
 * @export
 * @interface PlansApiInterface
 */
export interface PlansApiInterface {
    /**
     * 
     * @summary Get app plan information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlansApiInterface
     */
    getPlansRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlansDto>>;

    /**
     * Get app plan information.
     */
    getPlans(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlansDto>;

    /**
     * 
     * @summary Change the app plan.
     * @param {ChangePlanDto} changePlanDto Plan object that needs to be changed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlansApiInterface
     */
    putPlanRaw(changePlanDto: ChangePlanDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanChangedDto>>;

    /**
     * Change the app plan.
     */
    putPlan(changePlanDto: ChangePlanDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanChangedDto>;

    /**
     * 
     * @summary Get team plan information.
     * @param {string} team The name of the team.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlansApiInterface
     */
    getTeamPlansRaw(team: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlansDto>>;

    /**
     * Get team plan information.
     */
    getTeamPlans(team: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlansDto>;

    /**
     * 
     * @summary Change the team plan.
     * @param {string} team The name of the team.
     * @param {ChangePlanDto} changePlanDto Plan object that needs to be changed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlansApiInterface
     */
    putTeamPlanRaw(team: string, changePlanDto: ChangePlanDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanChangedDto>>;

    /**
     * Change the team plan.
     */
    putTeamPlan(team: string, changePlanDto: ChangePlanDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanChangedDto>;

}

/**
 * 
 */
export class PlansApi extends runtime.BaseAPI implements PlansApiInterface {

    /**
     * Get app plan information.
     */
    async getPlansRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlansDto>> {

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/$app$/plans`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlansDtoFromJSON(jsonValue));
    }

    /**
     * Get app plan information.
     */
    async getPlans(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlansDto> {
        const response = await this.getPlansRaw(initOverrides);
        return await response.value();
    }

    /**
     * Change the app plan.
     */
    async putPlanRaw(changePlanDto: ChangePlanDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanChangedDto>> {
        const _changePlanDto = changePlanDto;

        if (_changePlanDto == null) {
            throw new runtime.RequiredError(
                'changePlanDto',
                'Required parameter "changePlanDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/apps/$app$/plan`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangePlanDtoToJSON(_changePlanDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlanChangedDtoFromJSON(jsonValue));
    }

    /**
     * Change the app plan.
     */
    async putPlan(changePlanDto: ChangePlanDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanChangedDto> {
        const response = await this.putPlanRaw(changePlanDto, initOverrides);
        return await response.value();
    }

    /**
     * Get team plan information.
     */
    async getTeamPlansRaw(team: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlansDto>> {
        const _team = team;

        if (_team == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/teams/{team}/plans`.replace(`{${"team"}}`, encodeURIComponent(String(_team))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlansDtoFromJSON(jsonValue));
    }

    /**
     * Get team plan information.
     */
    async getTeamPlans(team: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlansDto> {
        const response = await this.getTeamPlansRaw(team, initOverrides);
        return await response.value();
    }

    /**
     * Change the team plan.
     */
    async putTeamPlanRaw(team: string, changePlanDto: ChangePlanDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlanChangedDto>> {
        const _team = team;
        const _changePlanDto = changePlanDto;

        if (_team == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling ().'
            );
        }

        if (_changePlanDto == null) {
            throw new runtime.RequiredError(
                'changePlanDto',
                'Required parameter "changePlanDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/teams/{team}/plan`.replace(`{${"team"}}`, encodeURIComponent(String(_team))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangePlanDtoToJSON(_changePlanDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlanChangedDtoFromJSON(jsonValue));
    }

    /**
     * Change the team plan.
     */
    async putTeamPlan(team: string, changePlanDto: ChangePlanDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlanChangedDto> {
        const response = await this.putTeamPlanRaw(team, changePlanDto, initOverrides);
        return await response.value();
    }

}
