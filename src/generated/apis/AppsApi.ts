/**
 * Squidex API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddLanguageDto,
  AddRoleDto,
  AddWorkflowDto,
  AppDto,
  AppLanguagesDto,
  AppSettingsDto,
  AssetScriptsDto,
  AssignContributorDto,
  ClientsDto,
  ContributorsDto,
  CreateAppDto,
  CreateClientDto,
  RolesDto,
  TransferToTeamDto,
  UpdateAppDto,
  UpdateAppSettingsDto,
  UpdateAssetScriptsDto,
  UpdateClientDto,
  UpdateLanguageDto,
  UpdateRoleDto,
  UpdateWorkflowDto,
  WorkflowsDto,
} from '../models/index';
import {
    AddLanguageDtoToJSON,
    AddRoleDtoToJSON,
    AddWorkflowDtoToJSON,
    AppDtoFromJSON,
    AppLanguagesDtoFromJSON,
    AppSettingsDtoFromJSON,
    AssetScriptsDtoFromJSON,
    AssignContributorDtoToJSON,
    ClientsDtoFromJSON,
    ContributorsDtoFromJSON,
    CreateAppDtoToJSON,
    CreateClientDtoToJSON,
    RolesDtoFromJSON,
    TransferToTeamDtoToJSON,
    UpdateAppDtoToJSON,
    UpdateAppSettingsDtoToJSON,
    UpdateAssetScriptsDtoToJSON,
    UpdateClientDtoToJSON,
    UpdateLanguageDtoToJSON,
    UpdateRoleDtoToJSON,
    UpdateWorkflowDtoToJSON,
    WorkflowsDtoFromJSON,
} from '../models/index';

export interface AppAssetsPutAssetScriptsRequest {
    updateAssetScriptsDto: UpdateAssetScriptsDto;
}

export interface AppClientsDeleteClientRequest {
    id: string;
}

export interface AppClientsPostClientRequest {
    createClientDto: CreateClientDto;
}

export interface AppClientsPutClientRequest {
    id: string;
    updateClientDto: UpdateClientDto;
}

export interface AppContributorsDeleteContributorRequest {
    id: string;
}

export interface AppContributorsPostContributorRequest {
    assignContributorDto: AssignContributorDto;
}

export interface AppLanguagesDeleteLanguageRequest {
    language: string;
}

export interface AppLanguagesPostLanguageRequest {
    addLanguageDto: AddLanguageDto;
}

export interface AppLanguagesPutLanguageRequest {
    language: string;
    updateLanguageDto: UpdateLanguageDto;
}

export interface AppRolesDeleteRoleRequest {
    roleName: string;
}

export interface AppRolesPostRoleRequest {
    addRoleDto: AddRoleDto;
}

export interface AppRolesPutRoleRequest {
    roleName: string;
    updateRoleDto: UpdateRoleDto;
}

export interface AppSettingsPutSettingsRequest {
    updateAppSettingsDto: UpdateAppSettingsDto;
}

export interface AppWorkflowsDeleteWorkflowRequest {
    id: string;
}

export interface AppWorkflowsPostWorkflowRequest {
    addWorkflowDto: AddWorkflowDto;
}

export interface AppWorkflowsPutWorkflowRequest {
    id: string;
    updateWorkflowDto: UpdateWorkflowDto;
}

export interface AppsGetTeamAppsRequest {
    team: string;
}

export interface AppsPostAppRequest {
    createAppDto: CreateAppDto;
}

export interface AppsPutAppRequest {
    updateAppDto: UpdateAppDto;
}

export interface AppsPutAppTeamRequest {
    transferToTeamDto: TransferToTeamDto;
}

export interface AppsUploadImageRequest {
    file?: Blob;
    fileUrl?: string;
    fileName?: string;
}

/**
 * AppsApi - interface
 * 
 * @export
 * @interface AppsApiInterface
 */
export interface AppsApiInterface {
    /**
     * 
     * @summary Get the app asset scripts.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiInterface
     */
    getAssetScriptsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetScriptsDto>>;

    /**
     * Get the app asset scripts.
     */
    getAssetScripts(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetScriptsDto>;

    /**
     * 
     * @summary Update the asset scripts.
     * @param {UpdateAssetScriptsDto} updateAssetScriptsDto The values to update.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiInterface
     */
    putAssetScriptsRaw(requestParameters: AppAssetsPutAssetScriptsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetScriptsDto>>;

    /**
     * Update the asset scripts.
     */
    putAssetScripts(requestParameters: AppAssetsPutAssetScriptsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetScriptsDto>;

    /**
     * The application that uses this client credentials cannot access the API after it has been revoked.
     * @summary Revoke an app client.
     * @param {string} id The ID of the client that must be deleted.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiInterface
     */
    deleteClientRaw(requestParameters: AppClientsDeleteClientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClientsDto>>;

    /**
     * The application that uses this client credentials cannot access the API after it has been revoked.
     * Revoke an app client.
     */
    deleteClient(requestParameters: AppClientsDeleteClientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClientsDto>;

    /**
     * Gets all configured clients for the app with the specified name.
     * @summary Get app clients.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiInterface
     */
    getClientsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClientsDto>>;

    /**
     * Gets all configured clients for the app with the specified name.
     * Get app clients.
     */
    getClients(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClientsDto>;

    /**
     * Create a new client for the app with the specified name. The client secret is auto generated on the server and returned. The client does not expire, the access token is valid for 30 days.
     * @summary Create a new app client.
     * @param {CreateClientDto} createClientDto Client object that needs to be added to the app.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiInterface
     */
    postClientRaw(requestParameters: AppClientsPostClientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClientsDto>>;

    /**
     * Create a new client for the app with the specified name. The client secret is auto generated on the server and returned. The client does not expire, the access token is valid for 30 days.
     * Create a new app client.
     */
    postClient(requestParameters: AppClientsPostClientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClientsDto>;

    /**
     * Only the display name can be changed, create a new client if necessary.
     * @summary Updates an app client.
     * @param {string} id The ID of the client that must be updated.
     * @param {UpdateClientDto} updateClientDto Client object that needs to be updated.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiInterface
     */
    putClientRaw(requestParameters: AppClientsPutClientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClientsDto>>;

    /**
     * Only the display name can be changed, create a new client if necessary.
     * Updates an app client.
     */
    putClient(requestParameters: AppClientsPutClientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClientsDto>;

    /**
     * 
     * @summary Remove contributor.
     * @param {string} id The ID of the contributor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiInterface
     */
    deleteContributorRaw(requestParameters: AppContributorsDeleteContributorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContributorsDto>>;

    /**
     * Remove contributor.
     */
    deleteContributor(requestParameters: AppContributorsDeleteContributorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContributorsDto>;

    /**
     * 
     * @summary Remove yourself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiInterface
     */
    deleteMyselfRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContributorsDto>>;

    /**
     * Remove yourself.
     */
    deleteMyself(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContributorsDto>;

    /**
     * 
     * @summary Get app contributors.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiInterface
     */
    getContributorsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContributorsDto>>;

    /**
     * Get app contributors.
     */
    getContributors(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContributorsDto>;

    /**
     * 
     * @summary Assign contributor to app.
     * @param {AssignContributorDto} assignContributorDto Contributor object that needs to be added to the app.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiInterface
     */
    postContributorRaw(requestParameters: AppContributorsPostContributorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContributorsDto>>;

    /**
     * Assign contributor to app.
     */
    postContributor(requestParameters: AppContributorsPostContributorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContributorsDto>;

    /**
     * 
     * @summary Get the app image.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiInterface
     */
    getImageRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>>;

    /**
     * Get the app image.
     */
    getImage(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob>;

    /**
     * 
     * @summary Deletes an app language.
     * @param {string} language The language to delete from the app.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiInterface
     */
    deleteLanguageRaw(requestParameters: AppLanguagesDeleteLanguageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppLanguagesDto>>;

    /**
     * Deletes an app language.
     */
    deleteLanguage(requestParameters: AppLanguagesDeleteLanguageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppLanguagesDto>;

    /**
     * 
     * @summary Get app languages.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiInterface
     */
    getLanguagesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppLanguagesDto>>;

    /**
     * Get app languages.
     */
    getLanguages(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppLanguagesDto>;

    /**
     * 
     * @summary Add an app language.
     * @param {AddLanguageDto} addLanguageDto The language to add to the app.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiInterface
     */
    postLanguageRaw(requestParameters: AppLanguagesPostLanguageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppLanguagesDto>>;

    /**
     * Add an app language.
     */
    postLanguage(requestParameters: AppLanguagesPostLanguageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppLanguagesDto>;

    /**
     * 
     * @summary Updates an app language.
     * @param {string} language The language to update.
     * @param {UpdateLanguageDto} updateLanguageDto The language object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiInterface
     */
    putLanguageRaw(requestParameters: AppLanguagesPutLanguageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppLanguagesDto>>;

    /**
     * Updates an app language.
     */
    putLanguage(requestParameters: AppLanguagesPutLanguageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppLanguagesDto>;

    /**
     * 
     * @summary Remove role from app.
     * @param {string} roleName The name of the role.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiInterface
     */
    deleteRoleRaw(requestParameters: AppRolesDeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RolesDto>>;

    /**
     * Remove role from app.
     */
    deleteRole(requestParameters: AppRolesDeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RolesDto>;

    /**
     * 
     * @summary Get app permissions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiInterface
     */
    getPermissionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>>;

    /**
     * Get app permissions.
     */
    getPermissions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>>;

    /**
     * 
     * @summary Get app roles.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiInterface
     */
    getRolesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RolesDto>>;

    /**
     * Get app roles.
     */
    getRoles(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RolesDto>;

    /**
     * 
     * @summary Add role to app.
     * @param {AddRoleDto} addRoleDto Role object that needs to be added to the app.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiInterface
     */
    postRoleRaw(requestParameters: AppRolesPostRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RolesDto>>;

    /**
     * Add role to app.
     */
    postRole(requestParameters: AppRolesPostRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RolesDto>;

    /**
     * 
     * @summary Update an app role.
     * @param {string} roleName The name of the role to be updated.
     * @param {UpdateRoleDto} updateRoleDto Role to be updated for the app.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiInterface
     */
    putRoleRaw(requestParameters: AppRolesPutRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RolesDto>>;

    /**
     * Update an app role.
     */
    putRole(requestParameters: AppRolesPutRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RolesDto>;

    /**
     * 
     * @summary Get the app settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiInterface
     */
    getSettingsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppSettingsDto>>;

    /**
     * Get the app settings.
     */
    getSettings(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppSettingsDto>;

    /**
     * 
     * @summary Update the settings.
     * @param {UpdateAppSettingsDto} updateAppSettingsDto The values to update.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiInterface
     */
    putSettingsRaw(requestParameters: AppSettingsPutSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppSettingsDto>>;

    /**
     * Update the settings.
     */
    putSettings(requestParameters: AppSettingsPutSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppSettingsDto>;

    /**
     * 
     * @summary Delete a workflow.
     * @param {string} id The ID of the workflow to update.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiInterface
     */
    deleteWorkflowRaw(requestParameters: AppWorkflowsDeleteWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowsDto>>;

    /**
     * Delete a workflow.
     */
    deleteWorkflow(requestParameters: AppWorkflowsDeleteWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowsDto>;

    /**
     * 
     * @summary Get app workflow.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiInterface
     */
    getWorkflowsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowsDto>>;

    /**
     * Get app workflow.
     */
    getWorkflows(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowsDto>;

    /**
     * 
     * @summary Create a workflow.
     * @param {AddWorkflowDto} addWorkflowDto The new workflow.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiInterface
     */
    postWorkflowRaw(requestParameters: AppWorkflowsPostWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowsDto>>;

    /**
     * Create a workflow.
     */
    postWorkflow(requestParameters: AppWorkflowsPostWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowsDto>;

    /**
     * 
     * @summary Update a workflow.
     * @param {string} id The ID of the workflow to update.
     * @param {UpdateWorkflowDto} updateWorkflowDto The new workflow.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiInterface
     */
    putWorkflowRaw(requestParameters: AppWorkflowsPutWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowsDto>>;

    /**
     * Update a workflow.
     */
    putWorkflow(requestParameters: AppWorkflowsPutWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowsDto>;

    /**
     * 
     * @summary Delete the app.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiInterface
     */
    deleteAppRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete the app.
     */
    deleteApp(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Remove the app image.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiInterface
     */
    deleteImageRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppDto>>;

    /**
     * Remove the app image.
     */
    deleteImage(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppDto>;

    /**
     * 
     * @summary Get an app by name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiInterface
     */
    getAppRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppDto>>;

    /**
     * Get an app by name.
     */
    getApp(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppDto>;

    /**
     * You can only retrieve the list of apps when you are authenticated as a user (OpenID implicit flow). You will retrieve all apps, where you are assigned as a contributor.
     * @summary Get your apps.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiInterface
     */
    getAppsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AppDto>>>;

    /**
     * You can only retrieve the list of apps when you are authenticated as a user (OpenID implicit flow). You will retrieve all apps, where you are assigned as a contributor.
     * Get your apps.
     */
    getApps(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AppDto>>;

    /**
     * You can only retrieve the list of apps when you are authenticated as a user (OpenID implicit flow). You will retrieve all apps, where you are assigned as a contributor.
     * @summary Get team apps.
     * @param {string} team The ID of the team.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiInterface
     */
    getTeamAppsRaw(requestParameters: AppsGetTeamAppsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AppDto>>>;

    /**
     * You can only retrieve the list of apps when you are authenticated as a user (OpenID implicit flow). You will retrieve all apps, where you are assigned as a contributor.
     * Get team apps.
     */
    getTeamApps(requestParameters: AppsGetTeamAppsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AppDto>>;

    /**
     * You can only create an app when you are authenticated as a user (OpenID implicit flow). You will be assigned as owner of the new app automatically.
     * @summary Create a new app.
     * @param {CreateAppDto} createAppDto The app object that needs to be added to Squidex.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiInterface
     */
    postAppRaw(requestParameters: AppsPostAppRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppDto>>;

    /**
     * You can only create an app when you are authenticated as a user (OpenID implicit flow). You will be assigned as owner of the new app automatically.
     * Create a new app.
     */
    postApp(requestParameters: AppsPostAppRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppDto>;

    /**
     * 
     * @summary Update the app.
     * @param {UpdateAppDto} updateAppDto The values to update.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiInterface
     */
    putAppRaw(requestParameters: AppsPutAppRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppDto>>;

    /**
     * Update the app.
     */
    putApp(requestParameters: AppsPutAppRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppDto>;

    /**
     * 
     * @summary Transfer the app.
     * @param {TransferToTeamDto} transferToTeamDto The team information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiInterface
     */
    putAppTeamRaw(requestParameters: AppsPutAppTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppDto>>;

    /**
     * Transfer the app.
     */
    putAppTeam(requestParameters: AppsPutAppTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppDto>;

    /**
     * 
     * @summary Upload the app image.
     * @param {Blob} [file] 
     * @param {string} [fileUrl] 
     * @param {string} [fileName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiInterface
     */
    uploadImageRaw(requestParameters: AppsUploadImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppDto>>;

    /**
     * Upload the app image.
     */
    uploadImage(requestParameters: AppsUploadImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppDto>;

}

/**
 * 
 */
export class AppsApi extends runtime.BaseAPI implements AppsApiInterface {

    /**
     * Get the app asset scripts.
     */
    async getAssetScriptsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetScriptsDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/$app$/assets/scripts`.replace("$app$", encodeURIComponent(this.appName)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetScriptsDtoFromJSON(jsonValue));
    }

    /**
     * Get the app asset scripts.
     */
    async getAssetScripts(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetScriptsDto> {
        const response = await this.getAssetScriptsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Update the asset scripts.
     */
    async putAssetScriptsRaw(requestParameters: AppAssetsPutAssetScriptsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetScriptsDto>> {
        if (requestParameters['updateAssetScriptsDto'] == null) {
            throw new runtime.RequiredError(
                'updateAssetScriptsDto',
                'Required parameter "updateAssetScriptsDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/apps/$app$/assets/scripts`.replace("$app$", encodeURIComponent(this.appName)),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateAssetScriptsDtoToJSON(requestParameters['updateAssetScriptsDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetScriptsDtoFromJSON(jsonValue));
    }

    /**
     * Update the asset scripts.
     */
    async putAssetScripts(requestParameters: AppAssetsPutAssetScriptsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetScriptsDto> {
        const response = await this.putAssetScriptsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The application that uses this client credentials cannot access the API after it has been revoked.
     * Revoke an app client.
     */
    async deleteClientRaw(requestParameters: AppClientsDeleteClientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClientsDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/$app$/clients/{id}`.replace(`{${"id"}}`, encodeURIComponent(String((requestParameters as any)['id']))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClientsDtoFromJSON(jsonValue));
    }

    /**
     * The application that uses this client credentials cannot access the API after it has been revoked.
     * Revoke an app client.
     */
    async deleteClient(requestParameters: AppClientsDeleteClientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClientsDto> {
        const response = await this.deleteClientRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets all configured clients for the app with the specified name.
     * Get app clients.
     */
    async getClientsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClientsDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/$app$/clients`.replace("$app$", encodeURIComponent(this.appName)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClientsDtoFromJSON(jsonValue));
    }

    /**
     * Gets all configured clients for the app with the specified name.
     * Get app clients.
     */
    async getClients(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClientsDto> {
        const response = await this.getClientsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Create a new client for the app with the specified name. The client secret is auto generated on the server and returned. The client does not expire, the access token is valid for 30 days.
     * Create a new app client.
     */
    async postClientRaw(requestParameters: AppClientsPostClientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClientsDto>> {
        if (requestParameters['createClientDto'] == null) {
            throw new runtime.RequiredError(
                'createClientDto',
                'Required parameter "createClientDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/apps/$app$/clients`.replace("$app$", encodeURIComponent(this.appName)),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateClientDtoToJSON(requestParameters['createClientDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClientsDtoFromJSON(jsonValue));
    }

    /**
     * Create a new client for the app with the specified name. The client secret is auto generated on the server and returned. The client does not expire, the access token is valid for 30 days.
     * Create a new app client.
     */
    async postClient(requestParameters: AppClientsPostClientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClientsDto> {
        const response = await this.postClientRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Only the display name can be changed, create a new client if necessary.
     * Updates an app client.
     */
    async putClientRaw(requestParameters: AppClientsPutClientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClientsDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        if (requestParameters['updateClientDto'] == null) {
            throw new runtime.RequiredError(
                'updateClientDto',
                'Required parameter "updateClientDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/apps/$app$/clients/{id}`.replace(`{${"id"}}`, encodeURIComponent(String((requestParameters as any)['id']))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateClientDtoToJSON(requestParameters['updateClientDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClientsDtoFromJSON(jsonValue));
    }

    /**
     * Only the display name can be changed, create a new client if necessary.
     * Updates an app client.
     */
    async putClient(requestParameters: AppClientsPutClientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClientsDto> {
        const response = await this.putClientRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove contributor.
     */
    async deleteContributorRaw(requestParameters: AppContributorsDeleteContributorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContributorsDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/$app$/contributors/{id}`.replace(`{${"id"}}`, encodeURIComponent(String((requestParameters as any)['id']))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContributorsDtoFromJSON(jsonValue));
    }

    /**
     * Remove contributor.
     */
    async deleteContributor(requestParameters: AppContributorsDeleteContributorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContributorsDto> {
        const response = await this.deleteContributorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove yourself.
     */
    async deleteMyselfRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContributorsDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/$app$/contributors/me`.replace("$app$", encodeURIComponent(this.appName)),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContributorsDtoFromJSON(jsonValue));
    }

    /**
     * Remove yourself.
     */
    async deleteMyself(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContributorsDto> {
        const response = await this.deleteMyselfRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get app contributors.
     */
    async getContributorsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContributorsDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/$app$/contributors`.replace("$app$", encodeURIComponent(this.appName)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContributorsDtoFromJSON(jsonValue));
    }

    /**
     * Get app contributors.
     */
    async getContributors(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContributorsDto> {
        const response = await this.getContributorsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Assign contributor to app.
     */
    async postContributorRaw(requestParameters: AppContributorsPostContributorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContributorsDto>> {
        if (requestParameters['assignContributorDto'] == null) {
            throw new runtime.RequiredError(
                'assignContributorDto',
                'Required parameter "assignContributorDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/apps/$app$/contributors`.replace("$app$", encodeURIComponent(this.appName)),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AssignContributorDtoToJSON(requestParameters['assignContributorDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContributorsDtoFromJSON(jsonValue));
    }

    /**
     * Assign contributor to app.
     */
    async postContributor(requestParameters: AppContributorsPostContributorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContributorsDto> {
        const response = await this.postContributorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the app image.
     */
    async getImageRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/$app$/image`.replace("$app$", encodeURIComponent(this.appName)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Get the app image.
     */
    async getImage(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.getImageRaw(initOverrides);
        return await response.value();
    }

    /**
     * Deletes an app language.
     */
    async deleteLanguageRaw(requestParameters: AppLanguagesDeleteLanguageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppLanguagesDto>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/$app$/languages/{language}`.replace(`{${"language"}}`, encodeURIComponent(String((requestParameters as any)['language']))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppLanguagesDtoFromJSON(jsonValue));
    }

    /**
     * Deletes an app language.
     */
    async deleteLanguage(requestParameters: AppLanguagesDeleteLanguageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppLanguagesDto> {
        const response = await this.deleteLanguageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get app languages.
     */
    async getLanguagesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppLanguagesDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/$app$/languages`.replace("$app$", encodeURIComponent(this.appName)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppLanguagesDtoFromJSON(jsonValue));
    }

    /**
     * Get app languages.
     */
    async getLanguages(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppLanguagesDto> {
        const response = await this.getLanguagesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Add an app language.
     */
    async postLanguageRaw(requestParameters: AppLanguagesPostLanguageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppLanguagesDto>> {
        if (requestParameters['addLanguageDto'] == null) {
            throw new runtime.RequiredError(
                'addLanguageDto',
                'Required parameter "addLanguageDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/apps/$app$/languages`.replace("$app$", encodeURIComponent(this.appName)),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddLanguageDtoToJSON(requestParameters['addLanguageDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppLanguagesDtoFromJSON(jsonValue));
    }

    /**
     * Add an app language.
     */
    async postLanguage(requestParameters: AppLanguagesPostLanguageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppLanguagesDto> {
        const response = await this.postLanguageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates an app language.
     */
    async putLanguageRaw(requestParameters: AppLanguagesPutLanguageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppLanguagesDto>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling ().'
            );
        }

        if (requestParameters['updateLanguageDto'] == null) {
            throw new runtime.RequiredError(
                'updateLanguageDto',
                'Required parameter "updateLanguageDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/apps/$app$/languages/{language}`.replace(`{${"language"}}`, encodeURIComponent(String((requestParameters as any)['language']))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateLanguageDtoToJSON(requestParameters['updateLanguageDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppLanguagesDtoFromJSON(jsonValue));
    }

    /**
     * Updates an app language.
     */
    async putLanguage(requestParameters: AppLanguagesPutLanguageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppLanguagesDto> {
        const response = await this.putLanguageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove role from app.
     */
    async deleteRoleRaw(requestParameters: AppRolesDeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RolesDto>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/$app$/roles/{roleName}`.replace(`{${"roleName"}}`, encodeURIComponent(String((requestParameters as any)['roleName']))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RolesDtoFromJSON(jsonValue));
    }

    /**
     * Remove role from app.
     */
    async deleteRole(requestParameters: AppRolesDeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RolesDto> {
        const response = await this.deleteRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get app permissions.
     */
    async getPermissionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/$app$/roles/permissions`.replace("$app$", encodeURIComponent(this.appName)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get app permissions.
     */
    async getPermissions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.getPermissionsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get app roles.
     */
    async getRolesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RolesDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/$app$/roles`.replace("$app$", encodeURIComponent(this.appName)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RolesDtoFromJSON(jsonValue));
    }

    /**
     * Get app roles.
     */
    async getRoles(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RolesDto> {
        const response = await this.getRolesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Add role to app.
     */
    async postRoleRaw(requestParameters: AppRolesPostRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RolesDto>> {
        if (requestParameters['addRoleDto'] == null) {
            throw new runtime.RequiredError(
                'addRoleDto',
                'Required parameter "addRoleDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/apps/$app$/roles`.replace("$app$", encodeURIComponent(this.appName)),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddRoleDtoToJSON(requestParameters['addRoleDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RolesDtoFromJSON(jsonValue));
    }

    /**
     * Add role to app.
     */
    async postRole(requestParameters: AppRolesPostRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RolesDto> {
        const response = await this.postRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an app role.
     */
    async putRoleRaw(requestParameters: AppRolesPutRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RolesDto>> {
        if (requestParameters['roleName'] == null) {
            throw new runtime.RequiredError(
                'roleName',
                'Required parameter "roleName" was null or undefined when calling ().'
            );
        }

        if (requestParameters['updateRoleDto'] == null) {
            throw new runtime.RequiredError(
                'updateRoleDto',
                'Required parameter "updateRoleDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/apps/$app$/roles/{roleName}`.replace(`{${"roleName"}}`, encodeURIComponent(String((requestParameters as any)['roleName']))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateRoleDtoToJSON(requestParameters['updateRoleDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RolesDtoFromJSON(jsonValue));
    }

    /**
     * Update an app role.
     */
    async putRole(requestParameters: AppRolesPutRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RolesDto> {
        const response = await this.putRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the app settings.
     */
    async getSettingsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppSettingsDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/$app$/settings`.replace("$app$", encodeURIComponent(this.appName)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppSettingsDtoFromJSON(jsonValue));
    }

    /**
     * Get the app settings.
     */
    async getSettings(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppSettingsDto> {
        const response = await this.getSettingsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Update the settings.
     */
    async putSettingsRaw(requestParameters: AppSettingsPutSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppSettingsDto>> {
        if (requestParameters['updateAppSettingsDto'] == null) {
            throw new runtime.RequiredError(
                'updateAppSettingsDto',
                'Required parameter "updateAppSettingsDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/apps/$app$/settings`.replace("$app$", encodeURIComponent(this.appName)),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateAppSettingsDtoToJSON(requestParameters['updateAppSettingsDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppSettingsDtoFromJSON(jsonValue));
    }

    /**
     * Update the settings.
     */
    async putSettings(requestParameters: AppSettingsPutSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppSettingsDto> {
        const response = await this.putSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a workflow.
     */
    async deleteWorkflowRaw(requestParameters: AppWorkflowsDeleteWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowsDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/$app$/workflows/{id}`.replace(`{${"id"}}`, encodeURIComponent(String((requestParameters as any)['id']))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowsDtoFromJSON(jsonValue));
    }

    /**
     * Delete a workflow.
     */
    async deleteWorkflow(requestParameters: AppWorkflowsDeleteWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowsDto> {
        const response = await this.deleteWorkflowRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get app workflow.
     */
    async getWorkflowsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowsDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/$app$/workflows`.replace("$app$", encodeURIComponent(this.appName)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowsDtoFromJSON(jsonValue));
    }

    /**
     * Get app workflow.
     */
    async getWorkflows(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowsDto> {
        const response = await this.getWorkflowsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Create a workflow.
     */
    async postWorkflowRaw(requestParameters: AppWorkflowsPostWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowsDto>> {
        if (requestParameters['addWorkflowDto'] == null) {
            throw new runtime.RequiredError(
                'addWorkflowDto',
                'Required parameter "addWorkflowDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/apps/$app$/workflows`.replace("$app$", encodeURIComponent(this.appName)),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddWorkflowDtoToJSON(requestParameters['addWorkflowDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowsDtoFromJSON(jsonValue));
    }

    /**
     * Create a workflow.
     */
    async postWorkflow(requestParameters: AppWorkflowsPostWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowsDto> {
        const response = await this.postWorkflowRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a workflow.
     */
    async putWorkflowRaw(requestParameters: AppWorkflowsPutWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowsDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        if (requestParameters['updateWorkflowDto'] == null) {
            throw new runtime.RequiredError(
                'updateWorkflowDto',
                'Required parameter "updateWorkflowDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/apps/$app$/workflows/{id}`.replace(`{${"id"}}`, encodeURIComponent(String((requestParameters as any)['id']))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateWorkflowDtoToJSON(requestParameters['updateWorkflowDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowsDtoFromJSON(jsonValue));
    }

    /**
     * Update a workflow.
     */
    async putWorkflow(requestParameters: AppWorkflowsPutWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowsDto> {
        const response = await this.putWorkflowRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete the app.
     */
    async deleteAppRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/$app$`.replace("$app$", encodeURIComponent(this.appName)),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete the app.
     */
    async deleteApp(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteAppRaw(initOverrides);
    }

    /**
     * Remove the app image.
     */
    async deleteImageRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/$app$/image`.replace("$app$", encodeURIComponent(this.appName)),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppDtoFromJSON(jsonValue));
    }

    /**
     * Remove the app image.
     */
    async deleteImage(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppDto> {
        const response = await this.deleteImageRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get an app by name.
     */
    async getAppRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/$app$`.replace("$app$", encodeURIComponent(this.appName)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppDtoFromJSON(jsonValue));
    }

    /**
     * Get an app by name.
     */
    async getApp(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppDto> {
        const response = await this.getAppRaw(initOverrides);
        return await response.value();
    }

    /**
     * You can only retrieve the list of apps when you are authenticated as a user (OpenID implicit flow). You will retrieve all apps, where you are assigned as a contributor.
     * Get your apps.
     */
    async getAppsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AppDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps`.replace("$app$", encodeURIComponent(this.appName)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AppDtoFromJSON));
    }

    /**
     * You can only retrieve the list of apps when you are authenticated as a user (OpenID implicit flow). You will retrieve all apps, where you are assigned as a contributor.
     * Get your apps.
     */
    async getApps(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AppDto>> {
        const response = await this.getAppsRaw(initOverrides);
        return await response.value();
    }

    /**
     * You can only retrieve the list of apps when you are authenticated as a user (OpenID implicit flow). You will retrieve all apps, where you are assigned as a contributor.
     * Get team apps.
     */
    async getTeamAppsRaw(requestParameters: AppsGetTeamAppsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AppDto>>> {
        if (requestParameters['team'] == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/teams/{team}/apps`.replace(`{${"team"}}`, encodeURIComponent(String((requestParameters as any)['team']))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AppDtoFromJSON));
    }

    /**
     * You can only retrieve the list of apps when you are authenticated as a user (OpenID implicit flow). You will retrieve all apps, where you are assigned as a contributor.
     * Get team apps.
     */
    async getTeamApps(requestParameters: AppsGetTeamAppsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AppDto>> {
        const response = await this.getTeamAppsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can only create an app when you are authenticated as a user (OpenID implicit flow). You will be assigned as owner of the new app automatically.
     * Create a new app.
     */
    async postAppRaw(requestParameters: AppsPostAppRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppDto>> {
        if (requestParameters['createAppDto'] == null) {
            throw new runtime.RequiredError(
                'createAppDto',
                'Required parameter "createAppDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/apps`.replace("$app$", encodeURIComponent(this.appName)),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateAppDtoToJSON(requestParameters['createAppDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppDtoFromJSON(jsonValue));
    }

    /**
     * You can only create an app when you are authenticated as a user (OpenID implicit flow). You will be assigned as owner of the new app automatically.
     * Create a new app.
     */
    async postApp(requestParameters: AppsPostAppRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppDto> {
        const response = await this.postAppRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the app.
     */
    async putAppRaw(requestParameters: AppsPutAppRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppDto>> {
        if (requestParameters['updateAppDto'] == null) {
            throw new runtime.RequiredError(
                'updateAppDto',
                'Required parameter "updateAppDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/apps/$app$`.replace("$app$", encodeURIComponent(this.appName)),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateAppDtoToJSON(requestParameters['updateAppDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppDtoFromJSON(jsonValue));
    }

    /**
     * Update the app.
     */
    async putApp(requestParameters: AppsPutAppRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppDto> {
        const response = await this.putAppRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Transfer the app.
     */
    async putAppTeamRaw(requestParameters: AppsPutAppTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppDto>> {
        if (requestParameters['transferToTeamDto'] == null) {
            throw new runtime.RequiredError(
                'transferToTeamDto',
                'Required parameter "transferToTeamDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/apps/$app$/team`.replace("$app$", encodeURIComponent(this.appName)),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TransferToTeamDtoToJSON(requestParameters['transferToTeamDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppDtoFromJSON(jsonValue));
    }

    /**
     * Transfer the app.
     */
    async putAppTeam(requestParameters: AppsPutAppTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppDto> {
        const response = await this.putAppTeamRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Upload the app image.
     */
    async uploadImageRaw(requestParameters: AppsUploadImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file'] as any);
        }

        if (requestParameters['fileUrl'] != null) {
            formParams.append('fileUrl', requestParameters['fileUrl'] as any);
        }

        if (requestParameters['fileName'] != null) {
            formParams.append('fileName', requestParameters['fileName'] as any);
        }

        const response = await this.request({
            path: `/api/apps/$app$/image`.replace("$app$", encodeURIComponent(this.appName)),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppDtoFromJSON(jsonValue));
    }

    /**
     * Upload the app image.
     */
    async uploadImage(requestParameters: AppsUploadImageRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppDto> {
        const response = await this.uploadImageRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
