/**
 * Squidex API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BackupJobsDto,
  RestoreJobDto,
  RestoreRequestDto,
} from '../models/index';
import {
    BackupJobsDtoFromJSON,
    RestoreJobDtoFromJSON,
    RestoreRequestDtoToJSON,
} from '../models/index';

export interface BackupContentGetBackupContentRequestRaw {
    id: string;
}

export interface BackupContentGetBackupContentV2Request {
    appId?: string;
    app?: string;
}

export interface BackupContentGetBackupContentV2RequestRaw {
    id: string;
    appId?: string;
    app?: string;
}

export interface BackupsDeleteBackupRequestRaw {
    id: string;
}

export interface RestorePostRestoreJobRequestRaw {
    restoreRequestDto: RestoreRequestDto;
}

/**
 * BackupsApi - interface
 * 
 * @export
 * @interface BackupsApiInterface
 */
export interface BackupsApiInterface {
    /**
     * 
     * @summary Get the backup content.
     * @param {string} id The ID of the backup.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof BackupsApiInterface
     */
    getBackupContentRaw(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>>;

    /**
     * Get the backup content.
     * @deprecated
     */
    getBackupContent(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob>;

    /**
     * 
     * @summary Get the backup content.
     * @param {string} id The ID of the backup.
     * @param {string} [appId] The ID of the app.
     * @param {string} [app] The name of the app.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof BackupsApiInterface
     */
    getBackupContentV2Raw(id: string, requestParameters?: BackupContentGetBackupContentV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>>;

    /**
     * Get the backup content.
     * @deprecated
     */
    getBackupContentV2(id: string, requestParameters?: BackupContentGetBackupContentV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob>;

    /**
     * 
     * @summary Delete a backup.
     * @param {string} id The ID of the backup to delete.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof BackupsApiInterface
     */
    deleteBackupRaw(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete a backup.
     * @deprecated
     */
    deleteBackup(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Get all backup jobs.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof BackupsApiInterface
     */
    getBackupsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BackupJobsDto>>;

    /**
     * Get all backup jobs.
     * @deprecated
     */
    getBackups(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BackupJobsDto>;

    /**
     * 
     * @summary Start a new backup.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BackupsApiInterface
     */
    postBackupRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Start a new backup.
     */
    postBackup(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Get current restore status.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BackupsApiInterface
     */
    getRestoreJobRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RestoreJobDto>>;

    /**
     * Get current restore status.
     */
    getRestoreJob(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RestoreJobDto>;

    /**
     * 
     * @summary Restore a backup.
     * @param {RestoreRequestDto} restoreRequestDto The backup to restore.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BackupsApiInterface
     */
    postRestoreJobRaw(restoreRequestDto: RestoreRequestDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Restore a backup.
     */
    postRestoreJob(restoreRequestDto: RestoreRequestDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class BackupsApi extends runtime.BaseAPI implements BackupsApiInterface {

    /**
     * Get the backup content.
     * @deprecated
     */
    async getBackupContentRaw(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        const _id = id;

        if (_id == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/$app$/backups/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(_id))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Get the backup content.
     * @deprecated
     */
    async getBackupContent(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.getBackupContentRaw(id, initOverrides);
        return await response.value();
    }

    /**
     * Get the backup content.
     * @deprecated
     */
    async getBackupContentV2Raw(id: string, requestParameters: BackupContentGetBackupContentV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        const _id = id;
        const _appId = requestParameters?.['appId'];
        const _app = requestParameters?.['app'];

        if (_id == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        if (_appId != null) {
            queryParameters['appId'] = _appId;
        }

        if (_app != null) {
            queryParameters['app'] = _app;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/backups/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(_id))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Get the backup content.
     * @deprecated
     */
    async getBackupContentV2(id: string, requestParameters: BackupContentGetBackupContentV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.getBackupContentV2Raw(id, requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a backup.
     * @deprecated
     */
    async deleteBackupRaw(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const _id = id;

        if (_id == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/$app$/backups/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(_id))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a backup.
     * @deprecated
     */
    async deleteBackup(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteBackupRaw(id, initOverrides);
    }

    /**
     * Get all backup jobs.
     * @deprecated
     */
    async getBackupsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BackupJobsDto>> {

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/$app$/backups`.replace("$app$", encodeURIComponent(this.appName)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BackupJobsDtoFromJSON(jsonValue));
    }

    /**
     * Get all backup jobs.
     * @deprecated
     */
    async getBackups(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BackupJobsDto> {
        const response = await this.getBackupsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Start a new backup.
     */
    async postBackupRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/$app$/backups`.replace("$app$", encodeURIComponent(this.appName)),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Start a new backup.
     */
    async postBackup(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postBackupRaw(initOverrides);
    }

    /**
     * Get current restore status.
     */
    async getRestoreJobRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RestoreJobDto>> {

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/restore`.replace("$app$", encodeURIComponent(this.appName)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RestoreJobDtoFromJSON(jsonValue));
    }

    /**
     * Get current restore status.
     */
    async getRestoreJob(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RestoreJobDto> {
        const response = await this.getRestoreJobRaw(initOverrides);
        return await response.value();
    }

    /**
     * Restore a backup.
     */
    async postRestoreJobRaw(restoreRequestDto: RestoreRequestDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const _restoreRequestDto = restoreRequestDto;

        if (_restoreRequestDto == null) {
            throw new runtime.RequiredError(
                'restoreRequestDto',
                'Required parameter "restoreRequestDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/apps/restore`.replace("$app$", encodeURIComponent(this.appName)),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RestoreRequestDtoToJSON(_restoreRequestDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Restore a backup.
     */
    async postRestoreJob(restoreRequestDto: RestoreRequestDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postRestoreJobRaw(restoreRequestDto, initOverrides);
    }

}
