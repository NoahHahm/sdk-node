/**
 * Squidex API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CallsUsageDtoDto,
  CurrentStorageDto,
  LogDownloadDto,
  StorageUsagePerDateDto,
} from '../models/index';
import {
    CallsUsageDtoDtoFromJSON,
    CurrentStorageDtoFromJSON,
    LogDownloadDtoFromJSON,
    StorageUsagePerDateDtoFromJSON,
} from '../models/index';

export interface UsagesGetStorageSizesRequestRaw {
    fromDate: Date;
    toDate: Date;
}

export interface UsagesGetStorageSizesForTeamRequestRaw {
    team: string;
    fromDate: Date;
    toDate: Date;
}

export interface UsagesGetTeamCurrentStorageSizeForTeamRequestRaw {
    team: string;
}

export interface UsagesGetUsagesRequestRaw {
    fromDate: Date;
    toDate: Date;
}

export interface UsagesGetUsagesForTeamRequestRaw {
    team: string;
    fromDate: Date;
    toDate: Date;
}

/**
 * StatisticsApi - interface
 * 
 * @export
 * @interface StatisticsApiInterface
 */
export interface StatisticsApiInterface {
    /**
     * 
     * @summary Get total asset size for app.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsApiInterface
     */
    getCurrentStorageSizeRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CurrentStorageDto>>;

    /**
     * Get total asset size for app.
     */
    getCurrentStorageSize(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CurrentStorageDto>;

    /**
     * 
     * @summary Get api calls as log file.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsApiInterface
     */
    getLogRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LogDownloadDto>>;

    /**
     * Get api calls as log file.
     */
    getLog(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LogDownloadDto>;

    /**
     * 
     * @summary Get asset usage by date for app.
     * @param {Date} fromDate The from date.
     * @param {Date} toDate The to date.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsApiInterface
     */
    getStorageSizesRaw(fromDate: Date, toDate: Date, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<StorageUsagePerDateDto>>>;

    /**
     * Get asset usage by date for app.
     */
    getStorageSizes(fromDate: Date, toDate: Date, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<StorageUsagePerDateDto>>;

    /**
     * 
     * @summary Get asset usage by date for team.
     * @param {string} team The ID of the team.
     * @param {Date} fromDate The from date.
     * @param {Date} toDate The to date.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsApiInterface
     */
    getStorageSizesForTeamRaw(team: string, fromDate: Date, toDate: Date, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<StorageUsagePerDateDto>>>;

    /**
     * Get asset usage by date for team.
     */
    getStorageSizesForTeam(team: string, fromDate: Date, toDate: Date, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<StorageUsagePerDateDto>>;

    /**
     * 
     * @summary Get total asset size for team.
     * @param {string} team The ID of the team.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsApiInterface
     */
    getTeamCurrentStorageSizeForTeamRaw(team: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CurrentStorageDto>>;

    /**
     * Get total asset size for team.
     */
    getTeamCurrentStorageSizeForTeam(team: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CurrentStorageDto>;

    /**
     * 
     * @summary Get api calls in date range for app.
     * @param {Date} fromDate The from date.
     * @param {Date} toDate The to date.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsApiInterface
     */
    getUsagesRaw(fromDate: Date, toDate: Date, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CallsUsageDtoDto>>;

    /**
     * Get api calls in date range for app.
     */
    getUsages(fromDate: Date, toDate: Date, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CallsUsageDtoDto>;

    /**
     * 
     * @summary Get api calls in date range for team.
     * @param {string} team The name of the team.
     * @param {Date} fromDate The from date.
     * @param {Date} toDate The to date.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsApiInterface
     */
    getUsagesForTeamRaw(team: string, fromDate: Date, toDate: Date, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CallsUsageDtoDto>>;

    /**
     * Get api calls in date range for team.
     */
    getUsagesForTeam(team: string, fromDate: Date, toDate: Date, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CallsUsageDtoDto>;

}

/**
 * 
 */
export class StatisticsApi extends runtime.BaseAPI implements StatisticsApiInterface {

    /**
     * Get total asset size for app.
     */
    async getCurrentStorageSizeRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CurrentStorageDto>> {

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/$app$/usages/storage/today`.replace("$app$", encodeURIComponent(this.appName)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CurrentStorageDtoFromJSON(jsonValue));
    }

    /**
     * Get total asset size for app.
     */
    async getCurrentStorageSize(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CurrentStorageDto> {
        const response = await this.getCurrentStorageSizeRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get api calls as log file.
     */
    async getLogRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LogDownloadDto>> {

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/$app$/usages/log`.replace("$app$", encodeURIComponent(this.appName)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LogDownloadDtoFromJSON(jsonValue));
    }

    /**
     * Get api calls as log file.
     */
    async getLog(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LogDownloadDto> {
        const response = await this.getLogRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get asset usage by date for app.
     */
    async getStorageSizesRaw(fromDate: Date, toDate: Date, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<StorageUsagePerDateDto>>> {
        const _fromDate = fromDate;
        const _toDate = toDate;

        if (_fromDate == null) {
            throw new runtime.RequiredError(
                'fromDate',
                'Required parameter "fromDate" was null or undefined when calling ().'
            );
        }

        if (_toDate == null) {
            throw new runtime.RequiredError(
                'toDate',
                'Required parameter "toDate" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/$app$/usages/storage/{fromDate}/{toDate}`.replace(`{${"fromDate"}}`, encodeURIComponent(String(_fromDate))).replace(`{${"toDate"}}`, encodeURIComponent(String(_toDate))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StorageUsagePerDateDtoFromJSON));
    }

    /**
     * Get asset usage by date for app.
     */
    async getStorageSizes(fromDate: Date, toDate: Date, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<StorageUsagePerDateDto>> {
        const response = await this.getStorageSizesRaw(fromDate, toDate, initOverrides);
        return await response.value();
    }

    /**
     * Get asset usage by date for team.
     */
    async getStorageSizesForTeamRaw(team: string, fromDate: Date, toDate: Date, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<StorageUsagePerDateDto>>> {
        const _team = team;
        const _fromDate = fromDate;
        const _toDate = toDate;

        if (_team == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling ().'
            );
        }

        if (_fromDate == null) {
            throw new runtime.RequiredError(
                'fromDate',
                'Required parameter "fromDate" was null or undefined when calling ().'
            );
        }

        if (_toDate == null) {
            throw new runtime.RequiredError(
                'toDate',
                'Required parameter "toDate" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/teams/{team}/usages/storage/{fromDate}/{toDate}`.replace(`{${"team"}}`, encodeURIComponent(String(_team))).replace(`{${"fromDate"}}`, encodeURIComponent(String(_fromDate))).replace(`{${"toDate"}}`, encodeURIComponent(String(_toDate))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StorageUsagePerDateDtoFromJSON));
    }

    /**
     * Get asset usage by date for team.
     */
    async getStorageSizesForTeam(team: string, fromDate: Date, toDate: Date, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<StorageUsagePerDateDto>> {
        const response = await this.getStorageSizesForTeamRaw(team, fromDate, toDate, initOverrides);
        return await response.value();
    }

    /**
     * Get total asset size for team.
     */
    async getTeamCurrentStorageSizeForTeamRaw(team: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CurrentStorageDto>> {
        const _team = team;

        if (_team == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/teams/{team}/usages/storage/today`.replace(`{${"team"}}`, encodeURIComponent(String(_team))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CurrentStorageDtoFromJSON(jsonValue));
    }

    /**
     * Get total asset size for team.
     */
    async getTeamCurrentStorageSizeForTeam(team: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CurrentStorageDto> {
        const response = await this.getTeamCurrentStorageSizeForTeamRaw(team, initOverrides);
        return await response.value();
    }

    /**
     * Get api calls in date range for app.
     */
    async getUsagesRaw(fromDate: Date, toDate: Date, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CallsUsageDtoDto>> {
        const _fromDate = fromDate;
        const _toDate = toDate;

        if (_fromDate == null) {
            throw new runtime.RequiredError(
                'fromDate',
                'Required parameter "fromDate" was null or undefined when calling ().'
            );
        }

        if (_toDate == null) {
            throw new runtime.RequiredError(
                'toDate',
                'Required parameter "toDate" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/$app$/usages/calls/{fromDate}/{toDate}`.replace(`{${"fromDate"}}`, encodeURIComponent(String(_fromDate))).replace(`{${"toDate"}}`, encodeURIComponent(String(_toDate))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CallsUsageDtoDtoFromJSON(jsonValue));
    }

    /**
     * Get api calls in date range for app.
     */
    async getUsages(fromDate: Date, toDate: Date, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CallsUsageDtoDto> {
        const response = await this.getUsagesRaw(fromDate, toDate, initOverrides);
        return await response.value();
    }

    /**
     * Get api calls in date range for team.
     */
    async getUsagesForTeamRaw(team: string, fromDate: Date, toDate: Date, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CallsUsageDtoDto>> {
        const _team = team;
        const _fromDate = fromDate;
        const _toDate = toDate;

        if (_team == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling ().'
            );
        }

        if (_fromDate == null) {
            throw new runtime.RequiredError(
                'fromDate',
                'Required parameter "fromDate" was null or undefined when calling ().'
            );
        }

        if (_toDate == null) {
            throw new runtime.RequiredError(
                'toDate',
                'Required parameter "toDate" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/teams/{team}/usages/calls/{fromDate}/{toDate}`.replace(`{${"team"}}`, encodeURIComponent(String(_team))).replace(`{${"fromDate"}}`, encodeURIComponent(String(_fromDate))).replace(`{${"toDate"}}`, encodeURIComponent(String(_toDate))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CallsUsageDtoDtoFromJSON(jsonValue));
    }

    /**
     * Get api calls in date range for team.
     */
    async getUsagesForTeam(team: string, fromDate: Date, toDate: Date, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CallsUsageDtoDto> {
        const response = await this.getUsagesForTeamRaw(team, fromDate, toDate, initOverrides);
        return await response.value();
    }

}
