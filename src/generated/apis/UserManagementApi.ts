/**
 * Squidex API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateUserDto,
  UpdateUserDto,
  UserDto,
  UsersDto,
} from '../models/index';
import {
    CreateUserDtoToJSON,
    UpdateUserDtoToJSON,
    UserDtoFromJSON,
    UsersDtoFromJSON,
} from '../models/index';

export interface UserManagementDeleteUserRequestRaw {
    id: string;
}

export interface UserManagementGetUserRequestRaw {
    id: string;
}

export interface UserManagementGetUsersRequest {
    query?: string | null;
    skip?: number;
    take?: number;
}

export interface UserManagementGetUsersRequestRaw {
    query?: string | null;
    skip?: number;
    take?: number;
}

export interface UserManagementLockUserRequestRaw {
    id: string;
}

export interface UserManagementPostUserRequestRaw {
    createUserDto: CreateUserDto;
}

export interface UserManagementPutUserRequestRaw {
    id: string;
    updateUserDto: UpdateUserDto;
}

export interface UserManagementUnlockUserRequestRaw {
    id: string;
}

/**
 * UserManagementApi - interface
 * 
 * @export
 * @interface UserManagementApiInterface
 */
export interface UserManagementApiInterface {
    /**
     * 
     * @summary Delete a User.
     * @param {string} id The ID of the user to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementApiInterface
     */
    deleteUserRaw(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete a User.
     */
    deleteUser(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Get a user by ID.
     * @param {string} id The ID of the user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementApiInterface
     */
    getUserRaw(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserDto>>;

    /**
     * Get a user by ID.
     */
    getUser(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserDto>;

    /**
     * 
     * @summary Get users by query.
     * @param {string} [query] Optional query to search by email address or username.
     * @param {number} [skip] The number of users to skip.
     * @param {number} [take] The number of users to return.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementApiInterface
     */
    getUsersRaw(requestParameters?: UserManagementGetUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UsersDto>>;

    /**
     * Get users by query.
     */
    getUsers(requestParameters?: UserManagementGetUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UsersDto>;

    /**
     * 
     * @summary Lock a user.
     * @param {string} id The ID of the user to lock.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementApiInterface
     */
    lockUserRaw(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserDto>>;

    /**
     * Lock a user.
     */
    lockUser(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserDto>;

    /**
     * 
     * @summary Create a new user.
     * @param {CreateUserDto} createUserDto The user object that needs to be added.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementApiInterface
     */
    postUserRaw(createUserDto: CreateUserDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserDto>>;

    /**
     * Create a new user.
     */
    postUser(createUserDto: CreateUserDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserDto>;

    /**
     * 
     * @summary Update a user.
     * @param {string} id The ID of the user.
     * @param {UpdateUserDto} updateUserDto The user object that needs to be updated.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementApiInterface
     */
    putUserRaw(id: string, updateUserDto: UpdateUserDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserDto>>;

    /**
     * Update a user.
     */
    putUser(id: string, updateUserDto: UpdateUserDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserDto>;

    /**
     * 
     * @summary Unlock a user.
     * @param {string} id The ID of the user to unlock.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementApiInterface
     */
    unlockUserRaw(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserDto>>;

    /**
     * Unlock a user.
     */
    unlockUser(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserDto>;

}

/**
 * 
 */
export class UserManagementApi extends runtime.BaseAPI implements UserManagementApiInterface {

    /**
     * Delete a User.
     */
    async deleteUserRaw(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const _id = id;

        if (_id == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/user-management/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(_id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a User.
     */
    async deleteUser(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteUserRaw(id, initOverrides);
    }

    /**
     * Get a user by ID.
     */
    async getUserRaw(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserDto>> {
        const _id = id;

        if (_id == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/user-management/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(_id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDtoFromJSON(jsonValue));
    }

    /**
     * Get a user by ID.
     */
    async getUser(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserDto> {
        const response = await this.getUserRaw(id, initOverrides);
        return await response.value();
    }

    /**
     * Get users by query.
     */
    async getUsersRaw(requestParameters: UserManagementGetUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UsersDto>> {
        const _query = requestParameters?.['query'];
        const _skip = requestParameters?.['skip'];
        const _take = requestParameters?.['take'];

        const queryParameters: any = {};

        if (_query != null) {
            queryParameters['query'] = _query;
        }

        if (_skip != null) {
            queryParameters['skip'] = _skip;
        }

        if (_take != null) {
            queryParameters['take'] = _take;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/user-management`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UsersDtoFromJSON(jsonValue));
    }

    /**
     * Get users by query.
     */
    async getUsers(requestParameters: UserManagementGetUsersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UsersDto> {
        const response = await this.getUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lock a user.
     */
    async lockUserRaw(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserDto>> {
        const _id = id;

        if (_id == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/user-management/{id}/lock`.replace(`{${"id"}}`, encodeURIComponent(String(_id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDtoFromJSON(jsonValue));
    }

    /**
     * Lock a user.
     */
    async lockUser(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserDto> {
        const response = await this.lockUserRaw(id, initOverrides);
        return await response.value();
    }

    /**
     * Create a new user.
     */
    async postUserRaw(createUserDto: CreateUserDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserDto>> {
        const _createUserDto = createUserDto;

        if (_createUserDto == null) {
            throw new runtime.RequiredError(
                'createUserDto',
                'Required parameter "createUserDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/user-management`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateUserDtoToJSON(_createUserDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDtoFromJSON(jsonValue));
    }

    /**
     * Create a new user.
     */
    async postUser(createUserDto: CreateUserDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserDto> {
        const response = await this.postUserRaw(createUserDto, initOverrides);
        return await response.value();
    }

    /**
     * Update a user.
     */
    async putUserRaw(id: string, updateUserDto: UpdateUserDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserDto>> {
        const _id = id;
        const _updateUserDto = updateUserDto;

        if (_id == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        if (_updateUserDto == null) {
            throw new runtime.RequiredError(
                'updateUserDto',
                'Required parameter "updateUserDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/user-management/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(_id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateUserDtoToJSON(_updateUserDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDtoFromJSON(jsonValue));
    }

    /**
     * Update a user.
     */
    async putUser(id: string, updateUserDto: UpdateUserDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserDto> {
        const response = await this.putUserRaw(id, updateUserDto, initOverrides);
        return await response.value();
    }

    /**
     * Unlock a user.
     */
    async unlockUserRaw(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserDto>> {
        const _id = id;

        if (_id == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/user-management/{id}/unlock`.replace(`{${"id"}}`, encodeURIComponent(String(_id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDtoFromJSON(jsonValue));
    }

    /**
     * Unlock a user.
     */
    async unlockUser(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserDto> {
        const response = await this.unlockUserRaw(id, initOverrides);
        return await response.value();
    }

}
