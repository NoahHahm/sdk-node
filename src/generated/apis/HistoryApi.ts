/**
 * Squidex API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HistoryEventDto,
} from '../models/index';
import {
    HistoryEventDtoFromJSON,
} from '../models/index';

export interface HistoryGetAppHistoryRequest {
    channel?: string;
}

export interface HistoryGetAppHistoryRequestRaw {
    channel?: string;
}

export interface HistoryGetTeamHistoryRequest {
    channel?: string;
}

export interface HistoryGetTeamHistoryRequestRaw {
    team: string;
    channel?: string;
}

/**
 * HistoryApi - interface
 * 
 * @export
 * @interface HistoryApiInterface
 */
export interface HistoryApiInterface {
    /**
     * 
     * @summary Get the app history.
     * @param {string} [channel] The name of the channel.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HistoryApiInterface
     */
    getAppHistoryRaw(requestParameters?: HistoryGetAppHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<HistoryEventDto>>>;

    /**
     * Get the app history.
     */
    getAppHistory(requestParameters?: HistoryGetAppHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<HistoryEventDto>>;

    /**
     * 
     * @summary Get the team history.
     * @param {string} team The ID of the team.
     * @param {string} [channel] The name of the channel.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HistoryApiInterface
     */
    getTeamHistoryRaw(team: string, requestParameters?: HistoryGetTeamHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<HistoryEventDto>>>;

    /**
     * Get the team history.
     */
    getTeamHistory(team: string, requestParameters?: HistoryGetTeamHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<HistoryEventDto>>;

}

/**
 * 
 */
export class HistoryApi extends runtime.BaseAPI implements HistoryApiInterface {

    /**
     * Get the app history.
     */
    async getAppHistoryRaw(requestParameters: HistoryGetAppHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<HistoryEventDto>>> {
        const _channel = requestParameters?.['channel'];

        const queryParameters: any = {};

        if (_channel != null) {
            queryParameters['channel'] = _channel;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/$app$/history`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(HistoryEventDtoFromJSON));
    }

    /**
     * Get the app history.
     */
    async getAppHistory(requestParameters: HistoryGetAppHistoryRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<HistoryEventDto>> {
        const response = await this.getAppHistoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the team history.
     */
    async getTeamHistoryRaw(team: string, requestParameters: HistoryGetTeamHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<HistoryEventDto>>> {
        const _team = team;
        const _channel = requestParameters?.['channel'];

        if (_team == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        if (_channel != null) {
            queryParameters['channel'] = _channel;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/teams/{team}/history`.replace(`{${"team"}}`, encodeURIComponent(String(_team))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(HistoryEventDtoFromJSON));
    }

    /**
     * Get the team history.
     */
    async getTeamHistory(team: string, requestParameters: HistoryGetTeamHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<HistoryEventDto>> {
        const response = await this.getTeamHistoryRaw(team, requestParameters, initOverrides);
        return await response.value();
    }

}
