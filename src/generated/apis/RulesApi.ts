/**
 * Squidex API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateRuleDto,
  RuleDto,
  RuleElementDto,
  RuleEventsDto,
  RulesDto,
  SimulatedRuleEventsDto,
  UpdateRuleDto,
} from '../models/index';
import {
    CreateRuleDtoToJSON,
    RuleDtoFromJSON,
    RuleElementDtoFromJSON,
    RuleEventsDtoFromJSON,
    RulesDtoFromJSON,
    SimulatedRuleEventsDtoFromJSON,
    UpdateRuleDtoToJSON,
} from '../models/index';

export interface RulesDeleteEventRequest {
    id: string;
}

export interface RulesDeleteRuleRequest {
    id: string;
}

export interface RulesDeleteRuleEventsRequest {
    id: string;
}

export interface RulesDisableRuleRequest {
    id: string;
}

export interface RulesEnableRuleRequest {
    id: string;
}

export interface RulesGetEventSchemaRequest {
    type: string;
}

export interface RulesGetEventsRequest {
    ruleId?: string | null;
    skip?: number;
    take?: number;
}

export interface RulesPostRuleRequest {
    createRuleDto: CreateRuleDto;
}

export interface RulesPutEventRequest {
    id: string;
}

export interface RulesPutRuleRequest {
    id: string;
    updateRuleDto: UpdateRuleDto;
}

export interface RulesPutRuleRunRequest {
    id: string;
    fromSnapshots?: boolean;
}

export interface RulesSimulateGETRequest {
    id: string;
}

export interface RulesSimulatePOSTRequest {
    createRuleDto: CreateRuleDto;
}

export interface RulesTriggerRuleRequest {
    id: string;
}

/**
 * RulesApi - interface
 * 
 * @export
 * @interface RulesApiInterface
 */
export interface RulesApiInterface {
    /**
     * 
     * @summary Cancels an event.
     * @param {string} id The event to cancel.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RulesApiInterface
     */
    deleteEventRaw(requestParameters: RulesDeleteEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Cancels an event.
     */
    deleteEvent(requestParameters: RulesDeleteEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Cancels all events.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RulesApiInterface
     */
    deleteEventsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Cancels all events.
     */
    deleteEvents(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Delete a rule.
     * @param {string} id The ID of the rule to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RulesApiInterface
     */
    deleteRuleRaw(requestParameters: RulesDeleteRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete a rule.
     */
    deleteRule(requestParameters: RulesDeleteRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Cancels all rule events.
     * @param {string} id The ID of the rule to cancel.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RulesApiInterface
     */
    deleteRuleEventsRaw(requestParameters: RulesDeleteRuleEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Cancels all rule events.
     */
    deleteRuleEvents(requestParameters: RulesDeleteRuleEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Cancel the current run.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RulesApiInterface
     */
    deleteRuleRunRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Cancel the current run.
     */
    deleteRuleRun(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Disable a rule.
     * @param {string} id The ID of the rule to disable.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RulesApiInterface
     */
    disableRuleRaw(requestParameters: RulesDisableRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RuleDto>>;

    /**
     * Disable a rule.
     */
    disableRule(requestParameters: RulesDisableRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RuleDto>;

    /**
     * 
     * @summary Enable a rule.
     * @param {string} id The ID of the rule to enable.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RulesApiInterface
     */
    enableRuleRaw(requestParameters: RulesEnableRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RuleDto>>;

    /**
     * Enable a rule.
     */
    enableRule(requestParameters: RulesEnableRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RuleDto>;

    /**
     * 
     * @summary Get supported rule actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RulesApiInterface
     */
    getActionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: RuleElementDto; }>>;

    /**
     * Get supported rule actions.
     */
    getActions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: RuleElementDto; }>;

    /**
     * 
     * @summary Provide the json schema for the event with the specified name.
     * @param {string} type The type name of the event.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RulesApiInterface
     */
    getEventSchemaRaw(requestParameters: RulesGetEventSchemaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Provide the json schema for the event with the specified name.
     */
    getEventSchema(requestParameters: RulesGetEventSchemaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * 
     * @summary Provide a list of all event types that are used in rules.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RulesApiInterface
     */
    getEventTypesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>>;

    /**
     * Provide a list of all event types that are used in rules.
     */
    getEventTypes(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>>;

    /**
     * 
     * @summary Get rule events.
     * @param {string} [ruleId] The optional rule id to filter to events.
     * @param {number} [skip] The number of events to skip.
     * @param {number} [take] The number of events to take.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RulesApiInterface
     */
    getEventsRaw(requestParameters: RulesGetEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RuleEventsDto>>;

    /**
     * Get rule events.
     */
    getEvents(requestParameters: RulesGetEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RuleEventsDto>;

    /**
     * 
     * @summary Get rules.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RulesApiInterface
     */
    getRulesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RulesDto>>;

    /**
     * Get rules.
     */
    getRules(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RulesDto>;

    /**
     * 
     * @summary Create a new rule.
     * @param {CreateRuleDto} createRuleDto The rule object that needs to be added to the app.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RulesApiInterface
     */
    postRuleRaw(requestParameters: RulesPostRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RuleDto>>;

    /**
     * Create a new rule.
     */
    postRule(requestParameters: RulesPostRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RuleDto>;

    /**
     * 
     * @summary Retry the event immediately.
     * @param {string} id The event to enqueue.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RulesApiInterface
     */
    putEventRaw(requestParameters: RulesPutEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Retry the event immediately.
     */
    putEvent(requestParameters: RulesPutEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Update a rule.
     * @param {string} id The ID of the rule to update.
     * @param {UpdateRuleDto} updateRuleDto The rule object that needs to be added to the app.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RulesApiInterface
     */
    putRuleRaw(requestParameters: RulesPutRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RuleDto>>;

    /**
     * Update a rule.
     */
    putRule(requestParameters: RulesPutRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RuleDto>;

    /**
     * 
     * @summary Run a rule.
     * @param {string} id The ID of the rule to run.
     * @param {boolean} [fromSnapshots] Runs the rule from snapeshots if possible.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RulesApiInterface
     */
    putRuleRunRaw(requestParameters: RulesPutRuleRunRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Run a rule.
     */
    putRuleRun(requestParameters: RulesPutRuleRunRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Simulate a rule.
     * @param {string} id The ID of the rule to simulate.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RulesApiInterface
     */
    simulateGETRaw(requestParameters: RulesSimulateGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SimulatedRuleEventsDto>>;

    /**
     * Simulate a rule.
     */
    simulateGET(requestParameters: RulesSimulateGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SimulatedRuleEventsDto>;

    /**
     * 
     * @summary Simulate a rule.
     * @param {CreateRuleDto} createRuleDto The rule to simulate.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RulesApiInterface
     */
    simulatePOSTRaw(requestParameters: RulesSimulatePOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SimulatedRuleEventsDto>>;

    /**
     * Simulate a rule.
     */
    simulatePOST(requestParameters: RulesSimulatePOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SimulatedRuleEventsDto>;

    /**
     * 
     * @summary Trigger a rule.
     * @param {string} id The ID of the rule to disable.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RulesApiInterface
     */
    triggerRuleRaw(requestParameters: RulesTriggerRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Trigger a rule.
     */
    triggerRule(requestParameters: RulesTriggerRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class RulesApi extends runtime.BaseAPI implements RulesApiInterface {

    /**
     * Cancels an event.
     */
    async deleteEventRaw(requestParameters: RulesDeleteEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/$app$/rules/events/{id}`.replace(`{${"id"}}`, encodeURIComponent(String((requestParameters as any)['id']))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Cancels an event.
     */
    async deleteEvent(requestParameters: RulesDeleteEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteEventRaw(requestParameters, initOverrides);
    }

    /**
     * Cancels all events.
     */
    async deleteEventsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/$app$/rules/events`.replace("$app$", encodeURIComponent(this.appName)),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Cancels all events.
     */
    async deleteEvents(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteEventsRaw(initOverrides);
    }

    /**
     * Delete a rule.
     */
    async deleteRuleRaw(requestParameters: RulesDeleteRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/$app$/rules/{id}`.replace(`{${"id"}}`, encodeURIComponent(String((requestParameters as any)['id']))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a rule.
     */
    async deleteRule(requestParameters: RulesDeleteRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteRuleRaw(requestParameters, initOverrides);
    }

    /**
     * Cancels all rule events.
     */
    async deleteRuleEventsRaw(requestParameters: RulesDeleteRuleEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/$app$/rules/{id}/events`.replace(`{${"id"}}`, encodeURIComponent(String((requestParameters as any)['id']))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Cancels all rule events.
     */
    async deleteRuleEvents(requestParameters: RulesDeleteRuleEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteRuleEventsRaw(requestParameters, initOverrides);
    }

    /**
     * Cancel the current run.
     */
    async deleteRuleRunRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/$app$/rules/run`.replace("$app$", encodeURIComponent(this.appName)),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Cancel the current run.
     */
    async deleteRuleRun(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteRuleRunRaw(initOverrides);
    }

    /**
     * Disable a rule.
     */
    async disableRuleRaw(requestParameters: RulesDisableRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RuleDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/$app$/rules/{id}/disable`.replace(`{${"id"}}`, encodeURIComponent(String((requestParameters as any)['id']))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RuleDtoFromJSON(jsonValue));
    }

    /**
     * Disable a rule.
     */
    async disableRule(requestParameters: RulesDisableRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RuleDto> {
        const response = await this.disableRuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Enable a rule.
     */
    async enableRuleRaw(requestParameters: RulesEnableRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RuleDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/$app$/rules/{id}/enable`.replace(`{${"id"}}`, encodeURIComponent(String((requestParameters as any)['id']))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RuleDtoFromJSON(jsonValue));
    }

    /**
     * Enable a rule.
     */
    async enableRule(requestParameters: RulesEnableRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RuleDto> {
        const response = await this.enableRuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get supported rule actions.
     */
    async getActionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: RuleElementDto; }>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/rules/actions`.replace("$app$", encodeURIComponent(this.appName)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => runtime.mapValues(jsonValue, RuleElementDtoFromJSON));
    }

    /**
     * Get supported rule actions.
     */
    async getActions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: RuleElementDto; }> {
        const response = await this.getActionsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Provide the json schema for the event with the specified name.
     */
    async getEventSchemaRaw(requestParameters: RulesGetEventSchemaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/rules/eventtypes/{type}`.replace(`{${"type"}}`, encodeURIComponent(String((requestParameters as any)['type']))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Provide the json schema for the event with the specified name.
     */
    async getEventSchema(requestParameters: RulesGetEventSchemaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getEventSchemaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Provide a list of all event types that are used in rules.
     */
    async getEventTypesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/rules/eventtypes`.replace("$app$", encodeURIComponent(this.appName)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Provide a list of all event types that are used in rules.
     */
    async getEventTypes(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.getEventTypesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get rule events.
     */
    async getEventsRaw(requestParameters: RulesGetEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RuleEventsDto>> {
        const queryParameters: any = {};

        if (requestParameters['ruleId'] != null) {
            queryParameters['ruleId'] = requestParameters['ruleId'];
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/$app$/rules/events`.replace("$app$", encodeURIComponent(this.appName)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RuleEventsDtoFromJSON(jsonValue));
    }

    /**
     * Get rule events.
     */
    async getEvents(requestParameters: RulesGetEventsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RuleEventsDto> {
        const response = await this.getEventsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get rules.
     */
    async getRulesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RulesDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/$app$/rules`.replace("$app$", encodeURIComponent(this.appName)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RulesDtoFromJSON(jsonValue));
    }

    /**
     * Get rules.
     */
    async getRules(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RulesDto> {
        const response = await this.getRulesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Create a new rule.
     */
    async postRuleRaw(requestParameters: RulesPostRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RuleDto>> {
        if (requestParameters['createRuleDto'] == null) {
            throw new runtime.RequiredError(
                'createRuleDto',
                'Required parameter "createRuleDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/apps/$app$/rules`.replace("$app$", encodeURIComponent(this.appName)),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateRuleDtoToJSON(requestParameters['createRuleDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RuleDtoFromJSON(jsonValue));
    }

    /**
     * Create a new rule.
     */
    async postRule(requestParameters: RulesPostRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RuleDto> {
        const response = await this.postRuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retry the event immediately.
     */
    async putEventRaw(requestParameters: RulesPutEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/$app$/rules/events/{id}`.replace(`{${"id"}}`, encodeURIComponent(String((requestParameters as any)['id']))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retry the event immediately.
     */
    async putEvent(requestParameters: RulesPutEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.putEventRaw(requestParameters, initOverrides);
    }

    /**
     * Update a rule.
     */
    async putRuleRaw(requestParameters: RulesPutRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RuleDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        if (requestParameters['updateRuleDto'] == null) {
            throw new runtime.RequiredError(
                'updateRuleDto',
                'Required parameter "updateRuleDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/apps/$app$/rules/{id}`.replace(`{${"id"}}`, encodeURIComponent(String((requestParameters as any)['id']))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateRuleDtoToJSON(requestParameters['updateRuleDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RuleDtoFromJSON(jsonValue));
    }

    /**
     * Update a rule.
     */
    async putRule(requestParameters: RulesPutRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RuleDto> {
        const response = await this.putRuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Run a rule.
     */
    async putRuleRunRaw(requestParameters: RulesPutRuleRunRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['fromSnapshots'] != null) {
            queryParameters['fromSnapshots'] = requestParameters['fromSnapshots'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/$app$/rules/{id}/run`.replace(`{${"id"}}`, encodeURIComponent(String((requestParameters as any)['id']))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Run a rule.
     */
    async putRuleRun(requestParameters: RulesPutRuleRunRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.putRuleRunRaw(requestParameters, initOverrides);
    }

    /**
     * Simulate a rule.
     */
    async simulateGETRaw(requestParameters: RulesSimulateGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SimulatedRuleEventsDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/$app$/rules/{id}/simulate`.replace(`{${"id"}}`, encodeURIComponent(String((requestParameters as any)['id']))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SimulatedRuleEventsDtoFromJSON(jsonValue));
    }

    /**
     * Simulate a rule.
     */
    async simulateGET(requestParameters: RulesSimulateGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SimulatedRuleEventsDto> {
        const response = await this.simulateGETRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Simulate a rule.
     */
    async simulatePOSTRaw(requestParameters: RulesSimulatePOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SimulatedRuleEventsDto>> {
        if (requestParameters['createRuleDto'] == null) {
            throw new runtime.RequiredError(
                'createRuleDto',
                'Required parameter "createRuleDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/apps/$app$/rules/simulate`.replace("$app$", encodeURIComponent(this.appName)),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateRuleDtoToJSON(requestParameters['createRuleDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SimulatedRuleEventsDtoFromJSON(jsonValue));
    }

    /**
     * Simulate a rule.
     */
    async simulatePOST(requestParameters: RulesSimulatePOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SimulatedRuleEventsDto> {
        const response = await this.simulatePOSTRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Trigger a rule.
     */
    async triggerRuleRaw(requestParameters: RulesTriggerRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/$app$/rules/{id}/trigger`.replace(`{${"id"}}`, encodeURIComponent(String((requestParameters as any)['id']))).replace("$app$", encodeURIComponent(this.appName)),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Trigger a rule.
     */
    async triggerRule(requestParameters: RulesTriggerRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.triggerRuleRaw(requestParameters, initOverrides);
    }

}
