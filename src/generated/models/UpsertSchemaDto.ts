/* tslint:disable */
/* eslint-disable */
/**
 * Squidex API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { SchemaPropertiesDto } from './SchemaPropertiesDto';
import {
    SchemaPropertiesDtoFromJSON,
    SchemaPropertiesDtoFromJSONTyped,
    SchemaPropertiesDtoToJSON,
} from './SchemaPropertiesDto';
import type { SchemaScriptsDto } from './SchemaScriptsDto';
import {
    SchemaScriptsDtoFromJSON,
    SchemaScriptsDtoFromJSONTyped,
    SchemaScriptsDtoToJSON,
} from './SchemaScriptsDto';
import type { UpsertSchemaFieldDto } from './UpsertSchemaFieldDto';
import {
    UpsertSchemaFieldDtoFromJSON,
    UpsertSchemaFieldDtoFromJSONTyped,
    UpsertSchemaFieldDtoToJSON,
} from './UpsertSchemaFieldDto';
import type { FieldRuleDto } from './FieldRuleDto';
import {
    FieldRuleDtoFromJSON,
    FieldRuleDtoFromJSONTyped,
    FieldRuleDtoToJSON,
} from './FieldRuleDto';

/**
 * 
 * @export
 * @interface UpsertSchemaDto
 */
export interface UpsertSchemaDto {
    /**
     * 
     * @type {SchemaPropertiesDto}
     * @memberof UpsertSchemaDto
     */
    properties?: SchemaPropertiesDto;
    /**
     * 
     * @type {SchemaScriptsDto}
     * @memberof UpsertSchemaDto
     */
    scripts?: SchemaScriptsDto;
    /**
     * The names of the fields that should be used in references.
     * @type {Array<string>}
     * @memberof UpsertSchemaDto
     */
    fieldsInReferences?: Array<string> | null;
    /**
     * The names of the fields that should be shown in lists, including meta fields.
     * @type {Array<string>}
     * @memberof UpsertSchemaDto
     */
    fieldsInLists?: Array<string> | null;
    /**
     * Optional fields.
     * @type {Array<UpsertSchemaFieldDto>}
     * @memberof UpsertSchemaDto
     */
    fields?: Array<UpsertSchemaFieldDto> | null;
    /**
     * The optional preview urls.
     * @type {{ [key: string]: string; }}
     * @memberof UpsertSchemaDto
     */
    previewUrls?: { [key: string]: string; } | null;
    /**
     * The optional field Rules.
     * @type {Array<FieldRuleDto>}
     * @memberof UpsertSchemaDto
     */
    fieldRules?: Array<FieldRuleDto> | null;
    /**
     * The category.
     * @type {string}
     * @memberof UpsertSchemaDto
     */
    category?: string | null;
    /**
     * Set it to true to autopublish the schema.
     * @type {boolean}
     * @memberof UpsertSchemaDto
     */
    isPublished?: boolean;
}


/**
 * Check if a given object implements the UpsertSchemaDto interface.
 */
export function instanceOfUpsertSchemaDto(value: object): value is UpsertSchemaDto {
    return true;
}

export function UpsertSchemaDtoFromJSON(json: any): UpsertSchemaDto {
    return UpsertSchemaDtoFromJSONTyped(json, false);
}

export function UpsertSchemaDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpsertSchemaDto {
    if (json == null) {
        return json;
    }
    return {
        
        'properties': json['properties'] == null ? undefined : SchemaPropertiesDtoFromJSON(json['properties']),
        'scripts': json['scripts'] == null ? undefined : SchemaScriptsDtoFromJSON(json['scripts']),
        'fieldsInReferences': json['fieldsInReferences'] == null ? undefined : json['fieldsInReferences'],
        'fieldsInLists': json['fieldsInLists'] == null ? undefined : json['fieldsInLists'],
        'fields': json['fields'] == null ? undefined : ((json['fields'] as Array<any>).map(UpsertSchemaFieldDtoFromJSON)),
        'previewUrls': json['previewUrls'] == null ? undefined : json['previewUrls'],
        'fieldRules': json['fieldRules'] == null ? undefined : ((json['fieldRules'] as Array<any>).map(FieldRuleDtoFromJSON)),
        'category': json['category'] == null ? undefined : json['category'],
        'isPublished': json['isPublished'] == null ? undefined : json['isPublished'],
    };
}

export function UpsertSchemaDtoToJSON(value?: UpsertSchemaDto | null, ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }
    return {
        
        'properties': SchemaPropertiesDtoToJSON(value['properties']),
        'scripts': SchemaScriptsDtoToJSON(value['scripts']),
        'fieldsInReferences': value['fieldsInReferences'],
        'fieldsInLists': value['fieldsInLists'],
        'fields': value['fields'] == null ? undefined : ((value['fields'] as Array<any>).map(UpsertSchemaFieldDtoToJSON)),
        'previewUrls': value['previewUrls'],
        'fieldRules': value['fieldRules'] == null ? undefined : ((value['fieldRules'] as Array<any>).map(FieldRuleDtoToJSON)),
        'category': value['category'],
        'isPublished': value['isPublished'],
    };
}
