/* tslint:disable */
/* eslint-disable */
/**
 * Squidex API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { FieldPropertiesDto } from './FieldPropertiesDto';
import {
    FieldPropertiesDtoFromJSON,
    FieldPropertiesDtoFromJSONTyped,
    FieldPropertiesDtoToJSON,
} from './FieldPropertiesDto';
import type { DateTimeFieldEditor } from './DateTimeFieldEditor';
import {
    DateTimeFieldEditorFromJSON,
    DateTimeFieldEditorFromJSONTyped,
    DateTimeFieldEditorToJSON,
} from './DateTimeFieldEditor';
import type { DateTimeCalculatedDefaultValue } from './DateTimeCalculatedDefaultValue';
import {
    DateTimeCalculatedDefaultValueFromJSON,
    DateTimeCalculatedDefaultValueFromJSONTyped,
    DateTimeCalculatedDefaultValueToJSON,
} from './DateTimeCalculatedDefaultValue';

/**
 * 
 * @export
 * @interface DateTimeFieldPropertiesDto
 */
export interface DateTimeFieldPropertiesDto extends FieldPropertiesDto {
    /**
     * 
     * @type {{ [key: string]: Date | null; }}
     * @memberof DateTimeFieldPropertiesDto
     */
    defaultValues?: { [key: string]: Date | null; };
    /**
     * The default value for the field value.
     * @type {Date}
     * @memberof DateTimeFieldPropertiesDto
     */
    defaultValue?: Date | null;
    /**
     * The maximum allowed value for the field value.
     * @type {Date}
     * @memberof DateTimeFieldPropertiesDto
     */
    maxValue?: Date | null;
    /**
     * The minimum allowed value for the field value.
     * @type {Date}
     * @memberof DateTimeFieldPropertiesDto
     */
    minValue?: Date | null;
    /**
     * The format pattern when displayed in the UI.
     * @type {string}
     * @memberof DateTimeFieldPropertiesDto
     */
    format?: string | null;
    /**
     * 
     * @type {DateTimeFieldEditor}
     * @memberof DateTimeFieldPropertiesDto
     */
    editor?: DateTimeFieldEditor;
    /**
     * 
     * @type {DateTimeCalculatedDefaultValue}
     * @memberof DateTimeFieldPropertiesDto
     */
    calculatedDefaultValue?: DateTimeCalculatedDefaultValue;
}




/**
 * Check if a given object implements the DateTimeFieldPropertiesDto interface.
 */
export function instanceOfDateTimeFieldPropertiesDto(value: any): value is DateTimeFieldPropertiesDto {
    return true;
}

export function DateTimeFieldPropertiesDtoFromJSON(json: any): DateTimeFieldPropertiesDto {
    return DateTimeFieldPropertiesDtoFromJSONTyped(json, false);
}

export function DateTimeFieldPropertiesDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): DateTimeFieldPropertiesDto {
    if (json == null) {
        return json;
    }
    return {
        ...FieldPropertiesDtoFromJSONTyped(json, ignoreDiscriminator),
        'defaultValues': json['defaultValues'] == null ? undefined : json['defaultValues'],
        'defaultValue': json['defaultValue'] == null ? undefined : (new Date(json['defaultValue'])),
        'maxValue': json['maxValue'] == null ? undefined : (new Date(json['maxValue'])),
        'minValue': json['minValue'] == null ? undefined : (new Date(json['minValue'])),
        'format': json['format'] == null ? undefined : json['format'],
        'editor': json['editor'] == null ? undefined : DateTimeFieldEditorFromJSON(json['editor']),
        'calculatedDefaultValue': json['calculatedDefaultValue'] == null ? undefined : DateTimeCalculatedDefaultValueFromJSON(json['calculatedDefaultValue']),
    };
}

export function DateTimeFieldPropertiesDtoToJSON(value?: DateTimeFieldPropertiesDto | null, ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }
    return {
        ...FieldPropertiesDtoToJSON(value, true),
        'defaultValues': value['defaultValues'],
        'defaultValue': value['defaultValue'] == null ? undefined : ((value['defaultValue'] as any).toISOString()),
        'maxValue': value['maxValue'] == null ? undefined : ((value['maxValue'] as any).toISOString()),
        'minValue': value['minValue'] == null ? undefined : ((value['minValue'] as any).toISOString()),
        'format': value['format'],
        'editor': DateTimeFieldEditorToJSON(value['editor']),
        'calculatedDefaultValue': DateTimeCalculatedDefaultValueToJSON(value['calculatedDefaultValue']),
    };
}
