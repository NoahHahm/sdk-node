/**
 * Squidex API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { FieldPropertiesDto } from './FieldPropertiesDto';
import {
    FieldPropertiesDtoFromJSONTyped,
    FieldPropertiesDtoToJSON,
} from './FieldPropertiesDto';

/**
 * 
 * @export
 * @interface RichTextFieldPropertiesDto
 */
export interface RichTextFieldPropertiesDto extends FieldPropertiesDto {
    /**
     * The initial id to the folder when the control supports file uploads.
     * @type {string}
     * @memberof RichTextFieldPropertiesDto
     */
    folderId?: string | null;
    /**
     * The minimum allowed length for the field value.
     * @type {number}
     * @memberof RichTextFieldPropertiesDto
     */
    minLength?: number | null;
    /**
     * The maximum allowed length for the field value.
     * @type {number}
     * @memberof RichTextFieldPropertiesDto
     */
    maxLength?: number | null;
    /**
     * The minimum allowed of normal characters for the field value.
     * @type {number}
     * @memberof RichTextFieldPropertiesDto
     */
    minCharacters?: number | null;
    /**
     * The maximum allowed of normal characters for the field value.
     * @type {number}
     * @memberof RichTextFieldPropertiesDto
     */
    maxCharacters?: number | null;
    /**
     * The minimum allowed number of words for the field value.
     * @type {number}
     * @memberof RichTextFieldPropertiesDto
     */
    minWords?: number | null;
    /**
     * The maximum allowed number of words for the field value.
     * @type {number}
     * @memberof RichTextFieldPropertiesDto
     */
    maxWords?: number | null;
    /**
     * The class names for the editor.
     * @type {Array<string>}
     * @memberof RichTextFieldPropertiesDto
     */
    classNames?: Array<string> | null;
    /**
     * The allowed schema ids that can be embedded.
     * @type {Array<string>}
     * @memberof RichTextFieldPropertiesDto
     */
    schemaIds?: Array<string> | null;
}


/**
 * Check if a given object implements the RichTextFieldPropertiesDto interface.
 */
export function instanceOfRichTextFieldPropertiesDto(value: any): value is RichTextFieldPropertiesDto {
    if (!value) {
        return false;
    }
    return true;
}

export function RichTextFieldPropertiesDtoFromJSON(json: any): RichTextFieldPropertiesDto {
    return RichTextFieldPropertiesDtoFromJSONTyped(json, false);
}

export function RichTextFieldPropertiesDtoFromJSONTyped(json: any, _ignoreDiscriminator: boolean): RichTextFieldPropertiesDto {
    if (json == null) {
        return json;
    }
    return {
        ...FieldPropertiesDtoFromJSONTyped(json, _ignoreDiscriminator),
        'folderId': json['folderId'] == null ? undefined : json['folderId'],
        'minLength': json['minLength'] == null ? undefined : json['minLength'],
        'maxLength': json['maxLength'] == null ? undefined : json['maxLength'],
        'minCharacters': json['minCharacters'] == null ? undefined : json['minCharacters'],
        'maxCharacters': json['maxCharacters'] == null ? undefined : json['maxCharacters'],
        'minWords': json['minWords'] == null ? undefined : json['minWords'],
        'maxWords': json['maxWords'] == null ? undefined : json['maxWords'],
        'classNames': json['classNames'] == null ? undefined : json['classNames'],
        'schemaIds': json['schemaIds'] == null ? undefined : json['schemaIds'],
    };
}

export function RichTextFieldPropertiesDtoToJSON(value?: RichTextFieldPropertiesDto | null, _ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }
    return {
        ...FieldPropertiesDtoToJSON(value, true),
        'folderId': value['folderId'],
        'minLength': value['minLength'],
        'maxLength': value['maxLength'],
        'minCharacters': value['minCharacters'],
        'maxCharacters': value['maxCharacters'],
        'minWords': value['minWords'],
        'maxWords': value['maxWords'],
        'classNames': value['classNames'],
        'schemaIds': value['schemaIds'],
    };
}
