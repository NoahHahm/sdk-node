/**
 * Squidex API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { ArrayFieldPropertiesDto, ArrayFieldPropertiesDtoFromJSONTyped, ArrayFieldPropertiesDtoToJSON } from './ArrayFieldPropertiesDto';
import { AssetsFieldPropertiesDto, AssetsFieldPropertiesDtoFromJSONTyped, AssetsFieldPropertiesDtoToJSON } from './AssetsFieldPropertiesDto';
import { BooleanFieldPropertiesDto, BooleanFieldPropertiesDtoFromJSONTyped, BooleanFieldPropertiesDtoToJSON } from './BooleanFieldPropertiesDto';
import { ComponentFieldPropertiesDto, ComponentFieldPropertiesDtoFromJSONTyped, ComponentFieldPropertiesDtoToJSON } from './ComponentFieldPropertiesDto';
import { ComponentsFieldPropertiesDto, ComponentsFieldPropertiesDtoFromJSONTyped, ComponentsFieldPropertiesDtoToJSON } from './ComponentsFieldPropertiesDto';
import { DateTimeFieldPropertiesDto, DateTimeFieldPropertiesDtoFromJSONTyped, DateTimeFieldPropertiesDtoToJSON } from './DateTimeFieldPropertiesDto';
import { GeolocationFieldPropertiesDto, GeolocationFieldPropertiesDtoFromJSONTyped, GeolocationFieldPropertiesDtoToJSON } from './GeolocationFieldPropertiesDto';
import { JsonFieldPropertiesDto, JsonFieldPropertiesDtoFromJSONTyped, JsonFieldPropertiesDtoToJSON } from './JsonFieldPropertiesDto';
import { NumberFieldPropertiesDto, NumberFieldPropertiesDtoFromJSONTyped, NumberFieldPropertiesDtoToJSON } from './NumberFieldPropertiesDto';
import { ReferencesFieldPropertiesDto, ReferencesFieldPropertiesDtoFromJSONTyped, ReferencesFieldPropertiesDtoToJSON } from './ReferencesFieldPropertiesDto';
import { RichTextFieldPropertiesDto, RichTextFieldPropertiesDtoFromJSONTyped, RichTextFieldPropertiesDtoToJSON } from './RichTextFieldPropertiesDto';
import { StringFieldPropertiesDto, StringFieldPropertiesDtoFromJSONTyped, StringFieldPropertiesDtoToJSON } from './StringFieldPropertiesDto';
import { TagsFieldPropertiesDto, TagsFieldPropertiesDtoFromJSONTyped, TagsFieldPropertiesDtoToJSON } from './TagsFieldPropertiesDto';
import { UIFieldPropertiesDto, UIFieldPropertiesDtoFromJSONTyped, UIFieldPropertiesDtoToJSON } from './UIFieldPropertiesDto';
/**
 * 
 * @export
 * @interface FieldPropertiesDto
 */
export interface FieldPropertiesDto {
    /**
     * Optional label for the editor.
     * @type {string}
     * @memberof FieldPropertiesDto
     */
    label?: string | null;
    /**
     * Hints to describe the field.
     * @type {string}
     * @memberof FieldPropertiesDto
     */
    hints?: string | null;
    /**
     * Placeholder to show when no value has been entered.
     * @type {string}
     * @memberof FieldPropertiesDto
     */
    placeholder?: string | null;
    /**
     * Indicates if the field is required.
     * @type {boolean}
     * @memberof FieldPropertiesDto
     */
    isRequired?: boolean;
    /**
     * Indicates if the field is required when publishing.
     * @type {boolean}
     * @memberof FieldPropertiesDto
     */
    isRequiredOnPublish?: boolean;
    /**
     * Indicates if the field should be rendered with half width only.
     * @type {boolean}
     * @memberof FieldPropertiesDto
     */
    isHalfWidth?: boolean;
    /**
     * Optional url to the editor.
     * @type {string}
     * @memberof FieldPropertiesDto
     */
    editorUrl?: string | null;
    /**
     * Tags for automation processes.
     * @type {Array<string>}
     * @memberof FieldPropertiesDto
     */
    tags?: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof FieldPropertiesDto
     */
    fieldType: string;
}

export function isArrayFieldPropertiesDto(value: FieldPropertiesDto): value is ArrayFieldPropertiesDto {
    return value['fieldType'] === 'Array';
}

export function isAssetsFieldPropertiesDto(value: FieldPropertiesDto): value is AssetsFieldPropertiesDto {
    return value['fieldType'] === 'Assets';
}

export function isBooleanFieldPropertiesDto(value: FieldPropertiesDto): value is BooleanFieldPropertiesDto {
    return value['fieldType'] === 'Boolean';
}

export function isComponentFieldPropertiesDto(value: FieldPropertiesDto): value is ComponentFieldPropertiesDto {
    return value['fieldType'] === 'Component';
}

export function isComponentsFieldPropertiesDto(value: FieldPropertiesDto): value is ComponentsFieldPropertiesDto {
    return value['fieldType'] === 'Components';
}

export function isDateTimeFieldPropertiesDto(value: FieldPropertiesDto): value is DateTimeFieldPropertiesDto {
    return value['fieldType'] === 'DateTime';
}

export function isGeolocationFieldPropertiesDto(value: FieldPropertiesDto): value is GeolocationFieldPropertiesDto {
    return value['fieldType'] === 'Geolocation';
}

export function isJsonFieldPropertiesDto(value: FieldPropertiesDto): value is JsonFieldPropertiesDto {
    return value['fieldType'] === 'Json';
}

export function isNumberFieldPropertiesDto(value: FieldPropertiesDto): value is NumberFieldPropertiesDto {
    return value['fieldType'] === 'Number';
}

export function isReferencesFieldPropertiesDto(value: FieldPropertiesDto): value is ReferencesFieldPropertiesDto {
    return value['fieldType'] === 'References';
}

export function isRichTextFieldPropertiesDto(value: FieldPropertiesDto): value is RichTextFieldPropertiesDto {
    return value['fieldType'] === 'RichText';
}

export function isStringFieldPropertiesDto(value: FieldPropertiesDto): value is StringFieldPropertiesDto {
    return value['fieldType'] === 'String';
}

export function isTagsFieldPropertiesDto(value: FieldPropertiesDto): value is TagsFieldPropertiesDto {
    return value['fieldType'] === 'Tags';
}

export function isUIFieldPropertiesDto(value: FieldPropertiesDto): value is UIFieldPropertiesDto {
    return value['fieldType'] === 'UI';
}


/**
 * Check if a given object implements the FieldPropertiesDto interface.
 */
export function instanceOfFieldPropertiesDto(value: any): value is FieldPropertiesDto {
    if (!value) {
        return false;
    }
    if (!('fieldType' in value) || value['fieldType'] === undefined) return false;
    return true;
}

export function FieldPropertiesDtoFromJSON(json: any): FieldPropertiesDto {
    return FieldPropertiesDtoFromJSONTyped(json, false);
}

export function FieldPropertiesDtoFromJSONTyped(json: any, _ignoreDiscriminator: boolean): FieldPropertiesDto {
    if (json == null) {
        return json;
    }
    if (!_ignoreDiscriminator) {
        if (json['fieldType'] === 'Array') {
            return ArrayFieldPropertiesDtoFromJSONTyped(json, true);
        }
        if (json['fieldType'] === 'Assets') {
            return AssetsFieldPropertiesDtoFromJSONTyped(json, true);
        }
        if (json['fieldType'] === 'Boolean') {
            return BooleanFieldPropertiesDtoFromJSONTyped(json, true);
        }
        if (json['fieldType'] === 'Component') {
            return ComponentFieldPropertiesDtoFromJSONTyped(json, true);
        }
        if (json['fieldType'] === 'Components') {
            return ComponentsFieldPropertiesDtoFromJSONTyped(json, true);
        }
        if (json['fieldType'] === 'DateTime') {
            return DateTimeFieldPropertiesDtoFromJSONTyped(json, true);
        }
        if (json['fieldType'] === 'Geolocation') {
            return GeolocationFieldPropertiesDtoFromJSONTyped(json, true);
        }
        if (json['fieldType'] === 'Json') {
            return JsonFieldPropertiesDtoFromJSONTyped(json, true);
        }
        if (json['fieldType'] === 'Number') {
            return NumberFieldPropertiesDtoFromJSONTyped(json, true);
        }
        if (json['fieldType'] === 'References') {
            return ReferencesFieldPropertiesDtoFromJSONTyped(json, true);
        }
        if (json['fieldType'] === 'RichText') {
            return RichTextFieldPropertiesDtoFromJSONTyped(json, true);
        }
        if (json['fieldType'] === 'String') {
            return StringFieldPropertiesDtoFromJSONTyped(json, true);
        }
        if (json['fieldType'] === 'Tags') {
            return TagsFieldPropertiesDtoFromJSONTyped(json, true);
        }
        if (json['fieldType'] === 'UI') {
            return UIFieldPropertiesDtoFromJSONTyped(json, true);
        }
    }
    return {
        
        'label': json['label'] == null ? undefined : json['label'],
        'hints': json['hints'] == null ? undefined : json['hints'],
        'placeholder': json['placeholder'] == null ? undefined : json['placeholder'],
        'isRequired': json['isRequired'] == null ? undefined : json['isRequired'],
        'isRequiredOnPublish': json['isRequiredOnPublish'] == null ? undefined : json['isRequiredOnPublish'],
        'isHalfWidth': json['isHalfWidth'] == null ? undefined : json['isHalfWidth'],
        'editorUrl': json['editorUrl'] == null ? undefined : json['editorUrl'],
        'tags': json['tags'] == null ? undefined : json['tags'],
        'fieldType': json['fieldType'],
    };
}

export function FieldPropertiesDtoToJSON(value?: FieldPropertiesDto | null, _ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }
    if (!_ignoreDiscriminator) {
        if (value['fieldType'] === 'Array') {
            return ArrayFieldPropertiesDtoToJSON(value as ArrayFieldPropertiesDto, true);
        }
        if (value['fieldType'] === 'Assets') {
            return AssetsFieldPropertiesDtoToJSON(value as AssetsFieldPropertiesDto, true);
        }
        if (value['fieldType'] === 'Boolean') {
            return BooleanFieldPropertiesDtoToJSON(value as BooleanFieldPropertiesDto, true);
        }
        if (value['fieldType'] === 'Component') {
            return ComponentFieldPropertiesDtoToJSON(value as ComponentFieldPropertiesDto, true);
        }
        if (value['fieldType'] === 'Components') {
            return ComponentsFieldPropertiesDtoToJSON(value as ComponentsFieldPropertiesDto, true);
        }
        if (value['fieldType'] === 'DateTime') {
            return DateTimeFieldPropertiesDtoToJSON(value as DateTimeFieldPropertiesDto, true);
        }
        if (value['fieldType'] === 'Geolocation') {
            return GeolocationFieldPropertiesDtoToJSON(value as GeolocationFieldPropertiesDto, true);
        }
        if (value['fieldType'] === 'Json') {
            return JsonFieldPropertiesDtoToJSON(value as JsonFieldPropertiesDto, true);
        }
        if (value['fieldType'] === 'Number') {
            return NumberFieldPropertiesDtoToJSON(value as NumberFieldPropertiesDto, true);
        }
        if (value['fieldType'] === 'References') {
            return ReferencesFieldPropertiesDtoToJSON(value as ReferencesFieldPropertiesDto, true);
        }
        if (value['fieldType'] === 'RichText') {
            return RichTextFieldPropertiesDtoToJSON(value as RichTextFieldPropertiesDto, true);
        }
        if (value['fieldType'] === 'String') {
            return StringFieldPropertiesDtoToJSON(value as StringFieldPropertiesDto, true);
        }
        if (value['fieldType'] === 'Tags') {
            return TagsFieldPropertiesDtoToJSON(value as TagsFieldPropertiesDto, true);
        }
        if (value['fieldType'] === 'UI') {
            return UIFieldPropertiesDtoToJSON(value as UIFieldPropertiesDto, true);
        }
    }
    return {
        
        'label': value['label'],
        'hints': value['hints'],
        'placeholder': value['placeholder'],
        'isRequired': value['isRequired'],
        'isRequiredOnPublish': value['isRequiredOnPublish'],
        'isHalfWidth': value['isHalfWidth'],
        'editorUrl': value['editorUrl'],
        'tags': value['tags'],
        'fieldType': value['fieldType'],
    };
}
