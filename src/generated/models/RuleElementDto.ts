/**
 * Squidex API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { RuleElementPropertyDto } from './RuleElementPropertyDto';
import {
    RuleElementPropertyDtoFromJSON,
    RuleElementPropertyDtoToJSON,
} from './RuleElementPropertyDto';

/**
 * 
 * @export
 * @interface RuleElementDto
 */
export interface RuleElementDto {
    /**
     * Describes the action or trigger type.
     * @type {string}
     * @memberof RuleElementDto
     */
    description: string;
    /**
     * The label for the action or trigger type.
     * @type {string}
     * @memberof RuleElementDto
     */
    display: string;
    /**
     * Optional title.
     * @type {string}
     * @memberof RuleElementDto
     */
    title?: string | null;
    /**
     * The color for the icon.
     * @type {string}
     * @memberof RuleElementDto
     */
    iconColor?: string | null;
    /**
     * The image for the icon.
     * @type {string}
     * @memberof RuleElementDto
     */
    iconImage?: string | null;
    /**
     * The optional link to the product that is integrated.
     * @type {string}
     * @memberof RuleElementDto
     */
    readMore?: string | null;
    /**
     * The properties.
     * @type {Array<RuleElementPropertyDto>}
     * @memberof RuleElementDto
     */
    properties: Array<RuleElementPropertyDto>;
}


/**
 * Check if a given object implements the RuleElementDto interface.
 */
export function instanceOfRuleElementDto(value: any): value is RuleElementDto {
    if (!value) {
        return false;
    }
    if (!('description' in value) || value['description'] === undefined) return false;
    if (!('display' in value) || value['display'] === undefined) return false;
    if (!('properties' in value) || value['properties'] === undefined) return false;
    return true;
}

export function RuleElementDtoFromJSON(json: any): RuleElementDto {
    return RuleElementDtoFromJSONTyped(json, false);
}

export function RuleElementDtoFromJSONTyped(json: any, _ignoreDiscriminator: boolean): RuleElementDto {
    if (json == null) {
        return json;
    }
    return {
        
        'description': json['description'],
        'display': json['display'],
        'title': json['title'] == null ? undefined : json['title'],
        'iconColor': json['iconColor'] == null ? undefined : json['iconColor'],
        'iconImage': json['iconImage'] == null ? undefined : json['iconImage'],
        'readMore': json['readMore'] == null ? undefined : json['readMore'],
        'properties': ((json['properties'] as Array<any>).map(RuleElementPropertyDtoFromJSON)),
    };
}

export function RuleElementDtoToJSON(value?: RuleElementDto | null, _ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }
    return {
        
        'description': value['description'],
        'display': value['display'],
        'title': value['title'],
        'iconColor': value['iconColor'],
        'iconImage': value['iconImage'],
        'readMore': value['readMore'],
        'properties': ((value['properties'] as Array<any>).map(x => RuleElementPropertyDtoToJSON(x))),
    };
}
