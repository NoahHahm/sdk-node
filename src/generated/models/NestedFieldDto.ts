/* tslint:disable */
/* eslint-disable */
/**
 * Squidex API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { FieldPropertiesDto } from './FieldPropertiesDto';
import {
    FieldPropertiesDtoFromJSON,
    FieldPropertiesDtoFromJSONTyped,
    FieldPropertiesDtoToJSON,
} from './FieldPropertiesDto';
import type { ResourceLink } from './ResourceLink';
import {
    ResourceLinkFromJSON,
    ResourceLinkFromJSONTyped,
    ResourceLinkToJSON,
} from './ResourceLink';

/**
 * 
 * @export
 * @interface NestedFieldDto
 */
export interface NestedFieldDto {
    /**
     * The links.
     * @type {{ [key: string]: ResourceLink; }}
     * @memberof NestedFieldDto
     */
    links: { [key: string]: ResourceLink; };
    /**
     * The ID of the field.
     * @type {number}
     * @memberof NestedFieldDto
     */
    fieldId: number;
    /**
     * The name of the field. Must be unique within the schema.
     * @type {string}
     * @memberof NestedFieldDto
     */
    name: string;
    /**
     * Defines if the field is hidden.
     * @type {boolean}
     * @memberof NestedFieldDto
     */
    isHidden: boolean;
    /**
     * Defines if the field is locked.
     * @type {boolean}
     * @memberof NestedFieldDto
     */
    isLocked: boolean;
    /**
     * Defines if the field is disabled.
     * @type {boolean}
     * @memberof NestedFieldDto
     */
    isDisabled: boolean;
    /**
     * 
     * @type {FieldPropertiesDto}
     * @memberof NestedFieldDto
     */
    properties: FieldPropertiesDto;
}


/**
 * Check if a given object implements the NestedFieldDto interface.
 */
export function instanceOfNestedFieldDto(value: object): value is NestedFieldDto {
    if (!('links' in value) || value['links'] === undefined) return false;
    if (!('fieldId' in value) || value['fieldId'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('isHidden' in value) || value['isHidden'] === undefined) return false;
    if (!('isLocked' in value) || value['isLocked'] === undefined) return false;
    if (!('isDisabled' in value) || value['isDisabled'] === undefined) return false;
    if (!('properties' in value) || value['properties'] === undefined) return false;
    return true;
}

export function NestedFieldDtoFromJSON(json: any): NestedFieldDto {
    return NestedFieldDtoFromJSONTyped(json, false);
}

export function NestedFieldDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): NestedFieldDto {
    if (json == null) {
        return json;
    }
    return {
        
        'links': (mapValues(json['_links'], ResourceLinkFromJSON)),
        'fieldId': json['fieldId'],
        'name': json['name'],
        'isHidden': json['isHidden'],
        'isLocked': json['isLocked'],
        'isDisabled': json['isDisabled'],
        'properties': FieldPropertiesDtoFromJSON(json['properties']),
    };
}

export function NestedFieldDtoToJSON(value?: NestedFieldDto | null, ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }
    return {
        
        '_links': (mapValues(value['links'], ResourceLinkToJSON)),
        'fieldId': value['fieldId'],
        'name': value['name'],
        'isHidden': value['isHidden'],
        'isLocked': value['isLocked'],
        'isDisabled': value['isDisabled'],
        'properties': FieldPropertiesDtoToJSON(value['properties']),
    };
}
