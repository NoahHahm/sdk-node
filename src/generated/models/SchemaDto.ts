/* tslint:disable */
/* eslint-disable */
/**
 * Squidex API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { SchemaPropertiesDto } from './SchemaPropertiesDto';
import {
    SchemaPropertiesDtoFromJSON,
    SchemaPropertiesDtoFromJSONTyped,
    SchemaPropertiesDtoToJSON,
} from './SchemaPropertiesDto';
import type { SchemaScriptsDto } from './SchemaScriptsDto';
import {
    SchemaScriptsDtoFromJSON,
    SchemaScriptsDtoFromJSONTyped,
    SchemaScriptsDtoToJSON,
} from './SchemaScriptsDto';
import type { ResourceLink } from './ResourceLink';
import {
    ResourceLinkFromJSON,
    ResourceLinkFromJSONTyped,
    ResourceLinkToJSON,
} from './ResourceLink';
import type { FieldRuleDto } from './FieldRuleDto';
import {
    FieldRuleDtoFromJSON,
    FieldRuleDtoFromJSONTyped,
    FieldRuleDtoToJSON,
} from './FieldRuleDto';
import type { SchemaType } from './SchemaType';
import {
    SchemaTypeFromJSON,
    SchemaTypeFromJSONTyped,
    SchemaTypeToJSON,
} from './SchemaType';
import type { FieldDto } from './FieldDto';
import {
    FieldDtoFromJSON,
    FieldDtoFromJSONTyped,
    FieldDtoToJSON,
} from './FieldDto';

/**
 * 
 * @export
 * @interface SchemaDto
 */
export interface SchemaDto {
    /**
     * The links.
     * @type {{ [key: string]: ResourceLink; }}
     * @memberof SchemaDto
     */
    links: { [key: string]: ResourceLink; };
    /**
     * The ID of the schema.
     * @type {string}
     * @memberof SchemaDto
     */
    id: string;
    /**
     * The user that has created the schema.
     * @type {string}
     * @memberof SchemaDto
     */
    createdBy: string;
    /**
     * The user that has updated the schema.
     * @type {string}
     * @memberof SchemaDto
     */
    lastModifiedBy: string;
    /**
     * The name of the schema. Unique within the app.
     * @type {string}
     * @memberof SchemaDto
     */
    name: string;
    /**
     * 
     * @type {SchemaType}
     * @memberof SchemaDto
     */
    type: SchemaType;
    /**
     * The name of the category.
     * @type {string}
     * @memberof SchemaDto
     */
    category?: string | null;
    /**
     * 
     * @type {SchemaPropertiesDto}
     * @memberof SchemaDto
     */
    properties: SchemaPropertiesDto;
    /**
     * Indicates if the schema is a singleton.
     * @type {boolean}
     * @memberof SchemaDto
     * @deprecated
     */
    isSingleton: boolean;
    /**
     * Indicates if the schema is published.
     * @type {boolean}
     * @memberof SchemaDto
     */
    isPublished: boolean;
    /**
     * The date and time when the schema has been created.
     * @type {Date}
     * @memberof SchemaDto
     */
    created: Date;
    /**
     * The date and time when the schema has been modified last.
     * @type {Date}
     * @memberof SchemaDto
     */
    lastModified: Date;
    /**
     * The version of the schema.
     * @type {number}
     * @memberof SchemaDto
     */
    version: number;
    /**
     * 
     * @type {SchemaScriptsDto}
     * @memberof SchemaDto
     */
    scripts: SchemaScriptsDto;
    /**
     * The preview Urls.
     * @type {{ [key: string]: string; }}
     * @memberof SchemaDto
     */
    previewUrls: { [key: string]: string; };
    /**
     * The name of fields that are used in content lists.
     * @type {Array<string>}
     * @memberof SchemaDto
     */
    fieldsInLists: Array<string>;
    /**
     * The name of fields that are used in content references.
     * @type {Array<string>}
     * @memberof SchemaDto
     */
    fieldsInReferences: Array<string>;
    /**
     * The field rules.
     * @type {Array<FieldRuleDto>}
     * @memberof SchemaDto
     */
    fieldRules: Array<FieldRuleDto>;
    /**
     * The list of fields.
     * @type {Array<FieldDto>}
     * @memberof SchemaDto
     */
    fields: Array<FieldDto>;
}




/**
 * Check if a given object implements the SchemaDto interface.
 */
export function instanceOfSchemaDto(value: object): value is SchemaDto {
    if (!('links' in value) || value['links'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('createdBy' in value) || value['createdBy'] === undefined) return false;
    if (!('lastModifiedBy' in value) || value['lastModifiedBy'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('properties' in value) || value['properties'] === undefined) return false;
    if (!('isSingleton' in value) || value['isSingleton'] === undefined) return false;
    if (!('isPublished' in value) || value['isPublished'] === undefined) return false;
    if (!('created' in value) || value['created'] === undefined) return false;
    if (!('lastModified' in value) || value['lastModified'] === undefined) return false;
    if (!('version' in value) || value['version'] === undefined) return false;
    if (!('scripts' in value) || value['scripts'] === undefined) return false;
    if (!('previewUrls' in value) || value['previewUrls'] === undefined) return false;
    if (!('fieldsInLists' in value) || value['fieldsInLists'] === undefined) return false;
    if (!('fieldsInReferences' in value) || value['fieldsInReferences'] === undefined) return false;
    if (!('fieldRules' in value) || value['fieldRules'] === undefined) return false;
    if (!('fields' in value) || value['fields'] === undefined) return false;
    return true;
}

export function SchemaDtoFromJSON(json: any): SchemaDto {
    return SchemaDtoFromJSONTyped(json, false);
}

export function SchemaDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): SchemaDto {
    if (json == null) {
        return json;
    }
    return {
        
        'links': (mapValues(json['_links'], ResourceLinkFromJSON)),
        'id': json['id'],
        'createdBy': json['createdBy'],
        'lastModifiedBy': json['lastModifiedBy'],
        'name': json['name'],
        'type': SchemaTypeFromJSON(json['type']),
        'category': json['category'] == null ? undefined : json['category'],
        'properties': SchemaPropertiesDtoFromJSON(json['properties']),
        'isSingleton': json['isSingleton'],
        'isPublished': json['isPublished'],
        'created': (new Date(json['created'])),
        'lastModified': (new Date(json['lastModified'])),
        'version': json['version'],
        'scripts': SchemaScriptsDtoFromJSON(json['scripts']),
        'previewUrls': json['previewUrls'],
        'fieldsInLists': json['fieldsInLists'],
        'fieldsInReferences': json['fieldsInReferences'],
        'fieldRules': ((json['fieldRules'] as Array<any>).map(FieldRuleDtoFromJSON)),
        'fields': ((json['fields'] as Array<any>).map(FieldDtoFromJSON)),
    };
}

export function SchemaDtoToJSON(value?: SchemaDto | null, ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }
    return {
        
        '_links': (mapValues(value['links'], ResourceLinkToJSON)),
        'id': value['id'],
        'createdBy': value['createdBy'],
        'lastModifiedBy': value['lastModifiedBy'],
        'name': value['name'],
        'type': SchemaTypeToJSON(value['type']),
        'category': value['category'],
        'properties': SchemaPropertiesDtoToJSON(value['properties']),
        'isSingleton': value['isSingleton'],
        'isPublished': value['isPublished'],
        'created': ((value['created']).toISOString()),
        'lastModified': ((value['lastModified']).toISOString()),
        'version': value['version'],
        'scripts': SchemaScriptsDtoToJSON(value['scripts']),
        'previewUrls': value['previewUrls'],
        'fieldsInLists': value['fieldsInLists'],
        'fieldsInReferences': value['fieldsInReferences'],
        'fieldRules': ((value['fieldRules'] as Array<any>).map(FieldRuleDtoToJSON)),
        'fields': ((value['fields'] as Array<any>).map(FieldDtoToJSON)),
    };
}
