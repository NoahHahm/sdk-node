/* tslint:disable */
/* eslint-disable */
/**
 * Squidex API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { WorkflowTransitionDto } from './WorkflowTransitionDto';
import {
    WorkflowTransitionDtoFromJSON,
    WorkflowTransitionDtoFromJSONTyped,
    WorkflowTransitionDtoToJSON,
} from './WorkflowTransitionDto';

/**
 * 
 * @export
 * @interface WorkflowStepDto
 */
export interface WorkflowStepDto {
    /**
     * The transitions.
     * @type {{ [key: string]: WorkflowTransitionDto; }}
     * @memberof WorkflowStepDto
     */
    transitions?: { [key: string]: WorkflowTransitionDto; };
    /**
     * The optional color.
     * @type {string}
     * @memberof WorkflowStepDto
     */
    color?: string | null;
    /**
     * True if the content should be validated when moving to this step.
     * @type {boolean}
     * @memberof WorkflowStepDto
     */
    validate?: boolean;
    /**
     * Indicates if updates should not be allowed.
     * @type {boolean}
     * @memberof WorkflowStepDto
     */
    noUpdate?: boolean;
    /**
     * Optional expression that must evaluate to true when you want to prevent updates.
     * @type {string}
     * @memberof WorkflowStepDto
     */
    noUpdateExpression?: string | null;
    /**
     * Optional list of roles to restrict the updates for users with these roles.
     * @type {Array<string>}
     * @memberof WorkflowStepDto
     */
    noUpdateRoles?: Array<string> | null;
}


/**
 * Check if a given object implements the WorkflowStepDto interface.
 */
export function instanceOfWorkflowStepDto(value: any): value is WorkflowStepDto {
    return true;
}

export function WorkflowStepDtoFromJSON(json: any): WorkflowStepDto {
    return WorkflowStepDtoFromJSONTyped(json, false);
}

export function WorkflowStepDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): WorkflowStepDto {
    if (json == null) {
        return json;
    }
    return {
        
        'transitions': json['transitions'] == null ? undefined : (mapValues(json['transitions'], WorkflowTransitionDtoFromJSON)),
        'color': json['color'] == null ? undefined : json['color'],
        'validate': json['validate'] == null ? undefined : json['validate'],
        'noUpdate': json['noUpdate'] == null ? undefined : json['noUpdate'],
        'noUpdateExpression': json['noUpdateExpression'] == null ? undefined : json['noUpdateExpression'],
        'noUpdateRoles': json['noUpdateRoles'] == null ? undefined : json['noUpdateRoles'],
    };
}

export function WorkflowStepDtoToJSON(value?: WorkflowStepDto | null, ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }
    return {
        
        'transitions': value['transitions'] == null ? undefined : (mapValues(value['transitions'], x => WorkflowTransitionDtoToJSON(x))),
        'color': value['color'],
        'validate': value['validate'],
        'noUpdate': value['noUpdate'],
        'noUpdateExpression': value['noUpdateExpression'],
        'noUpdateRoles': value['noUpdateRoles'],
    };
}
