/**
 * Squidex API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { RuleActionDto } from './RuleActionDto';
import {
    RuleActionDtoFromJSONTyped,
    RuleActionDtoToJSON,
} from './RuleActionDto';

/**
 * 
 * @export
 * @interface MediumRuleActionDto
 */
export interface MediumRuleActionDto extends RuleActionDto {
    /**
     * The self issued access token.
     * @type {string}
     * @memberof MediumRuleActionDto
     */
    accessToken: string;
    /**
     * The title, used for the url.
     * @type {string}
     * @memberof MediumRuleActionDto
     */
    title: string;
    /**
     * The content, either html or markdown.
     * @type {string}
     * @memberof MediumRuleActionDto
     */
    content: string;
    /**
     * The original home of this content, if it was originally published elsewhere.
     * @type {string}
     * @memberof MediumRuleActionDto
     */
    canonicalUrl?: string | null;
    /**
     * The optional comma separated list of tags.
     * @type {string}
     * @memberof MediumRuleActionDto
     */
    tags?: string | null;
    /**
     * Optional publication id.
     * @type {string}
     * @memberof MediumRuleActionDto
     */
    publicationId?: string | null;
    /**
     * Indicates whether the content is markdown or html.
     * @type {boolean}
     * @memberof MediumRuleActionDto
     */
    isHtml: boolean;
}


/**
 * Check if a given object implements the MediumRuleActionDto interface.
 */
export function instanceOfMediumRuleActionDto(value: any): value is MediumRuleActionDto {
    if (!value) {
        return false;
    }
    if (!('accessToken' in value) || value['accessToken'] === undefined) return false;
    if (!('title' in value) || value['title'] === undefined) return false;
    if (!('content' in value) || value['content'] === undefined) return false;
    if (!('isHtml' in value) || value['isHtml'] === undefined) return false;
    return true;
}

export function MediumRuleActionDtoFromJSON(json: any): MediumRuleActionDto {
    return MediumRuleActionDtoFromJSONTyped(json, false);
}

export function MediumRuleActionDtoFromJSONTyped(json: any, _ignoreDiscriminator: boolean): MediumRuleActionDto {
    if (json == null) {
        return json;
    }
    return {
        ...RuleActionDtoFromJSONTyped(json, _ignoreDiscriminator),
        'accessToken': json['accessToken'],
        'title': json['title'],
        'content': json['content'],
        'canonicalUrl': json['canonicalUrl'] == null ? undefined : json['canonicalUrl'],
        'tags': json['tags'] == null ? undefined : json['tags'],
        'publicationId': json['publicationId'] == null ? undefined : json['publicationId'],
        'isHtml': json['isHtml'],
    };
}

export function MediumRuleActionDtoToJSON(value?: MediumRuleActionDto | null, _ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }
    return {
        ...RuleActionDtoToJSON(value, true),
        'accessToken': value['accessToken'],
        'title': value['title'],
        'content': value['content'],
        'canonicalUrl': value['canonicalUrl'],
        'tags': value['tags'],
        'publicationId': value['publicationId'],
        'isHtml': value['isHtml'],
    };
}
