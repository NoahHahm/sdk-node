/* tslint:disable */
/* eslint-disable */
/**
 * Squidex API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ReferralInfo } from './ReferralInfo';
import {
    ReferralInfoFromJSON,
    ReferralInfoFromJSONTyped,
    ReferralInfoToJSON,
} from './ReferralInfo';
import type { PlanDto } from './PlanDto';
import {
    PlanDtoFromJSON,
    PlanDtoFromJSONTyped,
    PlanDtoToJSON,
} from './PlanDto';
import type { PlansLockedReason } from './PlansLockedReason';
import {
    PlansLockedReasonFromJSON,
    PlansLockedReasonFromJSONTyped,
    PlansLockedReasonToJSON,
} from './PlansLockedReason';

/**
 * 
 * @export
 * @interface PlansDto
 */
export interface PlansDto {
    /**
     * The available plans.
     * @type {Array<PlanDto>}
     * @memberof PlansDto
     */
    plans: Array<PlanDto>;
    /**
     * The current plan id.
     * @type {string}
     * @memberof PlansDto
     */
    currentPlanId?: string | null;
    /**
     * The plan owner.
     * @type {string}
     * @memberof PlansDto
     */
    planOwner?: string | null;
    /**
     * The link to the management portal.
     * @type {string}
     * @memberof PlansDto
     */
    portalLink?: string | null;
    /**
     * 
     * @type {ReferralInfo}
     * @memberof PlansDto
     */
    referral?: ReferralInfo;
    /**
     * 
     * @type {PlansLockedReason}
     * @memberof PlansDto
     */
    locked: PlansLockedReason;
}




/**
 * Check if a given object implements the PlansDto interface.
 */
export function instanceOfPlansDto(value: object): value is PlansDto {
    if (!('plans' in value) || value['plans'] === undefined) return false;
    if (!('locked' in value) || value['locked'] === undefined) return false;
    return true;
}

export function PlansDtoFromJSON(json: any): PlansDto {
    return PlansDtoFromJSONTyped(json, false);
}

export function PlansDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): PlansDto {
    if (json == null) {
        return json;
    }
    return {
        
        'plans': ((json['plans'] as Array<any>).map(PlanDtoFromJSON)),
        'currentPlanId': json['currentPlanId'] == null ? undefined : json['currentPlanId'],
        'planOwner': json['planOwner'] == null ? undefined : json['planOwner'],
        'portalLink': json['portalLink'] == null ? undefined : json['portalLink'],
        'referral': json['referral'] == null ? undefined : ReferralInfoFromJSON(json['referral']),
        'locked': PlansLockedReasonFromJSON(json['locked']),
    };
}

export function PlansDtoToJSON(value?: PlansDto | null, ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }
    return {
        
        'plans': ((value['plans'] as Array<any>).map(PlanDtoToJSON)),
        'currentPlanId': value['currentPlanId'],
        'planOwner': value['planOwner'],
        'portalLink': value['portalLink'],
        'referral': ReferralInfoToJSON(value['referral']),
        'locked': PlansLockedReasonToJSON(value['locked']),
    };
}
